{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { Whitelist } from '../../shared/models/whitelist';\nimport { TextValidators } from '../../shared/validators/text.validator';\nimport { Login } from '../../shared/models/login';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../shared/services/authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../shared/services/whitelist.service\";\nimport * as i5 from \"../../shared/services/message.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"../../shared/components/element-validation-message/element-validation-message.component\";\nfunction RegisterComponent_form_6_element_validation_message_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 24);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r1.registerForm.get(\"firstname\"));\n  }\n}\nfunction RegisterComponent_form_6_element_validation_message_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 24);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r2.registerForm.get(\"lastname\"));\n  }\n}\nfunction RegisterComponent_form_6_element_validation_message_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 24);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r3.registerForm.get(\"email\"));\n  }\n}\nfunction RegisterComponent_form_6_element_validation_message_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 24);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r4.registerForm.get(\"username\"));\n  }\n}\nfunction RegisterComponent_form_6_element_validation_message_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 24);\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r5.registerForm.get(\"password\"));\n  }\n}\nfunction RegisterComponent_form_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 6);\n    i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_form_6_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onRegister());\n    });\n    i0.ɵɵelementStart(1, \"div\", 7)(2, \"div\", 8);\n    i0.ɵɵelement(3, \"input\", 9);\n    i0.ɵɵtemplate(4, RegisterComponent_form_6_element_validation_message_4_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(5, \"label\", 11);\n    i0.ɵɵtext(6, \"First Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 8);\n    i0.ɵɵelement(8, \"input\", 12);\n    i0.ɵɵtemplate(9, RegisterComponent_form_6_element_validation_message_9_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(10, \"label\", 13);\n    i0.ɵɵtext(11, \"Last Name\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"div\", 7)(13, \"div\", 14);\n    i0.ɵɵelement(14, \"input\", 15);\n    i0.ɵɵtemplate(15, RegisterComponent_form_6_element_validation_message_15_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(16, \"label\", 16);\n    i0.ɵɵtext(17, \"Email\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"div\", 7)(19, \"div\", 8);\n    i0.ɵɵelement(20, \"input\", 17);\n    i0.ɵɵtemplate(21, RegisterComponent_form_6_element_validation_message_21_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(22, \"label\", 18);\n    i0.ɵɵtext(23, \"Username\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(24, \"div\", 8);\n    i0.ɵɵelement(25, \"input\", 19);\n    i0.ɵɵtemplate(26, RegisterComponent_form_6_element_validation_message_26_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(27, \"label\", 20);\n    i0.ɵɵtext(28, \"Password\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(29, \"div\", 21)(30, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function RegisterComponent_form_6_Template_button_click_30_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onRegister());\n    });\n    i0.ɵɵtext(31, \"Register\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(32, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function RegisterComponent_form_6_Template_button_click_32_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onCancel());\n    });\n    i0.ɵɵtext(33, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.registerForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"firstname\") && ctx_r0.isControlInvalid(ctx_r0.registerForm.get(\"firstname\")));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"lastname\") && ctx_r0.isControlInvalid(ctx_r0.registerForm.get(\"lastname\")));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"email\") && ctx_r0.isControlInvalid(ctx_r0.registerForm.get(\"email\")));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"username\") && ctx_r0.isControlInvalid(ctx_r0.registerForm.get(\"username\")));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"password\") && ctx_r0.isControlInvalid(ctx_r0.registerForm.get(\"password\")));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.isProcessing || !ctx_r0.registerForm.valid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.isProcessing);\n  }\n}\nexport class RegisterComponent {\n  constructor(authenticationService, router, formBuilder, whitelistService, messageService) {\n    this.authenticationService = authenticationService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.whitelistService = whitelistService;\n    this.messageService = messageService;\n    this.elementHasFocus = ElementFocus.elementHasFocus;\n    this.isControlInvalid = ControlValidation.isInvalid;\n    this.nameWhitelist = new Whitelist();\n    this.descWhitelist = new Whitelist();\n    this.usernameWhitelist = new Whitelist();\n    this.passwordWhitelist = new Whitelist();\n    this.isProcessing = false;\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.nameWhitelist = yield _this.whitelistService.getWhitelist(\"NAME\");\n      _this.descWhitelist = yield _this.whitelistService.getWhitelist(\"DESC\");\n      _this.usernameWhitelist = yield _this.whitelistService.getWhitelist(\"USERNAME\");\n      _this.passwordWhitelist = yield _this.whitelistService.getWhitelist(\"PASSWORD\");\n      _this.initForm();\n    })();\n  }\n  /**\r\n   * Initialise Form\r\n   */\n  initForm() {\n    this.registerForm = this.formBuilder.group({\n      firstname: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist), TextValidators.minLengthValidator(1)],\n        updateOn: 'blur'\n      }],\n      lastname: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist), TextValidators.minLengthValidator(1)],\n        updateOn: 'blur'\n      }],\n      email: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.descWhitelist), TextValidators.minLengthValidator(1), TextValidators.emailValidator],\n        updateOn: 'blur'\n      }],\n      username: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.usernameWhitelist), TextValidators.minLengthValidator(4)],\n        updateOn: 'blur'\n      }],\n      password: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.passwordWhitelist), TextValidators.minLengthValidator(8)],\n        updateOn: 'blur'\n      }]\n    });\n  }\n  /**\r\n   * Register\r\n   */\n  onRegister() {}\n  /**\r\n   * Cancel\r\n   */\n  onCancel() {\n    this.isProcessing = true;\n    this.registerForm.patchValue(new Login());\n    this.isProcessing = false;\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthenticationService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.WhitelistService), i0.ɵɵdirectiveInject(i5.MessageService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 7,\n  vars: 1,\n  consts: [[\"role\", \"main\", 1, \"container\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"g-2\"], [1, \"mb-2\", \"form-floating\", \"col-md-6\"], [\"id\", \"firstname\", \"type\", \"text\", \"formControlName\", \"firstname\", \"placeholder\", \"firstname\", \"maxLength\", \"100\", 1, \"form-control\"], [3, \"model\", 4, \"ngIf\"], [\"for\", \"firstname\", 1, \"form-label\"], [\"id\", \"lastname\", \"type\", \"text\", \"formControlName\", \"lastname\", \"placeholder\", \"lastname\", \"maxLength\", \"100\", 1, \"form-control\"], [\"for\", \"lastname\", 1, \"form-label\"], [1, \"mb-2\", \"form-floating\", \"col\"], [\"id\", \"email\", \"type\", \"text\", \"formControlName\", \"email\", \"placeholder\", \"email\", \"maxLength\", \"256\", 1, \"form-control\"], [\"for\", \"email\", 1, \"form-label\"], [\"id\", \"username\", \"type\", \"text\", \"formControlName\", \"username\", \"placeholder\", \"username\", \"maxLength\", \"40\", 1, \"form-control\"], [\"for\", \"username\", 1, \"form-label\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"password\", \"maxLength\", \"40\", 1, \"form-control\"], [\"for\", \"password\", 1, \"form-label\"], [1, \"gap-2\", \"d-flex\", \"justify-content-end\"], [\"type\", \"submit\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [3, \"model\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"main\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h5\", 3);\n      i0.ɵɵtext(4, \"Register\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵtemplate(6, RegisterComponent_form_6_Template, 34, 8, \"form\", 5);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.registerForm);\n    }\n  },\n  dependencies: [i6.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i7.ElementValidationMessageComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","ControlValidation","ElementFocus","Whitelist","TextValidators","Login","i0","RegisterComponent","constructor","authenticationService","router","formBuilder","whitelistService","messageService","elementHasFocus","isInvalid","ngOnInit","nameWhitelist","getWhitelist","descWhitelist","usernameWhitelist","passwordWhitelist","initForm","registerForm","group","firstname","validators","required","whitelistValidator","minLengthValidator","updateOn","lastname","email","emailValidator","username","password","onRegister","onCancel","isProcessing","patchValue","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\register\\register.component.ts","C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\register\\register.component.html"],"sourcesContent":["/**************************************************************************\n*\n*  System:    ToDo (Web)\n*  Module:    Client App \\ Todo\n*  Date:      15 AUG 2023\n*  Author:    Gary Moran (GM)\n*  Function:  Register\n*  Notes:     \n*\n*                   : History of Amendments :\n*  Date        Name        Brief description                \n*  ----------- ----------  ---------------------------------------------\n*  15 AUG 2023 GM          Created\n************************************************************************/\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MessageService } from '../../shared/services/message.service';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { Whitelist } from '../../shared/models/whitelist';\nimport { WhitelistService } from '../../shared/services/whitelist.service';\nimport { TextValidators } from '../../shared/validators/text.validator';\nimport { AuthenticationService } from '../../shared/services/authentication.service';\nimport { Login } from '../../shared/models/login';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html'\n})\nexport class RegisterComponent implements OnInit {\n\n  elementHasFocus = ElementFocus.elementHasFocus;\n  isControlInvalid = ControlValidation.isInvalid;\n\n  nameWhitelist: Whitelist = new Whitelist();\n  descWhitelist: Whitelist = new Whitelist();\n  usernameWhitelist: Whitelist = new Whitelist();\n  passwordWhitelist: Whitelist = new Whitelist();\n\n  isProcessing: boolean = false;\n  registerForm!: FormGroup;\n\n  constructor(private authenticationService: AuthenticationService, private router: Router, private formBuilder: FormBuilder, private whitelistService: WhitelistService, private messageService: MessageService,) { }\n\n  async ngOnInit(): Promise<void> {\n    this.nameWhitelist = await this.whitelistService.getWhitelist(\"NAME\");\n    this.descWhitelist = await this.whitelistService.getWhitelist(\"DESC\");\n    this.usernameWhitelist = await this.whitelistService.getWhitelist(\"USERNAME\");\n    this.passwordWhitelist = await this.whitelistService.getWhitelist(\"PASSWORD\");\n    this.initForm();\n  }\n\n  /**\n   * Initialise Form\n   */\n  initForm() {\n    this.registerForm = this.formBuilder.group({\n      firstname: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist), TextValidators.minLengthValidator(1)], updateOn: 'blur' }],\n      lastname: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist), TextValidators.minLengthValidator(1)], updateOn: 'blur' }],\n      email: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.descWhitelist), TextValidators.minLengthValidator(1), TextValidators.emailValidator], updateOn: 'blur' }],\n      username: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.usernameWhitelist), TextValidators.minLengthValidator(4)], updateOn: 'blur' }],\n      password: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.passwordWhitelist), TextValidators.minLengthValidator(8)], updateOn: 'blur' }],\n    });\n  }\n\n  /**\n   * Register\n   */\n  onRegister() {\n  }\n\n  /**\n   * Cancel\n   */\n  onCancel() {\n    this.isProcessing = true;\n    this.registerForm.patchValue(new Login());\n    this.isProcessing = false;\n  }\n}\n","<main class=\"container\" role=\"main\">\r\n\r\n  <div class=\"card\">\r\n\r\n    <div class=\"card-header\">\r\n      <h5 class=\"card-title\">Register</h5>\r\n    </div>\r\n\r\n    <div class=\"card-body\">\r\n\r\n      <form novalidate (ngSubmit)=\"onRegister()\" [formGroup]=\"registerForm\" *ngIf=\"registerForm\">\r\n\r\n        <div class=\"row g-2\">\r\n\r\n          <div class=\"mb-2 form-floating col-md-6\">\r\n            <input class=\"form-control\" id=\"firstname\" type=\"text\" formControlName=\"firstname\" placeholder=\"firstname\" maxLength=\"100\" />\r\n            <element-validation-message [model]=\"registerForm.get('firstname')\" *ngIf=\"!elementHasFocus('firstname') && isControlInvalid(registerForm.get('firstname'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"firstname\">First Name</label>\r\n          </div>\r\n\r\n          <div class=\"mb-2 form-floating col-md-6\">\r\n            <input class=\"form-control\" id=\"lastname\" type=\"text\" formControlName=\"lastname\" placeholder=\"lastname\" maxLength=\"100\" />\r\n            <element-validation-message [model]=\"registerForm.get('lastname')\" *ngIf=\"!elementHasFocus('lastname') && isControlInvalid(registerForm.get('lastname'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"lastname\">Last Name</label>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"row g-2\">\r\n\r\n          <div class=\"mb-2 form-floating col\">\r\n            <input class=\"form-control\" id=\"email\" type=\"text\" formControlName=\"email\" placeholder=\"email\" maxLength=\"256\" />\r\n            <element-validation-message [model]=\"registerForm.get('email')\" *ngIf=\"!elementHasFocus('email') && isControlInvalid(registerForm.get('email'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"email\">Email</label>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"row g-2\">\r\n\r\n          <div class=\"mb-2 form-floating col-md-6\">\r\n            <input class=\"form-control\" id=\"username\" type=\"text\" formControlName=\"username\" placeholder=\"username\" maxLength=\"40\" />\r\n            <element-validation-message [model]=\"registerForm.get('username')\" *ngIf=\"!elementHasFocus('username') && isControlInvalid(registerForm.get('username'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"username\">Username</label>\r\n          </div>\r\n\r\n          <div class=\"mb-2 form-floating col-md-6\">\r\n            <input class=\"form-control\" id=\"password\" type=\"password\" formControlName=\"password\" placeholder=\"password\" maxLength=\"40\" />\r\n            <element-validation-message [model]=\"registerForm.get('password')\" *ngIf=\"!elementHasFocus('password') && isControlInvalid(registerForm.get('password'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"password\">Password</label>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"gap-2 d-flex justify-content-end\">\r\n          <button type=\"submit\" class=\"btn btn-secondary\" (click)=\"onRegister()\" [disabled]=\"isProcessing || !this.registerForm.valid\">Register</button>\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onCancel()\" [disabled]=\"isProcessing\">Cancel</button>\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n</main>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}