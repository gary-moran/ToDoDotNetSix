{"ast":null,"code":"import { MessageType } from '../../models/message-type.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/message.service\";\nimport * as i2 from \"@angular/common\";\nfunction MessageComponent_div_1_div_1_sup_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"sup\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r3 = i0.ɵɵnextContext().index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i_r3 + 1);\n  }\n}\nfunction MessageComponent_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function MessageComponent_div_1_div_1_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const message_r2 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.deleteMessage(message_r2));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"p\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵtemplate(4, MessageComponent_div_1_div_1_sup_4_Template, 2, 1, \"sup\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const message_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    i0.ɵɵclassMapInterpolate1(\"alert alert-\", message_r2.type, \" alert-dismissible\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", message_r2.message, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i_r3 + 1 > 1);\n  }\n}\nfunction MessageComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtemplate(1, MessageComponent_div_1_div_1_Template, 5, 5, \"div\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.messages);\n  }\n}\nexport class MessageComponent {\n  onWindowClick(event) {\n    if (event.code == 'KeyX' && event.altKey) {\n      this.deleteSingleMessage();\n    }\n  }\n  constructor(messageService) {\n    this.messageService = messageService;\n    this.subject = '';\n    this.disposeInterval = 3000;\n    this.messages = [];\n    // Default Persist Message Types to Danger\n    this.persistMessageTypes = [MessageType.Danger];\n  }\n  ngOnInit() {\n    // if persist message types params are passed, then use them to set Persist Message Types\n    if (this.persistMessageTypesParam) {\n      this.persistMessageTypes = [];\n      this.persistMessageTypesParam.forEach(typeString => {\n        this.persistMessageTypes.push(MessageType[typeString]);\n      });\n    }\n    // subscribe to messages\n    this.subscribeToMessages();\n  }\n  ngOnDestroy() {\n    // unsubscribe to ensure no memory leaks\n    this.messagesSubscription$.unsubscribe();\n  }\n  /**\r\n   * subscribe to Messages\r\n   */\n  subscribeToMessages() {\n    this.messagesSubscription$ = this.messageService.getMessage().subscribe(message => {\n      // if there is a message and either the subject matches or no subject is set, then push that message\n      if (message && (message.subject === this.subject || this.subject === '')) {\n        const msg = this.messages.findIndex(msg => msg.subject === message.subject && msg.type === message.type && msg.message === message.message);\n        // do not display duplicate messages\n        if (msg < 0) this.messages.push(message);\n        // if messages are not set to persist, then set a timeout to dispose of them\n        if (!this.persistMessageTypes.includes(message.type) && !message.persist) setTimeout(() => this.deleteMessage(message), this.disposeInterval);\n      }\n    });\n  }\n  /**\r\n   * Delete Message\r\n   * @param message Message\r\n   */\n  deleteMessage(message) {\n    const index = this.messages.findIndex(msg => msg.messageId === message.messageId);\n    if (index > -1) this.messages.splice(index, 1);\n  }\n  /**\r\n   * Delete  Single Messages using the keyboard\r\n   */\n  deleteSingleMessage() {\n    const index = this.messages.length - 1;\n    if (this.messages.length == 1) this.messages = [];else this.messages.splice(index, 1);\n  }\n}\nMessageComponent.ɵfac = function MessageComponent_Factory(t) {\n  return new (t || MessageComponent)(i0.ɵɵdirectiveInject(i1.MessageService));\n};\nMessageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MessageComponent,\n  selectors: [[\"app-messages\"]],\n  hostBindings: function MessageComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keyup\", function MessageComponent_keyup_HostBindingHandler($event) {\n        return ctx.onWindowClick($event);\n      }, false, i0.ɵɵresolveWindow);\n    }\n  },\n  inputs: {\n    subject: \"subject\",\n    disposeInterval: \"disposeInterval\",\n    persistMessageTypesParam: \"persistMessageTypesParam\"\n  },\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"container\"], [\"id\", \"messageBar\", \"class\", \"alert-messages\", 4, \"ngIf\"], [\"id\", \"messageBar\", 1, \"alert-messages\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"alert\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"btn-close\", 3, \"click\"], [1, \"text-center\"], [\"class\", \"text-muted\", 4, \"ngIf\"], [1, \"text-muted\"]],\n  template: function MessageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, MessageComponent_div_1_Template, 2, 1, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.messages.length);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  styles: [\".alert-messages[_ngcontent-%COMP%] {\\r\\n  position: relative;\\r\\n  width: 100%;\\r\\n  z-index: 7000;\\r\\n  opacity: 0.9;\\r\\n}\\r\\n\\r\\n.alert[_ngcontent-%COMP%] {\\r\\n  position: absolute;\\r\\n  width: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hhcmVkL2NvbXBvbmVudHMvbWVzc2FnZS9tZXNzYWdlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYTs7QUFFYjtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsYUFBYTtFQUNiLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0FBQ2IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBNZXNzYWdlcyAqL1xyXG5cclxuLmFsZXJ0LW1lc3NhZ2VzIHtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgei1pbmRleDogNzAwMDtcclxuICBvcGFjaXR5OiAwLjk7XHJcbn1cclxuXHJcbi5hbGVydCB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["MessageType","i0","MessageComponent","onWindowClick","event","code","altKey","deleteSingleMessage","constructor","messageService","Danger","ngOnInit","persistMessageTypesParam","persistMessageTypes","forEach","typeString","push","subscribeToMessages","ngOnDestroy","messagesSubscription$","unsubscribe","getMessage","subscribe","message","subject","msg","messages","findIndex","type","includes","persist","setTimeout","deleteMessage","disposeInterval","index","messageId","splice","length","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\components\\message\\message.component.ts","C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\components\\message\\message.component.html"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Components\r\n*  Date:      02 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Message\r\n*  Notes:\r\n*\r\n*  To use, inject the MessageService into your component, then use\r\n*  the service to send a message, passing the subject (which targets the component),\r\n*  message text and message type e.g.\r\n*\r\n*  constructor( private messageService: MessageService ) { }\r\n*\r\n*  this.messageService.sendMessage(new Message(\"nav-menu\", \"Successfully deleted todo.\", MessageType.Success));\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  02 AUG 2023 GM          Created\r\n************************************************************************/\r\n\r\nimport { Component, Input, OnInit, HostListener, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessageService } from '../../services/message.service';\r\nimport { Message } from '../../models/message';\r\nimport { MessageType } from '../../models/message-type.enum';\r\n\r\n@Component({\r\n  selector: 'app-messages',\r\n  templateUrl: './message.component.html',\r\n  styleUrls: ['./message.component.css']\r\n})\r\nexport class MessageComponent implements OnInit, OnDestroy {\r\n  @Input() subject: string = '';\r\n  @Input() disposeInterval: number = 3000;\r\n  @Input()\r\n    persistMessageTypesParam!: string[];\r\n  @HostListener('window:keyup', ['$event'])\r\n  onWindowClick(event: KeyboardEvent) {\r\n    if (event.code == 'KeyX' && event.altKey) {\r\n      this.deleteSingleMessage();\r\n    }\r\n  }\r\n\r\n  messages: Message[] = [];\r\n  messagesSubscription$!: Subscription;\r\n  // Default Persist Message Types to Danger\r\n  persistMessageTypes: MessageType[] = [MessageType.Danger]\r\n\r\n  constructor(private messageService: MessageService) { }\r\n\r\n  ngOnInit() {\r\n    // if persist message types params are passed, then use them to set Persist Message Types\r\n    if (this.persistMessageTypesParam) {\r\n      this.persistMessageTypes = [];\r\n      this.persistMessageTypesParam.forEach(typeString => {\r\n        this.persistMessageTypes.push(MessageType[typeString as keyof typeof MessageType]);\r\n      })\r\n    }      \r\n\r\n    // subscribe to messages\r\n    this.subscribeToMessages();\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // unsubscribe to ensure no memory leaks\r\n    this.messagesSubscription$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * subscribe to Messages\r\n   */\r\n  subscribeToMessages(): void {\r\n    this.messagesSubscription$ = this.messageService.getMessage().subscribe(message => {\r\n      // if there is a message and either the subject matches or no subject is set, then push that message\r\n      if (message && (message.subject === this.subject || this.subject === '')) {\r\n        const msg = this.messages.findIndex(msg => msg.subject === message.subject && msg.type === message.type && msg.message === message.message);\r\n        // do not display duplicate messages\r\n        if (msg < 0)\r\n          this.messages.push(message);\r\n        // if messages are not set to persist, then set a timeout to dispose of them\r\n        if (!this.persistMessageTypes.includes(message.type) && !message.persist)\r\n          setTimeout(() => this.deleteMessage(message), this.disposeInterval);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Delete Message\r\n   * @param message Message\r\n   */\r\n  deleteMessage(message: Message): void {\r\n    const index = this.messages.findIndex(msg => msg.messageId === message.messageId);\r\n    if (index > -1)\r\n      this.messages.splice(index, 1);\r\n  }\r\n\r\n  /**\r\n   * Delete  Single Messages using the keyboard\r\n   */\r\n  deleteSingleMessage(): void {\r\n    const index = this.messages.length - 1;\r\n    if (this.messages.length == 1)\r\n      this.messages = [];\r\n    else\r\n      this.messages.splice(index, 1);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <div *ngIf=\"messages.length\" id=\"messageBar\" class=\"alert-messages\">\r\n    <div *ngFor=\"let message of messages; let i = index\" class=\"alert alert-{{message.type}} alert-dismissible\" role=\"alert\">\r\n      <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"deleteMessage(message)\"></button>\r\n      <p class=\"text-center\">\r\n        {{message.message}}\r\n        <sup *ngIf=\"(i + 1) > 1\" class=\"text-muted\">{{i + 1}}</sup>\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}