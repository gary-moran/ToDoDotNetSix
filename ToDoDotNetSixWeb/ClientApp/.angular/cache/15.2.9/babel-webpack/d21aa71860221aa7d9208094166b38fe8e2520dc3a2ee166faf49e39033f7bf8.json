{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from 'rxjs';\nimport { Message } from '../models/message';\nimport { MessageType } from '../models/message-type.enum';\nimport { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./log-service/log.service\";\nimport * as i2 from \"./app-config.service\";\nimport * as i3 from \"@angular/common/http\";\nexport let MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    constructor(logger, appConfigService, http) {\n      this.logger = logger;\n      this.appConfigService = appConfigService;\n      this.http = http;\n      this.messageSubject = new Subject();\n      this.apiBaseUrl = \"\";\n      this.onInit();\n    }\n    onInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        yield _this.appConfigService.AppConfig.pipe(take(1)).subscribe(config => _this.apiBaseUrl = `${config?.WebApi ?? \"\"}/api/Log`);\n      })();\n    }\n    /**\r\n     * Send Message\r\n     * @param message\r\n     * @param persist Persist Message\r\n     */\n    sendMessage(message, persist = false) {\n      if (persist) message.persist = true;\n      this.messageSubject.next(message);\n    }\n    /**\r\n     * Get Message\r\n     * @returns Observable<Message>\r\n     */\n    getMessage() {\n      return this.messageSubject.asObservable();\n    }\n    /**\r\n     * Send Message\r\n     * @param error\r\n     * @param subject\r\n     */\n    sendErrorMessage(error, subject = \"nav-menu\") {\n      let message = 'The application has encountered an unexpected error';\n      this.http.get(this.apiBaseUrl).pipe(take(1)).subscribe(response => {\n        const logId = response;\n        this.logger.error(error.message, logId);\n        message = `${message}. The Log ID for the error is: ${logId}.`;\n        this.messageSubject.next(new Message(subject, message, MessageType.Danger));\n      }, responseError => this.logger.error(responseError.message));\n    }\n  }\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i2.AppConfigService), i0.ɵɵinject(i3.HttpClient));\n  };\n  MessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessageService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}