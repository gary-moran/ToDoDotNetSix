{"ast":null,"code":"import { MessageType } from '../../models/message-type.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/message.service\";\nimport * as i2 from \"@angular/common\";\nfunction MessageComponent_div_1_div_1_sup_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"sup\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r3 = i0.ɵɵnextContext().index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i_r3 + 1);\n  }\n}\nfunction MessageComponent_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function MessageComponent_div_1_div_1_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const message_r2 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.deleteMessage(message_r2));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"p\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵtemplate(4, MessageComponent_div_1_div_1_sup_4_Template, 2, 1, \"sup\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const message_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    i0.ɵɵclassMapInterpolate1(\"alert alert-\", message_r2.type, \" alert-dismissible\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", message_r2.message, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i_r3 + 1 > 1);\n  }\n}\nfunction MessageComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtemplate(1, MessageComponent_div_1_div_1_Template, 5, 5, \"div\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.messages);\n  }\n}\nexport let MessageComponent = /*#__PURE__*/(() => {\n  class MessageComponent {\n    onWindowClick(event) {\n      if (event.code == 'KeyX' && event.altKey) {\n        this.deleteSingleMessage();\n      }\n    }\n    constructor(messageService) {\n      this.messageService = messageService;\n      this.subject = '';\n      this.disposeInterval = 3000;\n      this.messages = [];\n      // Default Persist Message Types to Danger\n      this.persistMessageTypes = [MessageType.Danger];\n    }\n    ngOnInit() {\n      // if persist message types params are passed, then use them to set Persist Message Types\n      if (this.persistMessageTypesParam) {\n        this.persistMessageTypes = [];\n        this.persistMessageTypesParam.forEach(typeString => {\n          this.persistMessageTypes.push(MessageType[typeString]);\n        });\n      }\n      // subscribe to messages\n      this.subscribeToMessages();\n    }\n    ngOnDestroy() {\n      // unsubscribe to ensure no memory leaks\n      this.messagesSubscription$.unsubscribe();\n    }\n    /**\r\n     * subscribe to Messages\r\n     */\n    subscribeToMessages() {\n      this.messagesSubscription$ = this.messageService.getMessage().subscribe(message => {\n        // if there is a message and either the subject matches or no subject is set, then push that message\n        if (message && (message.subject === this.subject || this.subject === '')) {\n          const msg = this.messages.findIndex(msg => msg.subject === message.subject && msg.type === message.type && msg.message === message.message);\n          // do not display duplicate messages\n          if (msg < 0) this.messages.push(message);\n          // if messages are not set to persist, then set a timeout to dispose of them\n          if (!this.persistMessageTypes.includes(message.type) && !message.persist) setTimeout(() => this.deleteMessage(message), this.disposeInterval);\n        }\n      });\n    }\n    /**\r\n     * Delete Message\r\n     * @param message Message\r\n     */\n    deleteMessage(message) {\n      const index = this.messages.findIndex(msg => msg.messageId === message.messageId);\n      if (index > -1) this.messages.splice(index, 1);\n    }\n    /**\r\n     * Delete  Single Messages using the keyboard\r\n     */\n    deleteSingleMessage() {\n      const index = this.messages.length - 1;\n      if (this.messages.length == 1) this.messages = [];else this.messages.splice(index, 1);\n    }\n  }\n  MessageComponent.ɵfac = function MessageComponent_Factory(t) {\n    return new (t || MessageComponent)(i0.ɵɵdirectiveInject(i1.MessageService));\n  };\n  MessageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MessageComponent,\n    selectors: [[\"app-messages\"]],\n    hostBindings: function MessageComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keyup\", function MessageComponent_keyup_HostBindingHandler($event) {\n          return ctx.onWindowClick($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      subject: \"subject\",\n      disposeInterval: \"disposeInterval\",\n      persistMessageTypesParam: \"persistMessageTypesParam\"\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[1, \"container\"], [\"id\", \"messageBar\", \"class\", \"alert-messages\", 4, \"ngIf\"], [\"id\", \"messageBar\", 1, \"alert-messages\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"alert\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"btn-close\", 3, \"click\"], [1, \"text-center\"], [\"class\", \"text-muted\", 4, \"ngIf\"], [1, \"text-muted\"]],\n    template: function MessageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, MessageComponent_div_1_Template, 2, 1, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.messages.length);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf],\n    styles: [\".alert-messages[_ngcontent-%COMP%]{position:relative;width:100%;z-index:7000;opacity:.9}.alert[_ngcontent-%COMP%]{position:absolute;width:100%}\"]\n  });\n  return MessageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}