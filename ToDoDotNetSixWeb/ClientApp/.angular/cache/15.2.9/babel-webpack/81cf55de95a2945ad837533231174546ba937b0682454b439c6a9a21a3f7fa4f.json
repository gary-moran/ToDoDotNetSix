{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/authentication.service\";\nexport class UsernameValidator {\n  constructor(authenticationService) {\n    this.authenticationService = authenticationService;\n  }\n  validate(control) {\n    return this.authenticationService.checkIfUsernameExists(control.value).pipe(map(isTaken => isTaken ? {\n      \"usernameValidator-MSG\": \"The input username is not available\"\n    } : null), catchError(() => of(null)));\n  }\n}\nUsernameValidator.ɵfac = function UsernameValidator_Factory(t) {\n  return new (t || UsernameValidator)(i0.ɵɵinject(i1.AuthenticationService));\n};\nUsernameValidator.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsernameValidator,\n  factory: UsernameValidator.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAMA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAIhD,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,qBAA4C;IAA5C,0BAAqB,GAArBA,qBAAqB;EAA2B;EAEpEC,QAAQ,CACNC,OAAwB;IAExB,OAAO,IAAI,CAACF,qBAAqB,CAACG,qBAAqB,CAACD,OAAO,CAACE,KAAK,CAAC,CAACC,IAAI,CACzER,GAAG,CAACS,OAAO,IAAKA,OAAO,GAAG;MAAE,uBAAuB,EAAE;IAAqC,CAAE,GAAG,IAAK,CAAC,EACrGV,UAAU,CAAC,MAAMD,EAAE,CAAC,IAAI,CAAC,CAAC,CAC3B;EACH;;AAXWG,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAS,SAAjBT,iBAAiB;EAAAU,YADJ;AAAM","names":["of","catchError","map","UsernameValidator","constructor","authenticationService","validate","control","checkIfUsernameExists","value","pipe","isTaken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\validators\\username.validator.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  AsyncValidator,\r\n  ValidationErrors,\r\n} from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UsernameValidator implements AsyncValidator {\r\n\r\n  constructor(private authenticationService: AuthenticationService) { }\r\n\r\n  validate(\r\n    control: AbstractControl\r\n  ): Observable<ValidationErrors | null> {\r\n    return this.authenticationService.checkIfUsernameExists(control.value).pipe(\r\n      map(isTaken => (isTaken ? { \"usernameValidator-MSG\": \"The input username is not available\" } : null)),\r\n      catchError(() => of(null))\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}