{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { catchError, of } from 'rxjs';\nimport { Message } from '../../shared/models/message';\nimport { MessageType } from '../../shared/models/message-type.enum';\nimport { Todo } from '../../shared/models/todo';\nimport { ModalReturn, ModalType } from '../../shared/components/modal-dialog/modal-dialog.component';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../shared/services/view-model-data.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../shared/services/message.service\";\nimport * as i4 from \"../../shared/services/modal-dialog.service\";\nimport * as i5 from \"../../shared/services/authentication.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"../../shared/components/element-validation-message/element-validation-message.component\";\nfunction TodoComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"p\")(2, \"em\");\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"table-active\": a0\n  };\n};\nfunction TodoComponent_div_5_table_2_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 14);\n    i0.ɵɵlistener(\"click\", function TodoComponent_div_5_table_2_tr_12_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const todo_r6 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r8.onSelect(todo_r6));\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"div\", 15);\n    i0.ɵɵelement(9, \"input\", 16);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const todo_r6 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, ctx_r5.state === ctx_r5.stateType.Edit && todo_r6.id == ctx_r5.currentId));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r6.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r6.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r6.description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"checked\", todo_r6.isComplete);\n  }\n}\nfunction TodoComponent_div_5_table_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 11)(1, \"thead\", 12)(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Completed\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, TodoComponent_div_5_table_2_tr_12_Template, 10, 7, \"tr\", 13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const todos_r3 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngForOf\", todos_r3);\n  }\n}\nfunction TodoComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 9);\n    i0.ɵɵtemplate(2, TodoComponent_div_5_table_2_Template, 13, 1, \"table\", 10);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const todos_r3 = ctx.ngIf;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", todos_r3);\n  }\n}\nfunction TodoComponent_form_12_element_validation_message_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 35);\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r11.todoForm.get(\"name\"));\n  }\n}\nfunction TodoComponent_form_12_element_validation_message_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 35);\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r12.todoForm.get(\"description\"));\n  }\n}\nfunction TodoComponent_form_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 17);\n    i0.ɵɵlistener(\"ngSubmit\", function TodoComponent_form_12_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onSave());\n    });\n    i0.ɵɵelementStart(1, \"div\", 18)(2, \"div\", 19);\n    i0.ɵɵelement(3, \"input\", 20);\n    i0.ɵɵelementStart(4, \"label\", 21);\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 22);\n    i0.ɵɵelement(7, \"input\", 23);\n    i0.ɵɵtemplate(8, TodoComponent_form_12_element_validation_message_8_Template, 1, 1, \"element-validation-message\", 24);\n    i0.ɵɵelementStart(9, \"label\", 25);\n    i0.ɵɵtext(10, \"Name\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"div\", 26);\n    i0.ɵɵelement(12, \"input\", 27);\n    i0.ɵɵtemplate(13, TodoComponent_form_12_element_validation_message_13_Template, 1, 1, \"element-validation-message\", 24);\n    i0.ɵɵelementStart(14, \"label\", 28);\n    i0.ɵɵtext(15, \"Description\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 29);\n    i0.ɵɵelement(17, \"input\", 30);\n    i0.ɵɵelementStart(18, \"label\", 31);\n    i0.ɵɵtext(19, \"Completed\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(20, \"div\", 32)(21, \"button\", 33);\n    i0.ɵɵlistener(\"click\", function TodoComponent_form_12_Template_button_click_21_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.onNew());\n    });\n    i0.ɵɵtext(22, \"New\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"button\", 34);\n    i0.ɵɵtext(24, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"button\", 33);\n    i0.ɵɵlistener(\"click\", function TodoComponent_form_12_Template_button_click_25_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.onDelete());\n    });\n    i0.ɵɵtext(26, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.todoForm);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.elementHasFocus(\"name\") && ctx_r2.isControlInvalid(ctx_r2.todoForm.get(\"name\")));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.elementHasFocus(\"description\") && ctx_r2.isControlInvalid(ctx_r2.todoForm.get(\"description\")));\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.isProcessing);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.isProcessing || !ctx_r2.todoForm.valid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.isProcessing || ctx_r2.state !== ctx_r2.stateType.Edit);\n  }\n}\nvar State;\n(function (State) {\n  State[State[\"New\"] = 0] = \"New\";\n  State[State[\"Edit\"] = 1] = \"Edit\";\n})(State || (State = {}));\nexport class TodoComponent {\n  get currentId() {\n    const id = this.todoForm.get('id')?.value ?? -1;\n    return id;\n  }\n  constructor(viewModelDataService, formBuilder, messageService, modalDialogService, authenticationService) {\n    this.viewModelDataService = viewModelDataService;\n    this.formBuilder = formBuilder;\n    this.messageService = messageService;\n    this.modalDialogService = modalDialogService;\n    this.authenticationService = authenticationService;\n    this.elementHasFocus = ElementFocus.elementHasFocus;\n    this.isControlInvalid = ControlValidation.isInvalid;\n    this.username = null;\n    this.isProcessing = false;\n    this.todo = new Todo();\n    this.state = State.New;\n    this.stateType = State;\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.username = yield _this.authenticationService.getUsername();\n      _this.refreshList();\n      _this.initForm();\n    })();\n  }\n  /**\r\n   * Initialise Form\r\n   */\n  initForm() {\n    this.todoForm = this.formBuilder.group({\n      id: null,\n      name: ['', {\n        validators: [Validators.required],\n        updateOn: 'blur'\n      }],\n      description: ['', {\n        validators: [Validators.required],\n        updateOn: 'blur'\n      }],\n      username: th,\n      isComplete: null,\n      updated: null\n    });\n  }\n  /**\r\n   * Refresh List\r\n   * @param checkUsername\r\n   */\n  refreshList() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.username !== null) _this2.todos$ = _this2.viewModelDataService.actionViewModel({\n        \"value\": _this2.username\n      }, \"todo\", \"search\").pipe(catchError(error => of(_this2.messageService.sendErrorMessage({\n        \"message\": error\n      }))));\n    })();\n  }\n  /**\r\n   * Update Form\r\n   * @param todo\r\n   */\n  updateForm(todo) {\n    this.todoForm.patchValue(todo);\n    this.todoForm.markAsPristine();\n    this.todoForm.markAsUntouched();\n  }\n  /**\r\n   * Refresh Page\r\n   * @param todo\r\n   * @param setNew\r\n   */\n  refresh(todo, setNew = false) {\n    this.refreshList();\n    this.updateForm(todo);\n    if (setNew) this.state = State.New;else this.state = State.Edit;\n  }\n  /**\r\n   * On Select\r\n   * @param todo\r\n   */\n  onSelect(todo) {\n    this.updateForm(todo);\n    this.state = State.Edit;\n  }\n  /**\r\n   * On New\r\n   */\n  onNew() {\n    this.isProcessing = true;\n    this.updateForm(new Todo());\n    this.state = State.New;\n    ElementFocus.setFocusOnElement(\"name\");\n    this.isProcessing = false;\n  }\n  /**\r\n   * On Save\r\n   */\n  onSave() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.isProcessing = true;\n      if ((yield _this3.modalDialogService.callModalDialog(ModalType.Save)) == ModalReturn.Save) {\n        const todo = new Todo(_this3.todoForm.value);\n        let response;\n        const saveMessage = _this3.state === State.New ? \"Record Created\" : \"Record Updated\";\n        if (_this3.state === State.New) {\n          yield _this3.viewModelDataService.addViewModel(todo, \"todo\").toPromise().then(r => {\n            if (r) response = r;\n          }).catch(error => _this3.messageService.sendErrorMessage(error));\n        } else if (_this3.state === State.Edit && todo.id !== undefined) {\n          yield _this3.viewModelDataService.updateViewModel(todo, \"todo\", todo.id).toPromise().then(r => {\n            if (r) response = r;\n          }).catch(error => _this3.messageService.sendErrorMessage(error));\n        }\n        if (response) {\n          _this3.refresh(response);\n          _this3.messageService.sendMessage(new Message(\"nav-menu\", saveMessage, MessageType.Dark));\n        }\n      }\n      _this3.isProcessing = false;\n    })();\n  }\n  /**\r\n   * On Delete\r\n   */\n  onDelete() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.isProcessing = true;\n      if ((yield _this4.modalDialogService.callModalDialog(ModalType.Delete)) == ModalReturn.Delete) {\n        let response = false;\n        yield _this4.viewModelDataService.deleteViewModel(\"todo\", _this4.todoForm.value.id).toPromise().then(r => {\n          if (r) response = r;\n        }).catch(error => _this4.messageService.sendErrorMessage(error));\n        if (response) {\n          _this4.refresh(new Todo(), true);\n          _this4.messageService.sendMessage(new Message(\"nav-menu\", \"Record Deleted\", MessageType.Dark));\n        }\n      }\n      _this4.isProcessing = false;\n    })();\n  }\n}\nTodoComponent.ɵfac = function TodoComponent_Factory(t) {\n  return new (t || TodoComponent)(i0.ɵɵdirectiveInject(i1.ViewModelDataService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i4.ModalDialogService), i0.ɵɵdirectiveInject(i5.AuthenticationService));\n};\nTodoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TodoComponent,\n  selectors: [[\"app-todo\"]],\n  decls: 13,\n  vars: 5,\n  consts: [[\"role\", \"main\", 1, \"container\"], [1, \"row\"], [\"id\", \"tableLabel\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"table-responsive\"], [\"class\", \"table table-hover table-bordered\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-hover\", \"table-bordered\"], [1, \"table-dark\"], [3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\", \"click\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"disabled\", \"\", 1, \"form-check-input\", 3, \"checked\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"g-2\"], [1, \"form-floating\", \"col-md-4\"], [\"id\", \"id\", \"type\", \"text\", \"formControlName\", \"id\", \"readonly\", \"\", \"placeholder\", \"id\", 1, \"form-control\"], [\"for\", \"id\", 1, \"form-label\"], [1, \"mb-2\", \"form-floating\", \"col-md-8\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"name\", \"maxLength\", \"20\", 1, \"form-control\"], [3, \"model\", 4, \"ngIf\"], [\"for\", \"name\", 1, \"form-label\"], [1, \"mb-2\", \"form-floating\"], [\"id\", \"description\", \"type\", \"text\", \"formControlName\", \"description\", \"placeholder\", \"description\", \"maxLength\", \"100\", 1, \"form-control\"], [\"for\", \"description\", 1, \"form-label\"], [1, \"form-check\", \"form-switch\", \"mb-2\"], [\"id\", \"is-complete\", \"type\", \"checkbox\", \"formControlName\", \"isComplete\", 1, \"form-check-input\"], [\"for\", \"is-complete\", 1, \"form-check-label\"], [1, \"gap-2\", \"d-flex\", \"justify-content-end\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\"], [3, \"model\"]],\n  template: function TodoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"main\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n      i0.ɵɵtext(3, \"To-do List\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(4, TodoComponent_div_4_Template, 4, 0, \"div\", 3);\n      i0.ɵɵtemplate(5, TodoComponent_div_5_Template, 3, 1, \"div\", 3);\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵelementStart(7, \"div\", 4)(8, \"div\", 5)(9, \"h5\", 6);\n      i0.ɵɵtext(10, \"To-do Item\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"div\", 7);\n      i0.ɵɵtemplate(12, TodoComponent_form_12_Template, 27, 6, \"form\", 8);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !ctx.todos$);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(6, 3, ctx.todos$));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.todoForm);\n    }\n  },\n  dependencies: [i6.NgClass, i6.NgForOf, i6.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i7.ElementValidationMessageComponent, i6.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","catchError","of","Message","MessageType","Todo","ModalReturn","ModalType","ElementFocus","ControlValidation","i0","State","TodoComponent","currentId","id","todoForm","get","value","constructor","viewModelDataService","formBuilder","messageService","modalDialogService","authenticationService","elementHasFocus","isInvalid","New","ngOnInit","username","getUsername","refreshList","initForm","group","name","validators","required","updateOn","description","th","isComplete","updated","todos$","actionViewModel","pipe","error","sendErrorMessage","updateForm","todo","patchValue","markAsPristine","markAsUntouched","refresh","setNew","state","Edit","onSelect","onNew","isProcessing","setFocusOnElement","onSave","callModalDialog","Save","response","saveMessage","addViewModel","toPromise","then","r","catch","undefined","updateViewModel","sendMessage","Dark","onDelete","Delete","deleteViewModel","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\todo\\todo.component.ts","C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\todo\\todo.component.html"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Todo\r\n*  Date:      25 JUL 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Todo Component\r\n*  Notes:     \r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  25 JUL 2023 GM          Created\r\n************************************************************************/\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { catchError, Observable, of } from 'rxjs';\r\nimport { Message } from '../../shared/models/message';\r\nimport { MessageType } from '../../shared/models/message-type.enum';\r\nimport { Todo } from '../../shared/models/todo';\r\nimport { MessageService } from '../../shared/services/message.service';\r\nimport { ViewModelDataService } from '../../shared/services/view-model-data.service';\r\nimport { ModalDialogService } from '../../shared/services/modal-dialog.service';\r\nimport { ModalReturn, ModalType } from '../../shared/components/modal-dialog/modal-dialog.component';\r\nimport { ElementFocus } from '../../shared/utilities/element-focus';\r\nimport { ControlValidation } from '../../shared/utilities/control-validation';\r\nimport { AuthenticationService } from '../../shared/services/authentication.service';\r\nimport { Generic } from '../../shared/models/generic';\r\n\r\nenum State {\r\n  New,\r\n  Edit,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-todo',\r\n  templateUrl: './todo.component.html',\r\n})\r\nexport class TodoComponent implements OnInit {\r\n\r\n  elementHasFocus = ElementFocus.elementHasFocus;\r\n  isControlInvalid = ControlValidation.isInvalid;\r\n\r\n  username: string | null = null;\r\n  isProcessing: boolean = false;\r\n  todos$: Observable<void | Todo[]> | undefined;\r\n  todo: Todo = new Todo();\r\n  todoForm!: FormGroup;\r\n  state: State = State.New;\r\n  public stateType: typeof State = State;\r\n\r\n  get currentId() {\r\n    const id: number = this.todoForm.get('id')?.value ?? -1;\r\n    return id;\r\n  }\r\n\r\n  constructor(\r\n    private viewModelDataService: ViewModelDataService, private formBuilder: FormBuilder, private messageService: MessageService, private modalDialogService: ModalDialogService,\r\n    private authenticationService: AuthenticationService, \r\n  ) { }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.username = await this.authenticationService.getUsername();\r\n    this.refreshList();\r\n    this.initForm();\r\n  }\r\n\r\n  /**\r\n   * Initialise Form\r\n   */\r\n  initForm() {\r\n    this.todoForm = this.formBuilder.group({\r\n      id: null,\r\n      name: ['', { validators: [Validators.required], updateOn: 'blur' }],\r\n      description: ['', { validators: [Validators.required], updateOn: 'blur' }],\r\n      username: th\r\n      isComplete: null,\r\n      updated: null,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refresh List\r\n   * @param checkUsername\r\n   */\r\n  async refreshList(): Promise<void> {\r\n    if (this.username !== null)\r\n      this.todos$ = this.viewModelDataService.actionViewModel<Generic, Todo[]>({ \"value\": this.username }, \"todo\", \"search\")\r\n        .pipe(catchError(error => of(this.messageService.sendErrorMessage({ \"message\": error }))));\r\n  }\r\n\r\n  /**\r\n   * Update Form\r\n   * @param todo\r\n   */\r\n  updateForm(todo: Todo): void {\r\n    this.todoForm.patchValue(todo);\r\n    this.todoForm.markAsPristine();\r\n    this.todoForm.markAsUntouched();\r\n  }\r\n\r\n  /**\r\n   * Refresh Page\r\n   * @param todo\r\n   * @param setNew\r\n   */\r\n  refresh(todo: Todo, setNew: boolean = false): void {\r\n    this.refreshList();\r\n    this.updateForm(todo);\r\n    if (setNew)\r\n      this.state = State.New;\r\n    else\r\n      this.state = State.Edit;\r\n  }\r\n\r\n  /**\r\n   * On Select\r\n   * @param todo\r\n   */\r\n  onSelect(todo: Todo): void {\r\n    this.updateForm(todo);\r\n    this.state = State.Edit;\r\n  }\r\n\r\n  /**\r\n   * On New\r\n   */\r\n  onNew(): void {\r\n    this.isProcessing = true;\r\n    this.updateForm(new Todo());\r\n    this.state = State.New;\r\n    ElementFocus.setFocusOnElement(\"name\");\r\n    this.isProcessing = false;\r\n  }\r\n\r\n  /**\r\n   * On Save\r\n   */\r\n  async onSave(): Promise<void> {\r\n\r\n    this.isProcessing = true;\r\n\r\n    if (await this.modalDialogService.callModalDialog(ModalType.Save) == ModalReturn.Save) {\r\n\r\n      const todo: Todo = new Todo(this.todoForm.value)\r\n      let response: Todo | undefined;\r\n\r\n      const saveMessage: string = this.state === State.New ? \"Record Created\" : \"Record Updated\";\r\n\r\n      if (this.state === State.New) {\r\n        await this.viewModelDataService.addViewModel<Todo>(todo, \"todo\").toPromise()\r\n          .then(r => { if (r) response = r })\r\n          .catch(error => this.messageService.sendErrorMessage(error));\r\n      }\r\n      else if (this.state === State.Edit && todo.id !== undefined) {\r\n        await this.viewModelDataService.updateViewModel<Todo>(todo, \"todo\", todo.id).toPromise()\r\n          .then(r => { if (r) response = r })\r\n          .catch(error => this.messageService.sendErrorMessage(error));\r\n      }\r\n\r\n      if (response) {\r\n        this.refresh(response);\r\n        this.messageService.sendMessage(new Message(\"nav-menu\", saveMessage, MessageType.Dark));\r\n      }\r\n\r\n    }\r\n\r\n    this.isProcessing = false;\r\n\r\n  }\r\n\r\n  /**\r\n   * On Delete\r\n   */\r\n  async onDelete(): Promise<void> {\r\n\r\n    this.isProcessing = true;\r\n\r\n    if (await this.modalDialogService.callModalDialog(ModalType.Delete) == ModalReturn.Delete) {\r\n\r\n      let response: boolean = false;\r\n\r\n      await this.viewModelDataService.deleteViewModel(\"todo\", this.todoForm.value.id).toPromise()\r\n        .then(r => { if (r) response = r })\r\n        .catch(error => this.messageService.sendErrorMessage(error));\r\n      if (response) {\r\n        this.refresh(new Todo(), true);\r\n        this.messageService.sendMessage(new Message(\"nav-menu\", \"Record Deleted\", MessageType.Dark));\r\n      }\r\n\r\n    }\r\n\r\n    this.isProcessing = false;\r\n\r\n  }\r\n\r\n}\r\n","<main class=\"container\" role=\"main\">\n\n  <div class=\"row\">\n    <h1 id=\"tableLabel\">To-do List</h1>\n  </div>\n\n  <div *ngIf=\"!todos$\" class=\"row\">\n    <p><em>Loading...</em></p>\n  </div>\n\n  <div class=\"row\" *ngIf=\"todos$ | async as todos\">\n    <div class=\"table-responsive\">\n      <table class='table table-hover table-bordered' aria-labelledby=\"tableLabel\" *ngIf=\"todos\">\n        <thead class=\"table-dark\">\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Description</th>\n            <th>Completed</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let todo of todos;let i = index\" [ngClass]=\"{'table-active': state === stateType.Edit && todo.id == currentId}\" (click)=\"onSelect(todo)\">\n            <td>{{ todo.id }}</td>\n            <td>{{ todo.name }}</td>\n            <td>{{ todo.description }}</td>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input class=\"form-check-input\" type=\"checkbox\" [checked]=\"todo.isComplete\" disabled />\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <div class=\"card\">\n\n    <div class=\"card-header\">\n      <h5 class=\"card-title\">To-do Item</h5>\n    </div>\n\n    <div class=\"card-body\">\n\n      <form novalidate (ngSubmit)=\"onSave()\" [formGroup]=\"todoForm\" *ngIf=\"todoForm\">\n\n        <div class=\"row g-2\">\n\n          <div class=\"form-floating col-md-4\">\n            <input class=\"form-control\" id=\"id\" type=\"text\" formControlName=\"id\" readonly placeholder=\"id\" />\n            <label class=\"form-label\" for=\"id\">ID</label>\n          </div>\n\n          <div class=\"mb-2 form-floating col-md-8\">\n            <input class=\"form-control\" id=\"name\" type=\"text\" formControlName=\"name\" placeholder=\"name\" maxLength=\"20\" />\n            <element-validation-message [model]=\"todoForm.get('name')\" *ngIf=\"!elementHasFocus('name') && isControlInvalid(todoForm.get('name'))\"></element-validation-message>\n            <label class=\"form-label\" for=\"name\">Name</label>\n          </div>\n\n        </div>\n\n        <div class=\"mb-2 form-floating\">\n          <input class=\"form-control\" id=\"description\" type=\"text\" formControlName=\"description\" placeholder=\"description\" maxLength=\"100\" />\n          <element-validation-message [model]=\"todoForm.get('description')\" *ngIf=\"!elementHasFocus('description') && isControlInvalid(todoForm.get('description'))\"></element-validation-message>\n          <label class=\"form-label\" for=\"description\">Description</label>\n        </div>\n\n        <div class=\"form-check form-switch mb-2\">\n          <input class=\"form-check-input\" id=\"is-complete\" type=\"checkbox\" formControlName=\"isComplete\" />\n          <label class=\"form-check-label\" for=\"is-complete\">Completed</label>\n        </div>\n\n        <div class=\"gap-2 d-flex justify-content-end\">\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onNew()\" [disabled]=\"isProcessing\">New</button>\n          <button type=\"submit\" class=\"btn btn-secondary\" [disabled]=\"isProcessing || !this.todoForm.valid\">Save</button>\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onDelete()\" [disabled]=\"isProcessing || state !== stateType.Edit\">Delete</button>\n        </div>\n\n      </form>\n    </div>\n  </div>\n\n</main>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}