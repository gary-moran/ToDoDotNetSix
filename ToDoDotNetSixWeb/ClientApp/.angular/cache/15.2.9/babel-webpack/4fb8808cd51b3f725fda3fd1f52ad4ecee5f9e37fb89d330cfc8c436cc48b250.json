{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../shared/services/view-model-data.service\";\nimport * as i2 from \"../../shared/services/whitelist.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../shared/services/message.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../shared/components/element-validation-message/element-validation-message.component\";\nimport * as i7 from \"../../shared/directives/whitelist\";\nfunction LoginComponent_element_validation_message_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 16);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"model\", ctx_r0.loginForm.get(\"username\"));\n  }\n}\nfunction LoginComponent_element_validation_message_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 16);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"model\", ctx_r1.loginForm.get(\"password\"));\n  }\n}\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(viewModelDataService, whitelistService, formBuilder, messageService) {\n      this.viewModelDataService = viewModelDataService;\n      this.whitelistService = whitelistService;\n      this.formBuilder = formBuilder;\n      this.messageService = messageService;\n      this.elementHasFocus = ElementFocus.elementHasFocus;\n      this.isControlInvalid = ControlValidation.isInvalid;\n      this.isProcessing = false;\n    }\n    ngOnInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.usernameWhitelist = yield _this.whitelistService.getWhitelist(\"USERNAME\");\n        _this.passwordWhitelist = yield _this.whitelistService.getWhitelist(\"PASSWORD\");\n        _this.initForm();\n      })();\n    }\n    /**\r\n     * Initialise Form\r\n     */\n    initForm() {\n      this.loginForm = this.formBuilder.group({\n        username: ['', {\n          validators: [Validators.required],\n          updateOn: 'blur'\n        }],\n        password: ['', {\n          validators: [Validators.required],\n          updateOn: 'blur'\n        }]\n      });\n    }\n    onLogin() {}\n    onCancel() {}\n  }\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.ViewModelDataService), i0.ɵɵdirectiveInject(i2.WhitelistService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.MessageService));\n  };\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 23,\n    vars: 7,\n    consts: [[\"role\", \"main\", 1, \"container\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"g-2\"], [1, \"mb-2\", \"form-floating\", \"col-md-6\"], [\"id\", \"username\", \"type\", \"text\", \"formControlName\", \"username\", \"placeholder\", \"username\", \"maxLength\", \"40\", 1, \"form-control\", 3, \"whitelist\"], [3, \"model\", 4, \"ngIf\"], [\"for\", \"name\", 1, \"form-label\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"password\", \"maxLength\", \"40\", 1, \"form-control\", 3, \"whitelist\"], [\"for\", \"password\", 1, \"form-label\"], [1, \"gap-2\", \"d-flex\", \"justify-content-end\"], [\"type\", \"submit\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [3, \"model\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"main\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h5\", 3);\n        i0.ɵɵtext(4, \"Login\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"form\", 5);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.onLogin();\n        });\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"div\", 7);\n        i0.ɵɵelement(9, \"input\", 8);\n        i0.ɵɵtemplate(10, LoginComponent_element_validation_message_10_Template, 1, 1, \"element-validation-message\", 9);\n        i0.ɵɵelementStart(11, \"label\", 10);\n        i0.ɵɵtext(12, \"Name\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 7);\n        i0.ɵɵelement(14, \"input\", 11);\n        i0.ɵɵtemplate(15, LoginComponent_element_validation_message_15_Template, 1, 1, \"element-validation-message\", 9);\n        i0.ɵɵelementStart(16, \"label\", 12);\n        i0.ɵɵtext(17, \"Password\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(18, \"div\", 13)(19, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_19_listener() {\n          return ctx.onLogin();\n        });\n        i0.ɵɵtext(20, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_21_listener() {\n          return ctx.onCancel();\n        });\n        i0.ɵɵtext(22, \"Cancel\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"whitelist\", ctx.usernameWhitelist);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.elementHasFocus(\"username\") && ctx.isControlInvalid(ctx.loginForm.get(\"username\")));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"whitelist\", ctx.passwordWhitelist);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.elementHasFocus(\"password\") && ctx.isControlInvalid(ctx.loginForm.get(\"password\")));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.isProcessing || !ctx.loginForm.valid);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.isProcessing);\n      }\n    },\n    dependencies: [i5.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i6.ElementValidationMessageComponent, i7.WhitelistValidatorDirective]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}