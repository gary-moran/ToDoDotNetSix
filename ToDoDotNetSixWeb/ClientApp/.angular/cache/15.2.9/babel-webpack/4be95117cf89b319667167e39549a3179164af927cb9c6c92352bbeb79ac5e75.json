{"ast":null,"code":"/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Validators\r\n*  Date:      09 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Text Validators\r\n*  Notes:\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description\r\n*  ----------- ----------  ---------------------------------------------\r\n*  09 AUG 2023 GM          Created\r\n************************************************************************/\nexport class TextValidators {\n  /**\r\n  * Minimum Length Validator\r\n  * @param length\r\n  */\n  static minLengthValidator(length) {\n    return control => TextValidators.minLengthValidatorFn(control, length);\n  }\n  /**\r\n  * Minimum Length Validator Function\r\n  * @param control Control\r\n  * @param length\r\n  */\n  static minLengthValidatorFn(control, length) {\n    let errors = null;\n    // Validate input    \n    if (control.value !== null) {\n      if (control.value !== undefined) {\n        if (control.value != \"\") {\n          if (!this.validateMinLength(control.value.toString(), length)) {\n            errors = {\n              \"minLengthValidator-MSG\": `A minimum of ${length} characters is required`\n            };\n          }\n        }\n      }\n    }\n    return errors;\n  }\n  /**\r\n   * Validate Minimum Length\r\n   * @param value\r\n   * @param length\r\n   */\n  static validateMinLength(value, length) {\n    return value.length >= length;\n  }\n  /**\r\n  * Match Validator\r\n  * @param inputName\r\n  * @param matchInputName\r\n  * @param isPassword\r\n  */\n  static matchValidator(inputName, matchInputName, isPassword = false) {\n    return control => TextValidators.matchValidatorFn(control, inputName, matchInputName, isPassword);\n  }\n  /**\r\n  * Match Validator Function\r\n  * @param control Control\r\n  * @param inputName\r\n  * @param matchInputName\r\n  * @param isPassword\r\n  */\n  static matchValidatorFn(control, inputName, matchInputName, isPassword = false) {\n    let errors = null;\n    const errorMessage = isPassword ? \"Passwords do not match\" : \"Values do not match\";\n    const inputControl = control?.get(inputName) ?? undefined;\n    const matchControl = control?.get(matchInputName) ?? undefined;\n    // Validate input    \n    if (inputControl && matchControl) {\n      if (inputControl.value != \"\" && matchControl.value != \"\") {\n        if (!this.validateMatch(inputControl.value.toString(), matchControl.value.toString())) {\n          errors = {\n            \"matchValidator-MSG\": errorMessage\n          };\n        }\n      }\n    }\n    return errors;\n  }\n  /**\r\n   * Validate Matching Values\r\n   * @param value\r\n   * @param match\r\n   */\n  static validateMatch(value, match) {\n    return value === match;\n  }\n  /**\r\n  * Email Validator\r\n  */\n  static emailValidator() {\n    return control => TextValidators.emailValidatorFn(control);\n  }\n  /**\r\n  * Email Validator Function\r\n  * @param control\r\n  */\n  static emailValidatorFn(control) {\n    let errors = null;\n    // Validate input    \n    if (control.value !== null) {\n      if (control.value !== undefined) {\n        if (control.value != \"\") {\n          if (!this.validateEmail(control.value)) {\n            errors = {\n              \"emailValidator-MSG\": \"INVALID_EMAIL\"\n            };\n          }\n        }\n      }\n    }\n    return errors;\n  }\n  /**\r\n   * Validate Email\r\n   * @param email\r\n   */\n  static validateEmail(email) {\n    /*\r\n     * for discussions on email regex expressions see: https://www.regular-expressions.info/email.html\r\n     */\n    const regex = /^[A-Z0-9][A-Z0-9._%+-]{0,63}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/igm;\n    if (email.match(regex)) return true;else return false;\n  }\n  /**\r\n  * Whitelist Validator\r\n  * @param whitelist\r\n  */\n  static whitelistValidator(whitelist) {\n    return control => TextValidators.whitelistValidatorFn(control, whitelist);\n  }\n  /**\r\n  * Whitelist Validator Function\r\n  * @param control\r\n  * @param whitelist\r\n  */\n  static whitelistValidatorFn(control, whitelist) {\n    let errors = null;\n    // Validate input    \n    if (control.value !== null) {\n      if (control.value !== undefined) {\n        if (control.value != \"\") {\n          if (!this.validateWhitelist(control.value.toString(), whitelist)) {\n            errors = {\n              \"whitelistValidator-MSG\": whitelist.error\n            };\n          }\n        }\n      }\n    }\n    return errors;\n  }\n  /**\r\n   * Validate Whitelist\r\n   * @param value\r\n   * @param whitelist\r\n   */\n  static validateWhitelist(value, whitelist) {\n    const regex = new RegExp(whitelist.pattern);\n    if (value.match(regex)) return true;else return false;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}