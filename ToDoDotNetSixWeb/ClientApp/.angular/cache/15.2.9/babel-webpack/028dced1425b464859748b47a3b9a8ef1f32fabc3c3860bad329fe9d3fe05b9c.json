{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { throwError } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { LogConsole, LogLocalStorage, LogWebApi } from './log-publishers';\nimport { isNullOrUndefined } from 'is-what';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../app-config.service\";\n//import { Log } from 'oidc-client';\n/**\r\n * Log Publisher Config Definition Class.\r\n */\nclass LogPublisherConfig {\n  constructor(logPublisherParams) {\n    if (logPublisherParams.length == 3) {\n      this.loggerName = logPublisherParams[0];\n      this.loggerLocation = logPublisherParams[1];\n      this.isActive = /true/i.test(logPublisherParams[2].toLowerCase());\n    }\n  }\n}\nexport class LogPublishersService {\n  constructor(http, appConfig) {\n    this.http = http;\n    this.appConfig = appConfig;\n    // Public properties\n    this.publishers = [];\n    this.logPublisherConfigs = [];\n    this.OnInit();\n  }\n  OnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.convertConfigToLogPublisherConfigs();\n      _this.buildPublishers();\n    })();\n  }\n  /**\r\n   * Convert Config to Log Publisher Configs.\r\n   */\n  convertConfigToLogPublisherConfigs() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let logPublisherConfigStrings = [];\n      let config;\n      // get config\n      yield _this2.appConfig.AppConfig.pipe(first()).toPromise().then(cfg => config = cfg);\n      // convert config log publishers settings into an array of strings\n      for (let i = 1; i < 10; i++) {\n        let evalConfigString = `config.logPublishers${i}`;\n        let configString = eval(evalConfigString);\n        if (!isNullOrUndefined(configString)) logPublisherConfigStrings.push(configString);\n      }\n      // convert log publishers array of strings into an array of log publisher configs\n      for (let logPublisherConfigString of logPublisherConfigStrings) {\n        let logPublisherParams = logPublisherConfigString.split(',');\n        if (logPublisherParams.length == 3) {\n          _this2.logPublisherConfigs.push(new LogPublisherConfig(logPublisherParams));\n        }\n      }\n    })();\n  }\n  /**\r\n   * Build publishers array.\r\n   */\n  buildPublishers() {\n    let logPublisher = new LogConsole();\n    let _publishers;\n    for (let logPublisherConfig of this.logPublisherConfigs.filter(cfg => cfg.isActive)) {\n      switch (logPublisherConfig?.loggerName?.toLowerCase() ?? \"\") {\n        case 'console':\n          break;\n        case 'localstorage':\n          logPublisher = new LogLocalStorage();\n          break;\n        case 'webapi':\n          logPublisher = new LogWebApi(this.http, this.appConfig);\n          break;\n      }\n      // Set location of logging\n      logPublisher.location = logPublisherConfig?.loggerLocation ?? \"\";\n      // Add publisher to array\n      this.publishers.push(logPublisher);\n    }\n  }\n  // Private methods\n  /**\r\n   * Handle Errors.\r\n   * @param error Error\r\n   */\n  handleErrors(error) {\n    let errors = [];\n    let msg = '';\n    msg = 'Status: ' + error.status;\n    msg += ' - Status Text: ' + error.statusText;\n    if (!isNullOrUndefined(error.message)) {\n      msg += ' - Exception Message: ' + error.message;\n    }\n    errors.push(msg);\n    console.error('An error occurred', errors);\n    return throwError(errors);\n  }\n}\nLogPublishersService.ɵfac = function LogPublishersService_Factory(t) {\n  return new (t || LogPublishersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppConfigService));\n};\nLogPublishersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LogPublishersService,\n  factory: LogPublishersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","first","LogConsole","LogLocalStorage","LogWebApi","isNullOrUndefined","LogPublisherConfig","constructor","logPublisherParams","length","loggerName","loggerLocation","isActive","test","toLowerCase","LogPublishersService","http","appConfig","OnInit","convertConfigToLogPublisherConfigs","buildPublishers","logPublisherConfigStrings","config","AppConfig","pipe","toPromise","then","cfg","i","evalConfigString","configString","eval","push","logPublisherConfigString","split","logPublisherConfigs","logPublisher","_publishers","logPublisherConfig","filter","location","publishers","handleErrors","error","errors","msg","status","statusText","message","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\services\\log-service\\log-publishers.service.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      02 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Log Service\r\n*  Notes:     from this original source:\r\n*   https://www.codemag.com/Article/1711021/Logging-in-Angular-Applications\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  02 AUG 2023 GM          Created\r\n************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable prefer-const */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\nimport { LogPublisher, LogConsole, LogLocalStorage, LogWebApi } from './log-publishers';\r\nimport { AppConfig, AppConfigService } from '../app-config.service';\r\nimport { isNullOrUndefined } from 'is-what';\r\n//import { Log } from 'oidc-client';\r\n\r\n/**\r\n * Log Publisher Config Definition Class.\r\n */\r\nclass LogPublisherConfig {\r\n  loggerName?: string;\r\n  loggerLocation?: string;\r\n  isActive?: boolean;\r\n\r\n  constructor(logPublisherParams: string[]) {\r\n    if (logPublisherParams.length == 3) {\r\n      this.loggerName = logPublisherParams[0];\r\n      this.loggerLocation = logPublisherParams[1];\r\n      this.isActive = (/true/i).test(logPublisherParams[2].toLowerCase());\r\n    }\r\n  }\r\n}\r\n\r\n@Injectable(\r\n  { providedIn: 'root' }\r\n)\r\nexport class LogPublishersService {\r\n\r\n  constructor(private http: HttpClient, private appConfig: AppConfigService) {\r\n    this.OnInit();\r\n  }\r\n\r\n  async OnInit() {\r\n    await this.convertConfigToLogPublisherConfigs();\r\n    this.buildPublishers();\r\n  }\r\n\r\n  // Public properties\r\n  publishers: LogPublisher[] = [];\r\n  logPublisherConfigs: LogPublisherConfig[] = [];\r\n\r\n  /**\r\n   * Convert Config to Log Publisher Configs.\r\n   */\r\n  async convertConfigToLogPublisherConfigs() {\r\n\r\n    let logPublisherConfigStrings: string[] = [];    \r\n    let config: AppConfig;\r\n\r\n    // get config\r\n    await this.appConfig.AppConfig.pipe(first()).toPromise().then(cfg => config = cfg as AppConfig);\r\n\r\n    // convert config log publishers settings into an array of strings\r\n    for (let i: number = 1; i < 10; i++) {\r\n      let evalConfigString: string = `config.logPublishers${i}`;\r\n      let configString: string = eval(evalConfigString);\r\n      if (!isNullOrUndefined(configString))\r\n        logPublisherConfigStrings.push(configString);\r\n    }\r\n\r\n    // convert log publishers array of strings into an array of log publisher configs\r\n    for (let logPublisherConfigString of logPublisherConfigStrings) {\r\n      let logPublisherParams = logPublisherConfigString.split(',');\r\n      if (logPublisherParams.length == 3) {\r\n        this.logPublisherConfigs.push(new LogPublisherConfig(logPublisherParams));\r\n      }\r\n    }\r\n\r\n  } \r\n\r\n  /**\r\n   * Build publishers array.\r\n   */\r\n  buildPublishers(): void {\r\n    let logPublisher: LogPublisher = new LogConsole();\r\n    let _publishers: LogPublisherConfig[];\r\n\r\n    for (let logPublisherConfig of this.logPublisherConfigs.filter(cfg => cfg.isActive)) {\r\n      switch (logPublisherConfig?.loggerName?.toLowerCase() ?? \"\") {\r\n        case 'console':\r\n          break;\r\n        case 'localstorage':\r\n          logPublisher = new LogLocalStorage();\r\n          break;\r\n        case 'webapi':\r\n          logPublisher = new LogWebApi(this.http, this.appConfig);\r\n          break;\r\n      }\r\n      // Set location of logging\r\n      logPublisher.location = logPublisherConfig?.loggerLocation ?? \"\";\r\n      // Add publisher to array\r\n      this.publishers.push(logPublisher);\r\n    }\r\n  }\r\n\r\n  // Private methods\r\n\r\n  /**\r\n   * Handle Errors.\r\n   * @param error Error\r\n   */\r\n  private handleErrors(error: any): Observable<any> {\r\n    let errors: string[] = [];\r\n    let msg: string = '';\r\n\r\n    msg = 'Status: ' + error.status;\r\n    msg += ' - Status Text: ' + error.statusText;\r\n    if (!isNullOrUndefined(error.message)) {\r\n      msg += ' - Exception Message: ' + error.message;\r\n    }\r\n    errors.push(msg);\r\n\r\n    console.error('An error occurred', errors);\r\n\r\n    return throwError(errors);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}