{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Todo\r\n*  Date:      15 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Register\r\n*  Notes:\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description\r\n*  ----------- ----------  ---------------------------------------------\r\n*  15 AUG 2023 GM          Created\r\n************************************************************************/\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { Whitelist } from '../../shared/models/whitelist';\nimport { TextValidators } from '../../shared/validators/text.validator';\nimport { Login } from '../../shared/models/login';\nlet RegisterComponent = class RegisterComponent {\n  constructor(authenticationService, router, formBuilder, whitelistService, messageService) {\n    this.authenticationService = authenticationService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.whitelistService = whitelistService;\n    this.messageService = messageService;\n    this.elementHasFocus = ElementFocus.elementHasFocus;\n    this.isControlInvalid = ControlValidation.isInvalid;\n    this.nameWhitelist = new Whitelist();\n    this.descWhitelist = new Whitelist();\n    this.usernameWhitelist = new Whitelist();\n    this.passwordWhitelist = new Whitelist();\n    this.isProcessing = false;\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.nameWhitelist = yield _this.whitelistService.getWhitelist(\"NAME\");\n      _this.descWhitelist = yield _this.whitelistService.getWhitelist(\"DESC\");\n      _this.usernameWhitelist = yield _this.whitelistService.getWhitelist(\"USERNAME\");\n      _this.passwordWhitelist = yield _this.whitelistService.getWhitelist(\"PASSWORD\");\n      _this.initForm();\n    })();\n  }\n  /**\r\n   * Initialise Form\r\n   */\n  initForm() {\n    this.registerForm = this.formBuilder.group({\n      firstname: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)],\n        updateOn: 'blur'\n      }],\n      lastname: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)],\n        updateOn: 'blur'\n      }],\n      email: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.descWhitelist), TextValidators.minLengthValidator(5), TextValidators.emailValidator()],\n        updateOn: 'blur'\n      }],\n      username: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.usernameWhitelist), TextValidators.minLengthValidator(4)],\n        updateOn: 'blur'\n      }],\n      passwordGroup: this.formBuilder.group({\n        password: ['', {\n          validators: [Validators.required, TextValidators.whitelistValidator(this.passwordWhitelist), TextValidators.minLengthValidator(8)],\n          updateOn: 'blur'\n        }],\n        confirmPassword: ['', {\n          validators: [Validators.required],\n          updateOn: 'blur'\n        }]\n      }, {\n        validator: TextValidators.matchValidator(\"password\", \"confirmPassword\")\n      })\n    });\n  }\n  /**\r\n   * Register\r\n   */\n  onRegister() {}\n  /**\r\n   * Cancel\r\n   */\n  onCancel() {\n    this.isProcessing = true;\n    this.registerForm.patchValue(new Login());\n    this.registerForm.get(\"passwordGroup\")?.patchValue({\n      \"password\": \"\",\n      \"confirmPassword\": \"\"\n    });\n    this.isProcessing = false;\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html'\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","ControlValidation","ElementFocus","Whitelist","TextValidators","Login","RegisterComponent","constructor","authenticationService","router","formBuilder","whitelistService","messageService","elementHasFocus","isInvalid","ngOnInit","nameWhitelist","getWhitelist","descWhitelist","usernameWhitelist","passwordWhitelist","initForm","registerForm","group","firstname","validators","required","whitelistValidator","updateOn","lastname","email","minLengthValidator","emailValidator","username","passwordGroup","password","confirmPassword","validator","matchValidator","onRegister","onCancel","isProcessing","patchValue","get","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\register\\register.component.ts"],"sourcesContent":["/**************************************************************************\n*\n*  System:    ToDo (Web)\n*  Module:    Client App \\ Todo\n*  Date:      15 AUG 2023\n*  Author:    Gary Moran (GM)\n*  Function:  Register\n*  Notes:     \n*\n*                   : History of Amendments :\n*  Date        Name        Brief description                \n*  ----------- ----------  ---------------------------------------------\n*  15 AUG 2023 GM          Created\n************************************************************************/\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MessageService } from '../../shared/services/message.service';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { Whitelist } from '../../shared/models/whitelist';\nimport { WhitelistService } from '../../shared/services/whitelist.service';\nimport { TextValidators } from '../../shared/validators/text.validator';\nimport { AuthenticationService } from '../../shared/services/authentication.service';\nimport { Login } from '../../shared/models/login';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html'\n})\nexport class RegisterComponent implements OnInit {\n\n  elementHasFocus = ElementFocus.elementHasFocus;\n  isControlInvalid = ControlValidation.isInvalid;\n\n  nameWhitelist: Whitelist = new Whitelist();\n  descWhitelist: Whitelist = new Whitelist();\n  usernameWhitelist: Whitelist = new Whitelist();\n  passwordWhitelist: Whitelist = new Whitelist();\n\n  isProcessing: boolean = false;\n  registerForm!: FormGroup;\n\n  constructor(private authenticationService: AuthenticationService, private router: Router, private formBuilder: FormBuilder, private whitelistService: WhitelistService, private messageService: MessageService,) { }\n\n  async ngOnInit(): Promise<void> {\n    this.nameWhitelist = await this.whitelistService.getWhitelist(\"NAME\");\n    this.descWhitelist = await this.whitelistService.getWhitelist(\"DESC\");\n    this.usernameWhitelist = await this.whitelistService.getWhitelist(\"USERNAME\");\n    this.passwordWhitelist = await this.whitelistService.getWhitelist(\"PASSWORD\");\n    this.initForm();\n  }\n\n  /**\n   * Initialise Form\n   */\n  initForm() {\n    this.registerForm = this.formBuilder.group({\n      firstname: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)], updateOn: 'blur' }],\n      lastname: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)], updateOn: 'blur' }],\n      email: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.descWhitelist), TextValidators.minLengthValidator(5), TextValidators.emailValidator()], updateOn: 'blur' }],\n      username: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.usernameWhitelist), TextValidators.minLengthValidator(4)], updateOn: 'blur' }],\n      passwordGroup: this.formBuilder.group({\n        password: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.passwordWhitelist), TextValidators.minLengthValidator(8)], updateOn: 'blur' }],\n        confirmPassword: ['', { validators: [Validators.required], updateOn: 'blur' }],\r\n      }, { validator: TextValidators.matchValidator(\"password\", \"confirmPassword\") }),\n    });\n  }\n\n  /**\n   * Register\n   */\n  onRegister() {\n  }\n\n  /**\n   * Cancel\n   */\n  onCancel() {\n    this.isProcessing = true;\n    this.registerForm.patchValue(new Login());\n    this.registerForm.get(\"passwordGroup\")?.patchValue({\"password\": \"\", \"confirmPassword\": \"\"});\n    this.isProcessing = false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}