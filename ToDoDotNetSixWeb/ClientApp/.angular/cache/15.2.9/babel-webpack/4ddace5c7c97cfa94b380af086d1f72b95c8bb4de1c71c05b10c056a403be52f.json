{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Todo\r\n*  Date:      25 JUL 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Todo Component\r\n*  Notes:\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description\r\n*  ----------- ----------  ---------------------------------------------\r\n*  25 JUL 2023 GM          Created\r\n************************************************************************/\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Message } from '../../shared/models/message';\nimport { MessageType } from '../../shared/models/message-type.enum';\nimport { Todo } from '../../shared/models/todo';\nimport { ModalReturn, ModalType } from '../../shared/components/modal-dialog/modal-dialog.component';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nvar State = /*#__PURE__*/(() => {\n  (function (State) {\n    State[State[\"New\"] = 0] = \"New\";\n    State[State[\"Edit\"] = 1] = \"Edit\";\n  })(State || (State = {}));\n  return State;\n})();\nlet TodoComponent = class TodoComponent {\n  constructor(viewModelDataService, formBuilder, messageService, modalDialogService) {\n    this.viewModelDataService = viewModelDataService;\n    this.formBuilder = formBuilder;\n    this.messageService = messageService;\n    this.modalDialogService = modalDialogService;\n    this.elementHasFocus = ElementFocus.elementHasFocus;\n    this.isControlInvalid = ControlValidation.isInvalid;\n    this.todo = new Todo();\n    this.state = State.New;\n    this.stateType = State;\n  }\n  ngOnInit() {\n    this.refreshList();\n    this.initForm();\n    ElementFocus.elementHasFocus(\"\");\n  }\n  /**\r\n   * Initialise Form\r\n   */\n  initForm() {\n    this.todoForm = this.formBuilder.group({\n      id: null,\n      name: ['', {\n        validators: [Validators.required],\n        updateOn: 'blur'\n      }],\n      description: ['', {\n        validators: [Validators.required],\n        updateOn: 'blur'\n      }],\n      isComplete: null,\n      updated: null\n    });\n  }\n  /**\r\n   * Refresh List\r\n   */\n  refreshList() {\n    this.todos$ = this.viewModelDataService.getViewModelList(\"todo\");\n  }\n  /**\r\n   * Update Form\r\n   * @param todo\r\n   */\n  updateForm(todo) {\n    this.todoForm.patchValue(todo);\n    this.todoForm.markAsPristine();\n    this.todoForm.markAsUntouched();\n  }\n  /**\r\n   * Refresh Page\r\n   * @param todo\r\n   * @param setNew\r\n   */\n  refresh(todo, setNew = false, wasNew = false) {\n    this.refreshList();\n    if (wasNew) {/* empty */}\n    this.updateForm(todo);\n    if (setNew) this.state = State.New;else this.state = State.Edit;\n  }\n  /**\r\n   * On Select\r\n   * @param todo\r\n   */\n  onSelect(todo) {\n    this.updateForm(todo);\n    this.state = State.Edit;\n  }\n  /**\r\n   * On New\r\n   */\n  onNew() {\n    this.updateForm(new Todo());\n    this.state = State.New;\n    ElementFocus.setFocusOnElement(\"name\");\n  }\n  /**\r\n   * On Save\r\n   */\n  onSave() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if ((yield _this.modalDialogService.callModalDialog(ModalType.Save)) == ModalReturn.Save) {\n        const todo = new Todo(_this.todoForm.value);\n        let response;\n        const saveMessage = _this.state === State.New ? \"Record Created\" : \"Record Updated\";\n        if (_this.state === State.New) {\n          yield _this.viewModelDataService.addViewModel(todo, \"todo\").toPromise().then(r => {\n            if (r) response = r;\n          }).catch(err => _this.messageService.sendErrorMessage(err));\n        } else if (_this.state === State.Edit && todo.id !== undefined) {\n          yield _this.viewModelDataService.updateViewModel(todo, \"todo\", todo.id).toPromise().then(r => {\n            if (r) response = r;\n          }).catch(err => _this.messageService.sendErrorMessage(err));\n        }\n        if (response) {\n          _this.refresh(response);\n          _this.messageService.sendMessage(new Message('nav-menu', saveMessage, MessageType.Success));\n        }\n      }\n    })();\n  }\n  /**\r\n   * On Delete\r\n   */\n  onDelete() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if ((yield _this2.modalDialogService.callModalDialog(ModalType.Delete)) == ModalReturn.Delete) {\n        let response = false;\n        yield _this2.viewModelDataService.deleteViewModel(\"todo\", _this2.todoForm.value.id).toPromise().then(r => {\n          if (r) response = r;\n        }).catch(err => _this2.messageService.sendErrorMessage(err));\n        if (response) {\n          _this2.refresh(new Todo(), true);\n          _this2.messageService.sendMessage(new Message('nav-menu', \"Record Deleted\", MessageType.Success));\n        }\n      }\n    })();\n  }\n  testCode() {\n    this.todoForm.get('name');\n  }\n};\nTodoComponent = __decorate([Component({\n  selector: 'app-todo',\n  templateUrl: './todo.component.html'\n})], TodoComponent);\nexport { TodoComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}