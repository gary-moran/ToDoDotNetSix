{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport { BehaviorSubject, catchError, first, map, shareReplay, Subject, throwError } from 'rxjs';\nimport { Message } from '../models/message';\nimport { MessageType } from '../models/message-type.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app-config.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./message.service\";\nimport * as i4 from \"@angular/router\";\nexport class AuthenticationService {\n  constructor(appConfigService, httpClient, messageService, router) {\n    // authenticate and store token\n    this.appConfigService = appConfigService;\n    this.httpClient = httpClient;\n    this.messageService = messageService;\n    this.router = router;\n    this._authenticated$ = new Subject();\n    this.authenticated$ = this._authenticated$.pipe(shareReplay(1));\n    this._logout$ = new BehaviorSubject(false);\n    this.logout$ = this._logout$.asObservable();\n    this.apiBaseUrl = \"\";\n    this.token = \"\";\n    this.tokenExpiration = new Date();\n    this.refreshPending = false;\n    this.jwtHelper = new JwtHelperService();\n    this.appConfigService.AppConfig.subscribe(config => {\n      if (config) {\n        this.apiBaseUrl = config?.WebApi ?? \"\";\n        const session = this.getSession();\n        if (session != null && !this.authenticated) {\n          if (!this.jwtHelper.isTokenExpired(session.token)) {\n            this.token = session.token;\n            this.tokenExpiration = this.jwtHelper.getTokenExpirationDate(session.token);\n            this.userId = session.user;\n            this.newAuthenticationEvent(true);\n          } else {\n            this.refreshToken().subscribe(() => {});\n          }\n        }\n      }\n    });\n  }\n  /**\r\n  * Check if the current session is Authenticated\r\n  */\n  CheckAuthenticated() {\n    if (!this.isAuthenticated(true)) {\n      this.logOut();\n      this.router.navigate([\"login\"]);\n      this.messageService.sendMessage(new Message(\"nav-menu\", \"The current session has expired.\", MessageType.Info), true);\n      return false;\n    } else return true;\n  }\n  /**\r\n   * Returns whether the user is authenticated\r\n   */\n  isAuthenticated(recheckSession = false) {\n    if (recheckSession) {\n      // Grab the latest version of the current session before checking the Auth Status\n      const session = this.getSession();\n      if (session) {\n        this.token = session.token;\n        this.userId = session.user;\n        return this.userId && this.token && !this.jwtHelper.isTokenExpired(this.token);\n      } else {\n        // No session then log out user\n        return false;\n      }\n    } else {\n      return this.userId && this.token && !this.jwtHelper.isTokenExpired(this.token) && this.authenticated;\n    }\n  }\n  /**\r\n   * Returns the authEvent observable\r\n   */\n  //get authEvent() {\n  //  return this.authenticated$;\n  //}\n  /**\r\n   * Creates a new authentication event\r\n   * @param authenticated\r\n   */\n  newAuthenticationEvent(authenticated) {\n    this.authenticated = authenticated;\n    this._authenticated$.next(authenticated);\n  }\n  /**\r\n   * Attempts to refresh the users authentication token\r\n   */\n  refreshToken() {\n    if (!this.refreshPending) {\n      this.refreshPending = true;\n      const session = this.getSession();\n      if (session) {\n        return this.httpClient.post(`${this.apiBaseUrl}/api/account/refreshtoken`, {\n          refreshToken: session.refreshToken,\n          userId: session.user,\n          token: session.token\n        }).pipe(map(response => {\n          this.token = response.token;\n          this.tokenExpiration = response.expiration;\n          this.setSession(response);\n          this.userId = response.user;\n          this.newAuthenticationEvent(true);\n          this.refreshPending = false;\n          return response;\n        }), catchError(error => {\n          this.removeSession();\n          this.newAuthenticationEvent(false);\n          this.router.navigate([\"login\"]);\n          this.refreshPending = false;\n          return throwError(error);\n        }));\n      } else {\n        throw \"Not Logged In\";\n      }\n    } else {\n      return this._authenticated$.pipe(first());\n    }\n  }\n  /**\r\n   * Logs in a user\r\n   * @param login The users credentials\r\n   */\n  login(login) {\n    return this.httpClient.post(`${this.apiBaseUrl}/api/account/createtoken`, login).pipe(map(response => {\n      const tokenInfo = response;\n      this.token = tokenInfo.token;\n      this.tokenExpiration = tokenInfo.expiration;\n      this.setSession(response);\n      this.userId = tokenInfo.user;\n      this.newAuthenticationEvent(true);\n      return true;\n    }));\n  }\n  /**\r\n   * Logs out the user, also any other tabs too\r\n   */\n  logOut() {\n    this.token = \"\";\n    this.userId = null;\n    this.removeSession();\n    this.newAuthenticationEvent(false);\n    this._logout$.next(true);\n    this.authenticated$ = this._authenticated$.pipe(shareReplay(1));\n  }\n  /**\r\n   * Handler to set the session\r\n   * @param response\r\n   */\n  setSession(response) {\n    localStorage.setItem('session', JSON.stringify(response));\n  }\n  /**\r\n   * Handler to get the session\r\n   */\n  getSession() {\n    const session = localStorage.getItem('session');\n    if (!session) return null;\n    return JSON.parse(session);\n  }\n  /**\r\n   * Handler to remove the session\r\n   */\n  removeSession() {\n    localStorage.removeItem('session');\n  }\n  /**\r\n   * Handler to get the users token\r\n   */\n  getToken() {\n    const session = this.getSession();\n    if (session) return session.token;else return null;\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.MessageService), i0.ɵɵinject(i4.Router));\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["JwtHelperService","BehaviorSubject","catchError","first","map","shareReplay","Subject","throwError","Message","MessageType","AuthenticationService","constructor","appConfigService","httpClient","messageService","router","_authenticated$","pipe","_logout$","asObservable","Date","jwtHelper","AppConfig","subscribe","config","apiBaseUrl","WebApi","session","getSession","authenticated","isTokenExpired","token","tokenExpiration","getTokenExpirationDate","userId","user","newAuthenticationEvent","refreshToken","CheckAuthenticated","isAuthenticated","logOut","navigate","sendMessage","Info","recheckSession","next","refreshPending","post","response","expiration","setSession","error","removeSession","login","tokenInfo","authenticated$","localStorage","setItem","JSON","stringify","getItem","parse","removeItem","getToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\services\\authentication.service.ts"],"sourcesContent":["/**************************************************************************\n*\n*  System:    ToDo (Web)\n*  Module:    Client App \\ Shared \\ Services\n*  Date:      09 AUG 2023\n*  Author:    Gary Moran (GM)\n*  Function:  Authentication Service\n*  Notes:\n*\n*                   : History of Amendments :\n*  Date        Name        Brief description                \n*  ----------- ----------  ---------------------------------------------\n*  10 AUG 2023 GM          Created\n************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { BehaviorSubject, catchError, first, map, Observable, shareReplay, Subject, throwError } from 'rxjs';\r\nimport { Login } from '../models/login';\r\nimport { Message } from '../models/message';\r\nimport { MessageType } from '../models/message-type.enum';\r\nimport { AppConfigService } from './app-config.service';\r\nimport { MessageService } from './message.service';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  private _authenticated$ = new Subject<boolean>();\n  authenticated$ = this._authenticated$.pipe(shareReplay(1));\n\n  private _logout$ = new BehaviorSubject<boolean>(false);\r\n  logout$ = this._logout$.asObservable();\n\n  private apiBaseUrl: string = \"\";\n  private token: string = \"\";\n  private tokenExpiration: Date = new Date();\n  private userId: string;\n  private jwtHelper: JwtHelperService;\n  private authenticated: boolean;\n  private refreshPending: boolean = false;\n\n  constructor(\n    private appConfigService: AppConfigService,\n    private httpClient: HttpClient,\n    private messageService: MessageService,\n    private router: Router\n  ) {\n\n    // authenticate and store token\n\n    this.jwtHelper = new JwtHelperService();\n\n    this.appConfigService.AppConfig.subscribe((config) => {\n      if (config) {\n        this.apiBaseUrl = config?.WebApi ?? \"\";\n        const session = this.getSession();\n        if (session != null && !this.authenticated) {\n          if (!this.jwtHelper.isTokenExpired(session.token)) {\n            this.token = session.token;\n            this.tokenExpiration = this.jwtHelper.getTokenExpirationDate(session.token);\n            this.userId = session.user;\n            this.newAuthenticationEvent(true);\n          } else {\n            this.refreshToken().subscribe(() => { });\n          }\n        }\n      }\n    });\n\n  }\n\n  /**\n  * Check if the current session is Authenticated\n  */\n  CheckAuthenticated(): boolean {\n\n    if (!this.isAuthenticated(true)) {\n      this.logOut();\n      this.router.navigate([\"login\"]);\n      this.messageService.sendMessage(new Message(\"nav-menu\", \"The current session has expired.\", MessageType.Info), true);\n      return false;\n    } else\n      return true;\n\n  }\n\n  /**\n   * Returns whether the user is authenticated\n   */\n  isAuthenticated(recheckSession: boolean = false): boolean {\n\n    if (recheckSession) {\n\n      // Grab the latest version of the current session before checking the Auth Status\n      const session = this.getSession();\n      if (session) {\n        this.token = session.token;\n        this.userId = session.user;\n        return this.userId && this.token && !this.jwtHelper.isTokenExpired(this.token);\n      } else {\n        // No session then log out user\n        return false;\n      }\n\n    } else {\n      return this.userId && this.token && !this.jwtHelper.isTokenExpired(this.token) && this.authenticated;\n    }\n  }\n\n  /**\n   * Returns the authEvent observable\n   */\n  //get authEvent() {\n  //  return this.authenticated$;\n  //}\n\n  /**\n   * Creates a new authentication event\n   * @param authenticated\n   */\n  newAuthenticationEvent(authenticated: boolean) {\n    this.authenticated = authenticated;\n    this._authenticated$.next(authenticated);\n  }\n\n  /**\n   * Attempts to refresh the users authentication token\n   */\n  public refreshToken(): Observable<any> {\n\n    if (!this.refreshPending) {\n\n      this.refreshPending = true;\n      const session = this.getSession();\n\n      if (session) {\n        return this.httpClient.post(`${this.apiBaseUrl}/api/account/refreshtoken`, { refreshToken: session.refreshToken, userId: session.user, token: session.token })\n          .pipe(map((response: any) => {\n\n          this.token = response.token;\n          this.tokenExpiration = response.expiration;\n          this.setSession(response);\n          this.userId = response.user;\n          this.newAuthenticationEvent(true);\n          this.refreshPending = false;\n          return response;\n\n        }), catchError((error: any) => {\n\n          this.removeSession();\n          this.newAuthenticationEvent(false);\n          this.router.navigate([\"login\"]);\n          this.refreshPending = false;\n          return throwError(error);\n\n        }));\n      } else {\n        throw \"Not Logged In\";\n      }\n    } else {\n      return this._authenticated$.pipe(first());\n    }\n  }\n\n  /**\n   * Logs in a user\n   * @param login The users credentials\n   */\n  public login(login: Login) {\n\n    return this.httpClient.post(`${this.apiBaseUrl}/api/account/createtoken`, login)\n      .pipe(\n        map((response: any) => {\n          const tokenInfo = response;\n          this.token = tokenInfo.token;\n          this.tokenExpiration = tokenInfo.expiration;\n          this.setSession(response);\n          this.userId = tokenInfo.user;\n          this.newAuthenticationEvent(true);\n          return true;\n        }));\n  }\n\n  /**\n   * Logs out the user, also any other tabs too\n   */\n  logOut(): void {\n    this.token = \"\";\n    this.userId = null;\n    this.removeSession();\n    this.newAuthenticationEvent(false);\n    this._logout$.next(true);\n    this.authenticated$ = this._authenticated$.pipe(shareReplay(1));\n  }\n\n  /**\n   * Handler to set the session\n   * @param response\n   */\n  public setSession(response: any): void {\n    localStorage.setItem('session', JSON.stringify(response));\n  }\n\n  /**\n   * Handler to get the session\n   */\n  public getSession(): any {\n    const session: any = localStorage.getItem('session');\n\n    if (!session)\n      return null;\n    return JSON.parse(session);\n  }\n\n  /**\n   * Handler to remove the session\n   */\n  private removeSession(): void {\n    localStorage.removeItem('session');\n  }\n\n  /**\n   * Handler to get the users token\n   */\n  public getToken(): any {\n    const session = this.getSession();\n    if (session)\n      return session.token;\n    else\n      return null;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}