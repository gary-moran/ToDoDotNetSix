{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { catchError, of } from 'rxjs';\nimport { Message } from '../../shared/models/message';\nimport { MessageType } from '../../shared/models/message-type.enum';\nimport { Todo } from '../../shared/models/todo';\nimport { ModalReturn, ModalType } from '../../shared/components/modal-dialog/modal-dialog.component';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport { Whitelist } from '../../shared/models/whitelist';\nimport { TextValidators } from '../../shared/validators/text.validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../shared/services/view-model-data.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../shared/services/message.service\";\nimport * as i4 from \"../../shared/services/modal-dialog.service\";\nimport * as i5 from \"../../shared/services/authentication.service\";\nimport * as i6 from \"../../shared/services/whitelist.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"../../shared/components/element-validation-message/element-validation-message.component\";\nfunction TodoComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"p\")(2, \"em\");\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"table-active\": a0\n  };\n};\nfunction TodoComponent_div_5_table_2_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 15);\n    i0.ɵɵlistener(\"click\", function TodoComponent_div_5_table_2_tr_12_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const todo_r6 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r8.onSelect(todo_r6));\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"div\", 16);\n    i0.ɵɵelement(9, \"input\", 17);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const todo_r6 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, ctx_r5.state === ctx_r5.stateType.Edit && todo_r6.id == ctx_r5.currentId));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r6.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r6.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r6.description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"checked\", todo_r6.isComplete);\n  }\n}\nfunction TodoComponent_div_5_table_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 12)(1, \"thead\", 13)(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Completed\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, TodoComponent_div_5_table_2_tr_12_Template, 10, 7, \"tr\", 14);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const todos_r3 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngForOf\", todos_r3);\n  }\n}\nfunction TodoComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 10);\n    i0.ɵɵtemplate(2, TodoComponent_div_5_table_2_Template, 13, 1, \"table\", 11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const todos_r3 = ctx.ngIf;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", todos_r3);\n  }\n}\nfunction TodoComponent_form_14_element_validation_message_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 36);\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r11.todoForm.get(\"name\"));\n  }\n}\nfunction TodoComponent_form_14_element_validation_message_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 36);\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r12.todoForm.get(\"description\"));\n  }\n}\nfunction TodoComponent_form_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 18);\n    i0.ɵɵlistener(\"ngSubmit\", function TodoComponent_form_14_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onSave());\n    });\n    i0.ɵɵelementStart(1, \"div\", 19)(2, \"div\", 20);\n    i0.ɵɵelement(3, \"input\", 21);\n    i0.ɵɵelementStart(4, \"label\", 22);\n    i0.ɵɵtext(5, \"ID\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 23);\n    i0.ɵɵelement(7, \"input\", 24);\n    i0.ɵɵtemplate(8, TodoComponent_form_14_element_validation_message_8_Template, 1, 1, \"element-validation-message\", 25);\n    i0.ɵɵelementStart(9, \"label\", 26);\n    i0.ɵɵtext(10, \"Name\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"div\", 27);\n    i0.ɵɵelement(12, \"input\", 28);\n    i0.ɵɵtemplate(13, TodoComponent_form_14_element_validation_message_13_Template, 1, 1, \"element-validation-message\", 25);\n    i0.ɵɵelementStart(14, \"label\", 29);\n    i0.ɵɵtext(15, \"Description\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 30);\n    i0.ɵɵelement(17, \"input\", 31);\n    i0.ɵɵelementStart(18, \"label\", 32);\n    i0.ɵɵtext(19, \"Completed\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(20, \"div\", 33)(21, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function TodoComponent_form_14_Template_button_click_21_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.onNew());\n    });\n    i0.ɵɵtext(22, \"New\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"button\", 35);\n    i0.ɵɵtext(24, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function TodoComponent_form_14_Template_button_click_25_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.onDelete());\n    });\n    i0.ɵɵtext(26, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.todoForm);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.elementHasFocus(\"name\") && ctx_r2.isControlInvalid(ctx_r2.todoForm.get(\"name\")));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.elementHasFocus(\"description\") && ctx_r2.isControlInvalid(ctx_r2.todoForm.get(\"description\")));\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.isProcessing);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.isProcessing || !ctx_r2.todoForm.valid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.isProcessing || ctx_r2.state !== ctx_r2.stateType.Edit);\n  }\n}\nvar State = /*#__PURE__*/(() => {\n  (function (State) {\n    State[State[\"New\"] = 0] = \"New\";\n    State[State[\"Edit\"] = 1] = \"Edit\";\n  })(State || (State = {}));\n  return State;\n})();\nexport let TodoComponent = /*#__PURE__*/(() => {\n  class TodoComponent {\n    get currentId() {\n      const id = this.todoForm.get('id')?.value ?? -1;\n      return id;\n    }\n    constructor(viewModelDataService, formBuilder, messageService, modalDialogService, authenticationService, whitelistService) {\n      this.viewModelDataService = viewModelDataService;\n      this.formBuilder = formBuilder;\n      this.messageService = messageService;\n      this.modalDialogService = modalDialogService;\n      this.authenticationService = authenticationService;\n      this.whitelistService = whitelistService;\n      this.elementHasFocus = ElementFocus.elementHasFocus;\n      this.isControlInvalid = ControlValidation.isInvalid;\n      this.username = null;\n      this.isProcessing = false;\n      this.todo = new Todo();\n      this.state = State.New;\n      this.stateType = State;\n      this.alphaNumWhitelist = new Whitelist();\n      this.descWhitelist = new Whitelist();\n      this.columns = [{\n        prop: \"id\"\n      }, {\n        prop: \"name\"\n      }, {\n        prop: \"description\"\n      }, {\n        prop: \"isComplete\",\n        name: \"Complete\"\n      }];\n    }\n    ngOnDestroy() {\n      this.todosSubscription?.unsubscribe();\n    }\n    ngOnInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.username = yield _this.authenticationService.getUsername();\n        _this.alphaNumWhitelist = yield _this.whitelistService.getWhitelist(\"ALPHANUM\");\n        _this.descWhitelist = yield _this.whitelistService.getWhitelist(\"DESC\");\n        _this.refreshList();\n        _this.initForm();\n      })();\n    }\n    /**\r\n     * Initialise Form\r\n     */\n    initForm() {\n      this.todoForm = this.formBuilder.group({\n        id: null,\n        name: ['', {\n          validators: [Validators.required, TextValidators.whitelistValidator(this.alphaNumWhitelist)],\n          updateOn: 'blur'\n        }],\n        description: ['', {\n          validators: [Validators.required, TextValidators.whitelistValidator(this.descWhitelist)],\n          updateOn: 'blur'\n        }],\n        username: this.username,\n        isComplete: null,\n        updated: null\n      });\n    }\n    /**\r\n     * Refresh List\r\n     */\n    refreshList() {\n      if (this.username !== null) {\n        this.todos$ = this.viewModelDataService.actionViewModel({\n          \"value\": this.username\n        }, \"todo\", \"search\").pipe(catchError(error => of(this.messageService.sendErrorMessage({\n          \"message\": error\n        }))));\n        if (this.todos$) this.todosSubscription = this.todos$.subscribe(todos => this.todos = todos);\n      }\n    }\n    /**\r\n     * Update Form\r\n     * @param todo\r\n     */\n    updateForm(todo) {\n      if (this.username) todo.username = this.username;\n      this.todoForm.patchValue(todo);\n      this.todoForm.markAsPristine();\n      this.todoForm.markAsUntouched();\n    }\n    /**\r\n     * Refresh Page\r\n     * @param todo\r\n     * @param setNew\r\n     */\n    refresh(todo, setNew = false) {\n      this.refreshList();\n      this.updateForm(todo);\n      if (setNew) this.state = State.New;else this.state = State.Edit;\n    }\n    /**\r\n     * On Select\r\n     * @param todo\r\n     */\n    onSelect(todo) {\n      this.updateForm(todo);\n      this.state = State.Edit;\n    }\n    /**\r\n     * On New\r\n     */\n    onNew() {\n      this.isProcessing = true;\n      this.updateForm(new Todo());\n      this.state = State.New;\n      ElementFocus.setFocusOnElement(\"name\");\n      this.isProcessing = false;\n    }\n    /**\r\n     * On Save\r\n     */\n    onSave() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2.isProcessing = true;\n        if ((yield _this2.modalDialogService.callModalDialog(ModalType.Save)) == ModalReturn.Save) {\n          const todo = new Todo(_this2.todoForm.value);\n          let response;\n          const saveMessage = _this2.state === State.New ? \"Record Created\" : \"Record Updated\";\n          if (_this2.state === State.New) {\n            yield _this2.viewModelDataService.addViewModel(todo, \"todo\").toPromise().then(r => {\n              if (r) response = r;\n            }).catch(error => _this2.messageService.sendErrorMessage(error));\n          } else if (_this2.state === State.Edit && todo.id !== undefined) {\n            yield _this2.viewModelDataService.updateViewModel(todo, \"todo\", todo.id).toPromise().then(r => {\n              if (r) response = r;\n            }).catch(error => _this2.messageService.sendErrorMessage(error));\n          }\n          if (response) {\n            _this2.refresh(response);\n            _this2.messageService.sendMessage(new Message(\"nav-menu\", saveMessage, MessageType.Dark));\n          }\n        }\n        _this2.isProcessing = false;\n      })();\n    }\n    /**\r\n     * On Delete\r\n     */\n    onDelete() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        _this3.isProcessing = true;\n        if ((yield _this3.modalDialogService.callModalDialog(ModalType.Delete)) == ModalReturn.Delete) {\n          let response = false;\n          yield _this3.viewModelDataService.deleteViewModel(\"todo\", _this3.todoForm.value.id).toPromise().then(r => {\n            if (r) response = r;\n          }).catch(error => _this3.messageService.sendErrorMessage(error));\n          if (response) {\n            _this3.refresh(new Todo(), true);\n            _this3.messageService.sendMessage(new Message(\"nav-menu\", \"Record Deleted\", MessageType.Dark));\n          }\n        }\n        _this3.isProcessing = false;\n      })();\n    }\n  }\n  TodoComponent.ɵfac = function TodoComponent_Factory(t) {\n    return new (t || TodoComponent)(i0.ɵɵdirectiveInject(i1.ViewModelDataService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i4.ModalDialogService), i0.ɵɵdirectiveInject(i5.AuthenticationService), i0.ɵɵdirectiveInject(i6.WhitelistService));\n  };\n  TodoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TodoComponent,\n    selectors: [[\"app-todo\"]],\n    decls: 15,\n    vars: 7,\n    consts: [[\"role\", \"main\", 1, \"container\"], [1, \"row\"], [\"id\", \"tableLabel\"], [\"class\", \"row\", 4, \"ngIf\"], [\"[selectionType\", \"single\", 3, \"rows\", \"columns\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"table-responsive\"], [\"class\", \"table table-hover table-bordered\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-hover\", \"table-bordered\"], [1, \"table-dark\"], [3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\", \"click\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"disabled\", \"\", 1, \"form-check-input\", 3, \"checked\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"g-2\"], [1, \"form-floating\", \"col-md-4\"], [\"id\", \"id\", \"type\", \"text\", \"formControlName\", \"id\", \"readonly\", \"\", \"placeholder\", \"id\", 1, \"form-control\"], [\"for\", \"id\", 1, \"form-label\"], [1, \"mb-2\", \"form-floating\", \"col-md-8\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"name\", \"maxLength\", \"20\", 1, \"form-control\"], [3, \"model\", 4, \"ngIf\"], [\"for\", \"name\", 1, \"form-label\"], [1, \"mb-2\", \"form-floating\"], [\"id\", \"description\", \"type\", \"text\", \"formControlName\", \"description\", \"placeholder\", \"description\", \"maxLength\", \"100\", 1, \"form-control\"], [\"for\", \"description\", 1, \"form-label\"], [1, \"form-check\", \"form-switch\", \"mb-2\"], [\"id\", \"is-complete\", \"type\", \"checkbox\", \"formControlName\", \"isComplete\", 1, \"form-check-input\"], [\"for\", \"is-complete\", 1, \"form-check-label\"], [1, \"gap-2\", \"d-flex\", \"justify-content-end\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\"], [3, \"model\"]],\n    template: function TodoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"main\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n        i0.ɵɵtext(3, \"To-do List\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(4, TodoComponent_div_4_Template, 4, 0, \"div\", 3);\n        i0.ɵɵtemplate(5, TodoComponent_div_5_Template, 3, 1, \"div\", 3);\n        i0.ɵɵpipe(6, \"async\");\n        i0.ɵɵelementStart(7, \"div\");\n        i0.ɵɵelement(8, \"ngx-datatable\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 5)(10, \"div\", 6)(11, \"h5\", 7);\n        i0.ɵɵtext(12, \"To-do Item\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 8);\n        i0.ɵɵtemplate(14, TodoComponent_form_14_Template, 27, 6, \"form\", 9);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", !ctx.todos$);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(6, 5, ctx.todos$));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"rows\", ctx.todos)(\"columns\", ctx.columns);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.todoForm);\n      }\n    },\n    dependencies: [i7.NgClass, i7.NgForOf, i7.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i8.ElementValidationMessageComponent, i7.AsyncPipe],\n    encapsulation: 2\n  });\n  return TodoComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}