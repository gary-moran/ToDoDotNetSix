{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isNullOrUndefined } from 'is-what';\nimport { take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./app-config.service\";\nexport let WhitelistService = /*#__PURE__*/(() => {\n  class WhitelistService {\n    constructor(http, appConfigService) {\n      this.http = http;\n      this.appConfigService = appConfigService;\n      this.apiBaseUrl = \"\";\n      // extract API base URL from App Config\n      let config = [{\n        \"WebApi\": \"\"\n      }];\n      this.appConfigService.AppConfig.pipe(take(1)).subscribe(cfg => {\n        config = cfg;\n      });\n      this.apiBaseUrl = config.WebApi;\n    }\n    /**\r\n    * Get all Whitelists\r\n    * @returns whitelists\r\n    */\n    getAllWhitelists() {\n      return this.http.get(this.apiBaseUrl);\n    }\n    /**\r\n     * Set Whitelists\r\n     */\n    setWhitelists() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        yield _this.getAllWhitelists().pipe(take(1)).subscribe(whitelists => _this.whitelists = whitelists);\n      })();\n    }\n    /**\r\n    * Get Whitelist\r\n    * @returns whitelist\r\n    * @param patternType the whitelist type\r\n    */\n    getWhitelist(patternType) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        if (isNullOrUndefined(_this2.whitelists) || _this2.whitelists.length == 0) yield _this2.setWhitelists();\n        return _this2.whitelists?.find(l => l.type == patternType);\n      })();\n    }\n  }\n  WhitelistService.ɵfac = function WhitelistService_Factory(t) {\n    return new (t || WhitelistService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppConfigService));\n  };\n  WhitelistService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WhitelistService,\n    factory: WhitelistService.ɵfac,\n    providedIn: 'root'\n  });\n  return WhitelistService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}