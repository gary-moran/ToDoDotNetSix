{"ast":null,"code":"import { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\nimport { isNullOrUndefined } from 'is-what';\nimport { ErrorsTranslation } from '../../utilities/errors-translation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nconst _c0 = [\"tooltipVar\"];\nexport let ElementValidationMessageComponent = /*#__PURE__*/(() => {\n  class ElementValidationMessageComponent {\n    constructor() {\n      this.tooltipMessageText = 'Undefined Error';\n    }\n    ngOnDestroy() {\n      this.statusChange$.unsubscribe();\n    }\n    ngAfterViewInit() {\n      // Determine text to display in tooltip and show tooltip\n      this.updateTooltipText();\n      // setup statusChange$ observable\n      if (this.model) {\n        this.statusChange$ = this.model.statusChanges.subscribe(() => {\n          this.updateTooltipText();\n        });\n      }\n    }\n    /**\r\n     * Update Tooltip Text\r\n     */\n    updateTooltipText() {\n      if (this.model) {\n        if (!isNullOrUndefined(this.key)) {\n          this.tooltipMessageText = this.key;\n        } else if (!isNullOrUndefined(this.message)) {\n          this.tooltipMessageText = this.message;\n        }\n        // if no key or message passed but a model is passed with errors, then extract the errors to determine the messages\n        else if (!isNullOrUndefined(this.model.errors)) {\n          let messageText = \"\";\n          this.tooltipMessageText = \"\";\n          // for each error object\n          for (const property in this.model.errors) {\n            // we will manually set required message\n            const required = property === 'required' && this.model.errors[property];\n            // errors that end with -MSG are our custom error messages, that need to be translated\n            if (property.endsWith(\"-MSG\") || required) {\n              messageText = required ? \"VALIDATION.REQUIRED\" : this.model.errors[property];\n              // errors can include a parameter, which needs to be removed for translation, then added back in\n              const index = messageText.indexOf(\":\");\n              let param = \"\";\n              if (index > -1) {\n                if (!(index + 1 >= messageText.length)) {\n                  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                  param = messageText.substring(index + 1);\n                }\n                // translate message\n                messageText = `${ErrorsTranslation.translate(messageText.substr(0, index))}: ${param}`;\n              } else messageText = ErrorsTranslation.translate(messageText);\n              // if necessary, append multiple messages\n              if (this.tooltipMessageText == \"\") this.tooltipMessageText = messageText;else this.tooltipMessageText = `${this.tooltipMessageText}; ${messageText}`;\n            }\n          }\n        }\n        // Close tooltip if already open\n        if (this.tooltip.isOpen()) this.tooltip.close();\n        // Set text to display\n        this.tooltip.ngbTooltip = this.tooltipMessageText;\n        // Open tooltip\n        this.tooltip.open();\n      }\n    }\n  }\n  ElementValidationMessageComponent.ɵfac = function ElementValidationMessageComponent_Factory(t) {\n    return new (t || ElementValidationMessageComponent)();\n  };\n  ElementValidationMessageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ElementValidationMessageComponent,\n    selectors: [[\"element-validation-message\"]],\n    viewQuery: function ElementValidationMessageComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltip = _t.first);\n      }\n    },\n    inputs: {\n      key: \"key\",\n      message: \"message\",\n      model: \"model\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 2,\n    vars: 1,\n    consts: [[\"ngbTooltip\", \"\", \"placement\", \"bottom\", \"tooltipClass\", \"my-custom-class\", \"triggers\", \"manual\", 3, \"autoClose\"], [\"tooltipVar\", \"ngbTooltip\"]],\n    template: function ElementValidationMessageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"autoClose\", false);\n      }\n    },\n    dependencies: [NgbTooltipModule, i1.NgbTooltip],\n    styles: [\".my-custom-class .tooltip-inner{background-color:red}.my-custom-class .tooltip-arrow:before{border-bottom-color:red}\\n\"],\n    encapsulation: 2\n  });\n  return ElementValidationMessageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}