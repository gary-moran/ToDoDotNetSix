{"ast":null,"code":"import { take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./log-publishers.service\";\nexport var LogLevel = /*#__PURE__*/(() => {\n  (function (LogLevel) {\n    LogLevel[LogLevel[\"All\"] = 0] = \"All\";\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n    LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n    LogLevel[LogLevel[\"Off\"] = 6] = \"Off\";\n  })(LogLevel || (LogLevel = {}));\n  return LogLevel;\n})();\n/**\r\n * Log Entry Class.\r\n */\nexport class LogEntry {\n  constructor() {\n    // Public Properties\n    this.entryDate = new Date();\n    this.message = '';\n    this.level = LogLevel.Debug;\n    this.extraInfo = [];\n    this.logWithDate = true;\n  }\n  /**\r\n   * Build Log string.\r\n   */\n  buildLogString() {\n    let value = '';\n    if (this.logWithDate) {\n      value = new Date() + ' - ';\n    }\n    value += 'Type: ' + LogLevel[this.level];\n    value += ' - Message: ' + this.message;\n    if (this.extraInfo.length) {\n      value += ' - Extra Info: ' + this.formatParams(this.extraInfo);\n    }\n    return value;\n  }\n  /**\r\n   * Format Log Entry Params.\r\n   * @param params Params\r\n   */\n  formatParams(params) {\n    let returnValue = params.join(',');\n    // Is there at least one object in the array?\n    if (params.some(p => typeof p == 'object')) {\n      returnValue = '';\n      // Build comma-delimited string\n      for (let item of params) {\n        returnValue += JSON.stringify(item) + ',';\n      }\n    }\n    return returnValue;\n  }\n}\nexport let LogService = /*#__PURE__*/(() => {\n  class LogService {\n    constructor(publishersService) {\n      this.publishersService = publishersService;\n      this.level = LogLevel.All;\n      this.logWithDate = true;\n      // Set publishers\n      this.publishers = this.publishersService.publishers;\n    }\n    /**\r\n     * Debug.\r\n     * @param msg Message\r\n     * @param optionalParams Optional Params\r\n     */\n    debug(msg, ...optionalParams) {\n      this.writeToLog(msg, LogLevel.Debug, optionalParams);\n    }\n    /**\r\n     * Info.\r\n     * @param msg Message\r\n     * @param optionalParams Optional Params\r\n     */\n    info(msg, ...optionalParams) {\n      this.writeToLog(msg, LogLevel.Info, optionalParams);\n    }\n    /**\r\n     * Warn.\r\n     * @param msg Message\r\n     * @param optionalParams Optional Params\r\n     */\n    warn(msg, ...optionalParams) {\n      this.writeToLog(msg, LogLevel.Warn, optionalParams);\n    }\n    /**\r\n     * Error.\r\n     * @param msg Message\r\n     * @param optionalParams Optional Params\r\n     */\n    error(msg, ...optionalParams) {\n      this.writeToLog(msg, LogLevel.Error, optionalParams);\n    }\n    /**\r\n     * Fatal.\r\n     * @param msg Message\r\n     * @param optionalParams Optional Params\r\n     */\n    fatal(msg, ...optionalParams) {\n      this.writeToLog(msg, LogLevel.Fatal, optionalParams);\n    }\n    /**\r\n     * Log.\r\n     * @param msg Message\r\n     * @param optionalParams Optional Params\r\n     */\n    log(msg, ...optionalParams) {\n      this.writeToLog(msg, LogLevel.All, optionalParams);\n    }\n    /**\r\n     * Clear.\r\n     */\n    clear() {\n      for (let logger of this.publishers) {\n        logger.clear().pipe(take(1)).subscribe(response => {});\n      }\n    }\n    // Private methods\n    /**\r\n     * Should log.\r\n     * @param level Log Level\r\n     */\n    shouldLog(level) {\n      let returnValue = false;\n      if (level >= this.level && level !== LogLevel.Off || this.level === LogLevel.All) {\n        returnValue = true;\n      }\n      return returnValue;\n    }\n    /**\r\n     * Write to log.\r\n     * @param msg Message\r\n     * @param level Level\r\n     * @param params Params\r\n     */\n    writeToLog(msg, level, params) {\n      if (this.shouldLog(level)) {\n        // Declare variables\n        let entry = new LogEntry();\n        // Build Log Entry\n        entry.message = msg;\n        entry.level = level;\n        entry.extraInfo = params;\n        entry.logWithDate = this.logWithDate;\n        for (let logger of this.publishers) {\n          logger.log(entry).subscribe(response => {});\n        }\n      }\n    }\n  }\n  LogService.ɵfac = function LogService_Factory(t) {\n    return new (t || LogService)(i0.ɵɵinject(i1.LogPublishersService));\n  };\n  LogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LogService,\n    factory: LogService.ɵfac,\n    providedIn: 'root'\n  });\n  return LogService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}