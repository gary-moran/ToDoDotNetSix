{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { BehaviorSubject, catchError, first, map, shareReplay, Subject, throwError } from 'rxjs';\nimport { Generic } from '../models/generic';\nimport { Message } from '../models/message';\nimport { MessageType } from '../models/message-type.enum';\nimport { IsTrue } from '../utilities/is-true';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app-config.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./message.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"./view-model-data.service\";\nexport class AuthenticationService {\n  constructor(appConfigService, httpClient, messageService, router, viewModelDataService) {\n    // authenticate and store token\n    this.appConfigService = appConfigService;\n    this.httpClient = httpClient;\n    this.messageService = messageService;\n    this.router = router;\n    this.viewModelDataService = viewModelDataService;\n    this._authenticated$ = new Subject();\n    this.authenticated$ = this._authenticated$.pipe(shareReplay(1));\n    this._logout$ = new BehaviorSubject(false);\n    this.logout$ = this._logout$.asObservable();\n    this._username$ = new BehaviorSubject(null);\n    this.username$ = this._username$.asObservable();\n    this.apiBaseUrl = \"\";\n    this.token = \"\";\n    this.tokenExpiration = new Date();\n    this.userId = null;\n    this.username = null;\n    this.authenticated = false;\n    this.refreshPending = false;\n    this.jwtHelper = new JwtHelperService();\n    this.appConfigService.AppConfig.subscribe(config => {\n      if (config) {\n        this.apiBaseUrl = config?.WebApi ?? \"\";\n        const session = this.getSession();\n        if (session != null && !this.authenticated) {\n          if (!this.jwtHelper.isTokenExpired(session.token)) {\n            this.token = session.token;\n            this.tokenExpiration = this.jwtHelper.getTokenExpirationDate(session.token);\n            this.userId = session.user;\n            this.newAuthenticationEvent(true);\n          } else {\n            this.refreshToken().subscribe(() => {});\n          }\n        }\n      }\n    });\n  }\n  /**\r\n  * Check if the current session is Authenticated\r\n  */\n  checkAuthenticated() {\n    if (!this.isAuthenticated(true)) {\n      this.logout();\n      this.router.navigate([\"/login\"]);\n      this.messageService.sendMessage(new Message(\"nav-menu\", \"The current session has expired.\", MessageType.Info), true);\n      return false;\n    } else return true;\n  }\n  /**\r\n   * Returns whether the user is authenticated\r\n   */\n  isAuthenticated(recheckSession = false) {\n    if (recheckSession) {\n      // Grab the latest version of the current session before checking the Auth Status\n      const session = this.getSession();\n      if (session) {\n        this.token = session.token;\n        this.userId = session.user;\n        this.checkUsername();\n        return IsTrue.eval(this.userId) && IsTrue.eval(this.token) && !this.jwtHelper.isTokenExpired(this.token);\n      } else {\n        // No session then log out user\n        return false;\n      }\n    } else {\n      return IsTrue.eval(this.userId) && IsTrue.eval(this.token) && !this.jwtHelper.isTokenExpired(this.token) && this.authenticated;\n    }\n  }\n  /**\r\n   * Creates a new authentication event\r\n   * @param authenticated\r\n   */\n  newAuthenticationEvent(authenticated) {\n    this.authenticated = authenticated;\n    this._authenticated$.next(authenticated);\n  }\n  /**\r\n   * Attempts to refresh the users authentication token\r\n   */\n  refreshToken() {\n    if (!this.refreshPending) {\n      this.refreshPending = true;\n      const session = this.getSession();\n      if (session) {\n        return this.httpClient.post(`${this.apiBaseUrl}/api/account/refreshtoken`, {\n          refreshToken: session.refreshToken,\n          userId: session.user,\n          token: session.token\n        }).pipe(map(response => {\n          this.token = response.token;\n          this.tokenExpiration = response.expiration;\n          this.setSession(response);\n          this.userId = response.user;\n          this.newAuthenticationEvent(true);\n          this.refreshPending = false;\n          return response;\n        }), catchError(error => {\n          this.removeSession();\n          this.newAuthenticationEvent(false);\n          this.router.navigate([\"/login\"]);\n          this.refreshPending = false;\n          return throwError(error);\n        }));\n      } else {\n        throw \"Not Logged In\";\n      }\n    } else {\n      return this._authenticated$.pipe(first());\n    }\n  }\n  /**\r\n   * Logs in a user\r\n   * @param login The users credentials\r\n   */\n  login(login) {\n    return this.httpClient.post(`${this.apiBaseUrl}/api/account/createtoken`, login).pipe(map(response => {\n      const tokenInfo = response;\n      this.token = tokenInfo.token;\n      this.tokenExpiration = tokenInfo.expiration;\n      this.setSession(response);\n      this.userId = tokenInfo.user;\n      this.setUsername(login.username);\n      this.newAuthenticationEvent(true);\n      return true;\n    }));\n  }\n  /**\r\n   * Logs out the user, also any other tabs too\r\n   */\n  logout() {\n    this.token = \"\";\n    this.userId = null;\n    this.removeSession();\n    this.newAuthenticationEvent(false);\n    this._logout$.next(true);\n    this.authenticated$ = this._authenticated$.pipe(shareReplay(1));\n  }\n  /**\r\n   * Check Username\r\n   */\n  checkUsername() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let check = _this.username !== null;\n      //.pipe(take(1))\n      if (!_this.username && _this.userId) {\n        yield _this.viewModelDataService.actionViewModel(new Generic(_this.userId), \"account\", \"GetUsername\").subscribe(username => {\n          if (username) {\n            _this.setUsername(username);\n            check = true;\n          }\n        });\n      }\n      return check;\n    })();\n  }\n  /**\r\n   * Set Username\r\n   * @param username\r\n   */\n  setUsername(username) {\n    this.username = username;\n    this._username$.next(username);\n  }\n  /**\r\n   * Handler to set the session\r\n   * @param response\r\n   */\n  setSession(response) {\n    localStorage.setItem('session', JSON.stringify(response));\n  }\n  /**\r\n   * Handler to get the session\r\n   */\n  getSession() {\n    const session = localStorage.getItem('session');\n    if (!session) return null;\n    return JSON.parse(session);\n  }\n  /**\r\n   * Handler to remove the session\r\n   */\n  removeSession() {\n    localStorage.removeItem('session');\n  }\n  /**\r\n   * Handler to get the users token\r\n   */\n  getToken() {\n    const session = this.getSession();\n    if (session) return session.token;else return null;\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.MessageService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.ViewModelDataService));\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["JwtHelperService","BehaviorSubject","catchError","first","map","shareReplay","Subject","throwError","Generic","Message","MessageType","IsTrue","AuthenticationService","constructor","appConfigService","httpClient","messageService","router","viewModelDataService","_authenticated$","pipe","_logout$","asObservable","_username$","Date","jwtHelper","AppConfig","subscribe","config","apiBaseUrl","WebApi","session","getSession","authenticated","isTokenExpired","token","tokenExpiration","getTokenExpirationDate","userId","user","newAuthenticationEvent","refreshToken","checkAuthenticated","isAuthenticated","logout","navigate","sendMessage","Info","recheckSession","checkUsername","eval","next","refreshPending","post","response","expiration","setSession","error","removeSession","login","tokenInfo","setUsername","username","authenticated$","check","actionViewModel","localStorage","setItem","JSON","stringify","getItem","parse","removeItem","getToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\services\\authentication.service.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      09 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Authentication Service\r\n*  Notes:\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  10 AUG 2023 GM          Created\r\n************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { BehaviorSubject, catchError, first, map, Observable, shareReplay, Subject, take, throwError } from 'rxjs';\r\nimport { Generic } from '../models/generic';\r\nimport { Login } from '../models/login';\r\nimport { Message } from '../models/message';\r\nimport { MessageType } from '../models/message-type.enum';\r\nimport { IsTrue } from '../utilities/is-true';\r\nimport { AppConfigService } from './app-config.service';\r\nimport { MessageService } from './message.service';\r\nimport { ViewModelDataService } from './view-model-data.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  private _authenticated$ = new Subject<boolean>();\r\n  authenticated$ = this._authenticated$.pipe(shareReplay(1));\r\n\r\n  private _logout$ = new BehaviorSubject<boolean>(false);\r\n  logout$ = this._logout$.asObservable();\r\n\r\n  private _username$ = new BehaviorSubject<string | null>(null);\r\n  username$ = this._username$.asObservable();\r\n\r\n  private apiBaseUrl: string = \"\";\r\n  private token: string = \"\";\r\n  private tokenExpiration: Date | null = new Date();\r\n  private userId: string | null = null;\r\n  private username: string | null = null;\r\n  private jwtHelper: JwtHelperService;\r\n  private authenticated: boolean = false;\r\n  private refreshPending: boolean = false;\r\n\r\n  constructor(\r\n    private appConfigService: AppConfigService,\r\n    private httpClient: HttpClient,\r\n    private messageService: MessageService,\r\n    private router: Router,\r\n    private viewModelDataService: ViewModelDataService\r\n  ) {\r\n\r\n    // authenticate and store token\r\n\r\n    this.jwtHelper = new JwtHelperService();\r\n\r\n    this.appConfigService.AppConfig.subscribe((config) => {\r\n      if (config) {\r\n        this.apiBaseUrl = config?.WebApi ?? \"\";\r\n        const session = this.getSession();\r\n        if (session != null && !this.authenticated) {\r\n          if (!this.jwtHelper.isTokenExpired(session.token)) {\r\n            this.token = session.token;\r\n            this.tokenExpiration = this.jwtHelper.getTokenExpirationDate(session.token);\r\n            this.userId = session.user;\r\n            this.newAuthenticationEvent(true);\r\n          } else {\r\n            this.refreshToken().subscribe(() => { });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * Check if the current session is Authenticated\r\n  */\r\n  checkAuthenticated(): boolean {\r\n\r\n    if (!this.isAuthenticated(true)) {\r\n      this.logout();\r\n      this.router.navigate([\"/login\"]);\r\n      this.messageService.sendMessage(new Message(\"nav-menu\", \"The current session has expired.\", MessageType.Info), true);\r\n      return false;\r\n    } else\r\n      return true;\r\n\r\n  }\r\n\r\n  /**\r\n   * Returns whether the user is authenticated\r\n   */\r\n  isAuthenticated(recheckSession: boolean = false): boolean {\r\n\r\n    if (recheckSession) {\r\n\r\n      // Grab the latest version of the current session before checking the Auth Status\r\n      const session = this.getSession();\r\n      if (session) {\r\n        this.token = session.token;\r\n        this.userId = session.user;\r\n        this.checkUsername();\r\n        return IsTrue.eval(this.userId) && IsTrue.eval(this.token) && !this.jwtHelper.isTokenExpired(this.token);\r\n      } else {\r\n        // No session then log out user\r\n        return false;\r\n      }\r\n\r\n    } else {\r\n      return IsTrue.eval(this.userId) && IsTrue.eval(this.token) && !this.jwtHelper.isTokenExpired(this.token) && this.authenticated;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new authentication event\r\n   * @param authenticated\r\n   */\r\n  newAuthenticationEvent(authenticated: boolean) {\r\n    this.authenticated = authenticated;\r\n    this._authenticated$.next(authenticated);\r\n  }\r\n\r\n  /**\r\n   * Attempts to refresh the users authentication token\r\n   */\r\n  public refreshToken(): Observable<any> {\r\n\r\n    if (!this.refreshPending) {\r\n\r\n      this.refreshPending = true;\r\n      const session = this.getSession();\r\n\r\n      if (session) {\r\n        return this.httpClient.post(`${this.apiBaseUrl}/api/account/refreshtoken`, { refreshToken: session.refreshToken, userId: session.user, token: session.token })\r\n          .pipe(map((response: any) => {\r\n\r\n          this.token = response.token;\r\n          this.tokenExpiration = response.expiration;\r\n          this.setSession(response);\r\n          this.userId = response.user;\r\n          this.newAuthenticationEvent(true);\r\n          this.refreshPending = false;\r\n          return response;\r\n\r\n        }), catchError((error: any) => {\r\n\r\n          this.removeSession();\r\n          this.newAuthenticationEvent(false);\r\n          this.router.navigate([\"/login\"]);\r\n          this.refreshPending = false;\r\n          return throwError(error);\r\n\r\n        }));\r\n      } else {\r\n        throw \"Not Logged In\";\r\n      }\r\n    } else {\r\n      return this._authenticated$.pipe(first());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs in a user\r\n   * @param login The users credentials\r\n   */\r\n  public login(login: Login) {\r\n\r\n    return this.httpClient.post<Login>(`${this.apiBaseUrl}/api/account/createtoken`, login)\r\n      .pipe(\r\n        map((response: any) => {\r\n          const tokenInfo = response;\r\n          this.token = tokenInfo.token;\r\n          this.tokenExpiration = tokenInfo.expiration;\r\n          this.setSession(response);\r\n          this.userId = tokenInfo.user;\r\n          this.setUsername(login.username);\r\n          this.newAuthenticationEvent(true);\r\n          return true;\r\n        }));\r\n  }\r\n\r\n  /**\r\n   * Logs out the user, also any other tabs too\r\n   */\r\n  logout(): void {\r\n    this.token = \"\";\r\n    this.userId = null;\r\n    this.removeSession();\r\n    this.newAuthenticationEvent(false);\r\n    this._logout$.next(true);\r\n    this.authenticated$ = this._authenticated$.pipe(shareReplay(1));\r\n  }\r\n\r\n  /**\r\n   * Check Username\r\n   */\r\n  async checkUsername(): Promise<boolean> {\r\n\r\n    let check: boolean = this.username !== null;\r\n\r\n    //.pipe(take(1))\r\n    if (!this.username && this.userId) {\r\n      await this.viewModelDataService.actionViewModel<Generic, string>(new Generic(this.userId), \"account\", \"GetUsername\")\r\n        .subscribe(username => {\r\n          if (username) {\r\n            this.setUsername(username);\r\n            check = true;\r\n          }\r\n        });\r\n    }\r\n\r\n    return check;\r\n\r\n  }\r\n\r\n  /**\r\n   * Set Username\r\n   * @param username\r\n   */\r\n  setUsername(username: string): void {\r\n    this.username = username;\r\n    this._username$.next(username);\r\n  }\r\n\r\n  /**\r\n   * Handler to set the session\r\n   * @param response\r\n   */\r\n  public setSession(response: any): void {\r\n    localStorage.setItem('session', JSON.stringify(response));\r\n  }\r\n\r\n  /**\r\n   * Handler to get the session\r\n   */\r\n  public getSession(): any {\r\n    const session: any = localStorage.getItem('session');\r\n\r\n    if (!session)\r\n      return null;\r\n    return JSON.parse(session);\r\n  }\r\n\r\n  /**\r\n   * Handler to remove the session\r\n   */\r\n  private removeSession(): void {\r\n    localStorage.removeItem('session');\r\n  }\r\n\r\n  /**\r\n   * Handler to get the users token\r\n   */\r\n  public getToken(): any {\r\n    const session = this.getSession();\r\n    if (session)\r\n      return session.token;\r\n    else\r\n      return null;\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}