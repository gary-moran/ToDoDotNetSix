{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isNullOrUndefined } from 'is-what';\nimport { take } from 'rxjs';\nimport { Whitelist } from '../models/whitelist';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./app-config.service\";\nexport class WhitelistService {\n  constructor(http, appConfigService) {\n    this.http = http;\n    this.appConfigService = appConfigService;\n    this.apiBaseUrl = \"\";\n    // extract API base URL from App Config\n    let config = [{\n      \"WebApi\": \"\"\n    }];\n    this.appConfigService.AppConfig.pipe(take(1)).subscribe(cfg => {\n      config = cfg;\n    });\n    this.apiBaseUrl = `${config.WebApi}/api/Whitelist/`;\n  }\n  /**\r\n  * Get all Whitelists\r\n  * @returns whitelists\r\n  */\n  getAllWhitelists() {\n    return this.http.get(this.apiBaseUrl);\n  }\n  /**\r\n   * Set Whitelists\r\n   */\n  setWhitelists() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.getAllWhitelists().toPromise().then(whitelists => _this.whitelists = whitelists);\n    })();\n  }\n  /**\r\n  * Get Whitelist\r\n  * @returns whitelist\r\n  * @param patternType the whitelist type\r\n  */\n  getWhitelist(patternType) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (isNullOrUndefined(_this2.whitelists) || _this2.whitelists.length == 0) yield _this2.setWhitelists();\n      const whitelist = _this2.whitelists?.find(l => l.type == patternType) ?? new Whitelist();\n      return whitelist;\n    })();\n  }\n}\nWhitelistService.ɵfac = function WhitelistService_Factory(t) {\n  return new (t || WhitelistService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppConfigService));\n};\nWhitelistService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WhitelistService,\n  factory: WhitelistService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAiBA,SAASA,iBAAiB,QAAQ,SAAS;AAC3C,SAASC,IAAI,QAAQ,MAAM;AAC3B,SAASC,SAAS,QAAQ,qBAAqB;;;;AAM/C,OAAM,MAAOC,gBAAgB;EAK3BC,YAAoBC,IAAgB,EAAUC,gBAAkC;IAA5D,SAAI,GAAJD,IAAI;IAAsB,qBAAgB,GAAhBC,gBAAgB;IAHtD,eAAU,GAAW,EAAE;IAI7B;IACA,IAAIC,MAAM,GAAc,CAAC;MAAE,QAAQ,EAAE;IAAE,CAAE,CAAC;IAC1C,IAAI,CAACD,gBAAgB,CAACE,SAAS,CAACC,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC,CAACS,SAAS,CAACC,GAAG,IAAG;MAC5DJ,MAAM,GAAGI,GAAG;IACd,CAAC,CAAC;IACF,IAAI,CAACC,UAAU,GAAG,GAAGL,MAAM,CAACM,MAAM,iBAAiB;EACrD;EAEA;;;;EAIQC,gBAAgB;IACtB,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAc,IAAI,CAACH,UAAU,CAAC;EACpD;EAEA;;;EAGcI,aAAa;IAAA;IAAA;MACzB,MAAM,KAAI,CAACF,gBAAgB,EAAE,CAACG,SAAS,EAAE,CAACC,IAAI,CAACC,UAAU,IAAI,KAAI,CAACA,UAAU,GAAGA,UAAU,CAAC;IAAC;EAC7F;EAEA;;;;;EAKMC,YAAY,CAACC,WAAmB;IAAA;IAAA;MAEpC,IAAIrB,iBAAiB,CAAC,MAAI,CAACmB,UAAU,CAAC,IAAI,MAAI,CAACA,UAAU,CAACG,MAAM,IAAI,CAAC,EACnE,MAAM,MAAI,CAACN,aAAa,EAAE;MAE5B,MAAMO,SAAS,GAAc,MAAI,CAACJ,UAAU,EAAEK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,IAAIL,WAAW,CAAC,IAAI,IAAInB,SAAS,EAAE;MAEjG,OAAOqB,SAAS;IAAC;EACnB;;AA1CWpB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAwB,SAAhBxB,gBAAgB;EAAAyB,YAFb;AAAM","names":["isNullOrUndefined","take","Whitelist","WhitelistService","constructor","http","appConfigService","config","AppConfig","pipe","subscribe","cfg","apiBaseUrl","WebApi","getAllWhitelists","get","setWhitelists","toPromise","then","whitelists","getWhitelist","patternType","length","whitelist","find","l","type","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\services\\whitelist.service.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      09 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Whitelist Service\r\n*  Notes:\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  09 AUG 2023 GM          Created\r\n************************************************************************/\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { isNullOrUndefined } from 'is-what';\r\nimport { take } from 'rxjs';\r\nimport { Whitelist } from '../models/whitelist';\r\nimport { AppConfig, AppConfigService } from './app-config.service';\r\n\r\n@Injectable(\r\n  { providedIn: 'root' }\r\n)\r\nexport class WhitelistService {\r\n\r\n  private apiBaseUrl: string = \"\";\r\n  private whitelists: Whitelist[] | undefined;\r\n\r\n  constructor(private http: HttpClient, private appConfigService: AppConfigService) {\r\n    // extract API base URL from App Config\r\n    let config: AppConfig = [{ \"WebApi\": \"\" }];\r\n    this.appConfigService.AppConfig.pipe(take(1)).subscribe(cfg => {\r\n      config = cfg;\r\n    });\r\n    this.apiBaseUrl = `${config.WebApi}/api/Whitelist/`;\r\n  }\r\n\r\n  /**\r\n  * Get all Whitelists\r\n  * @returns whitelists\r\n  */\r\n  private getAllWhitelists() {\r\n    return this.http.get<Whitelist[]>(this.apiBaseUrl);\r\n  }\r\n\r\n  /**\r\n   * Set Whitelists\r\n   */\r\n  private async setWhitelists(): Promise<void> {\r\n    await this.getAllWhitelists().toPromise().then(whitelists => this.whitelists = whitelists);\r\n  }\r\n\r\n  /**\r\n  * Get Whitelist\r\n  * @returns whitelist\r\n  * @param patternType the whitelist type\r\n  */\r\n  async getWhitelist(patternType: string): Promise<Whitelist> {\r\n\r\n    if (isNullOrUndefined(this.whitelists) || this.whitelists.length == 0)\r\n      await this.setWhitelists();\r\n\r\n    const whitelist: Whitelist = this.whitelists?.find(l => l.type == patternType) ?? new Whitelist();\r\n\r\n    return whitelist;\r\n  }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}