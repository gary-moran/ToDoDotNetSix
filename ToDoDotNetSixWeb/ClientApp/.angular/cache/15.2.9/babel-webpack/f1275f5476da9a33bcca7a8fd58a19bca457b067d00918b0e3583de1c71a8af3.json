{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport { catchError, first, switchMap, take, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/app-config.service\";\nimport * as i2 from \"../services/authentication.service\";\nexport class AuthenticationInterceptorService {\n  constructor(appConfigService, authenticationService) {\n    this.appConfigService = appConfigService;\n    this.authenticationService = authenticationService;\n    this.apiBaseUrl = \"\";\n    this.jwtHelperService = new JwtHelperService();\n    this.appConfigService.AppConfig.pipe(take(1)).subscribe(config => this.apiBaseUrl = config?.WebApi ?? \"\");\n  }\n  /**\r\n   * Add Authentication Token\r\n   * @param request\r\n   * @returns\r\n   */\n  addAuthenticationToken(request) {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${this.authenticationService.getToken()}`\n      }\n    });\n    return request;\n  }\n  /**\r\n   * Intercept\r\n   * @param request\r\n   * @param next\r\n   * @param retry\r\n   * @returns\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  intercept(request, next, retry = 0) {\n    // add auth header with jwt if user is logged in and request is to api url\n    const tokenRequired = !(request.url.toLowerCase().includes(\"/api/account/refreshtoken\") || request.url.toLowerCase().includes(\"/api/account/createtoken\") || request.url.toLowerCase().includes(\"api/config\"));\n    const token = this.authenticationService.getToken();\n    const tokenValid = token && !this.jwtHelperService.isTokenExpired(token);\n    const isApiUrl = request.url.startsWith(this.apiBaseUrl) || request.url.startsWith(\"/api/\");\n    if (tokenValid && tokenRequired && isApiUrl) {\n      return next.handle(this.addAuthenticationToken(request)).pipe(catchError(error => {\n        if (error.status == 401) {\n          this.authenticationService.refreshToken().subscribe(() => {});\n        }\n        return throwError(error);\n      }));\n    } else if (isApiUrl && tokenRequired && token && !tokenValid) {\n      return this.authenticationService.refreshToken().pipe(first(), switchMap(() => {\n        return next.handle(this.addAuthenticationToken(request));\n      }), catchError(error => {\n        if (error.status == 401) {\n          this.authenticationService.refreshToken().subscribe(() => {});\n        }\n        return throwError(error);\n      }));\n    } else {\n      return next.handle(request).pipe(catchError(error => {\n        if (error.status == 401) {\n          if (token) this.authenticationService.refreshToken().subscribe(() => {});else this.authenticationService.newAuthenticationEvent(false);\n        }\n        return throwError(error);\n      }));\n    }\n  }\n}\nAuthenticationInterceptorService.ɵfac = function AuthenticationInterceptorService_Factory(t) {\n  return new (t || AuthenticationInterceptorService)(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.AuthenticationService));\n};\nAuthenticationInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationInterceptorService,\n  factory: AuthenticationInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["JwtHelperService","catchError","first","switchMap","take","throwError","AuthenticationInterceptorService","constructor","appConfigService","authenticationService","jwtHelperService","AppConfig","pipe","subscribe","config","apiBaseUrl","WebApi","addAuthenticationToken","request","clone","setHeaders","Authorization","getToken","intercept","next","retry","tokenRequired","url","toLowerCase","includes","token","tokenValid","isTokenExpired","isApiUrl","startsWith","handle","error","status","refreshToken","newAuthenticationEvent","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\interceptors\\authentication-interceptor.service.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Interceptors\r\n*  Date:      09 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Authentication Interceptor Service\r\n*  Notes:\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  10 AUG 2023 GM          Created\r\n************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { catchError, first, Observable, switchMap, take, throwError } from 'rxjs';\r\nimport { AppConfigService } from '../services/app-config.service';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationInterceptorService {\r\n\r\n  private jwtHelperService: JwtHelperService;\r\n  private apiBaseUrl: string = \"\";\r\n\r\n  constructor(\r\n    private appConfigService: AppConfigService,\r\n    private authenticationService: AuthenticationService\r\n  ) {\r\n\r\n    this.jwtHelperService = new JwtHelperService();\r\n\r\n    this.appConfigService.AppConfig.pipe(take(1)).subscribe(config => this.apiBaseUrl = config?.WebApi ?? \"\");\r\n  }\r\n\r\n  /**\r\n   * Add Authentication Token\r\n   * @param request\r\n   * @returns\r\n   */\r\n  addAuthenticationToken(request) {\r\n    request = request.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${this.authenticationService.getToken()}`\r\n      }\r\n    });\r\n    return request;\r\n  }\r\n\r\n  /**\r\n   * Intercept\r\n   * @param request\r\n   * @param next\r\n   * @param retry\r\n   * @returns\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  intercept(request: HttpRequest<any>, next: HttpHandler, retry: number = 0): Observable<HttpEvent<any>> {\r\n\r\n    // add auth header with jwt if user is logged in and request is to api url\r\n\r\n    const tokenRequired = !(request.url.toLowerCase().includes(\"/api/account/refreshtoken\") || request.url.toLowerCase().includes(\"/api/account/createtoken\") || request.url.toLowerCase().includes(\"api/config\"));\r\n    const token = this.authenticationService.getToken();\r\n    const tokenValid = token && !this.jwtHelperService.isTokenExpired(token);\r\n\r\n    const isApiUrl = request.url.startsWith(this.apiBaseUrl) || request.url.startsWith(\"/api/\");\r\n    if (tokenValid && tokenRequired && isApiUrl) {\r\n      return next.handle(this.addAuthenticationToken(request)).pipe(\r\n        catchError((error: HttpErrorResponse) => {\r\n          if (error.status == 401) {\r\n            this.authenticationService.refreshToken().subscribe(() => { });\r\n          }\r\n          return throwError(error);\r\n        }));\r\n\r\n    } else if (isApiUrl && tokenRequired && token && !tokenValid) {\r\n      return this.authenticationService.refreshToken().pipe(first(),\r\n        switchMap(() => {\r\n          return next.handle(this.addAuthenticationToken(request));\r\n        }),\r\n        catchError((error: HttpErrorResponse) => {\r\n          if (error.status == 401) {\r\n            this.authenticationService.refreshToken().subscribe(() => { });\r\n          }\r\n          return throwError(error);\r\n        }));\r\n    } else {\r\n      return next.handle(request).pipe(\r\n        catchError((error: HttpErrorResponse) => {\r\n          if (error.status == 401) {\r\n            if (token)\r\n              this.authenticationService.refreshToken().subscribe(() => { });\r\n            else\r\n              this.authenticationService.newAuthenticationEvent(false);\r\n          }\r\n          return throwError(error);\r\n        }));\r\n    }\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}