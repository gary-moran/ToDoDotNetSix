{"ast":null,"code":"import { shareReplay, take } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppConfigHelper {\n  constructor(config) {\n    if (config) {\n      this._config = config;\n    } else {\n      this._config = {};\n    }\n  }\n  cloneAppConfig() {\n    const tmpConfig = {};\n    Object.keys(this._config).forEach(key => {\n      tmpConfig[key] = this._config[key];\n    });\n    return tmpConfig;\n  }\n}\nexport class AppConfigService {\n  constructor(httpClient, baseUrl) {\n    this.httpClient = httpClient;\n    this.configSubject = new Subject();\n    this.AppConfig = this.configSubject.pipe(shareReplay(1));\n    this.baseUrl = baseUrl;\n  }\n  load() {\n    return new Promise((resolve, reject) => {\n      const webApi = `${this.baseUrl}api/config`;\n      if (!this.config) {\n        this.httpClient.get(webApi).pipe(take(1)).subscribe(config => {\n          this.config = new AppConfigHelper(config);\n          this.configSubject.next(this.config.cloneAppConfig());\n          resolve(true);\n        }, error => {\n          reject(error);\n        });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n}\nAppConfigService.ɵfac = function AppConfigService_Factory(t) {\n  return new (t || AppConfigService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nAppConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppConfigService,\n  factory: AppConfigService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAkBA,SAASA,WAAW,EAAEC,IAAI,QAAQ,gBAAgB;AAClD,SAAqBC,OAAO,QAAQ,MAAM;;;AAI1C,OAAM,MAAOC,eAAe;EAG1BC,YAAmBC,MAAkB;IACnC,IAAIA,MAAM,EAAE;MACV,IAAI,CAACC,OAAO,GAAGD,MAAM;KACtB,MAAM;MACL,IAAI,CAACC,OAAO,GAAG,EAAE;;EAErB;EAEOC,cAAc;IACnB,MAAMC,SAAS,GAAc,EAAE;IAC/BC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACJ,OAAO,CAAC,CAACK,OAAO,CAAEC,GAAG,IAAI;MACxCJ,SAAS,CAACI,GAAG,CAAC,GAAG,IAAI,CAACN,OAAO,CAACM,GAAG,CAAC;IACpC,CAAC,CAAC;IACF,OAAOJ,SAAS;EAClB;;AAMF,OAAM,MAAOK,gBAAgB;EAO3BT,YAAoBU,UAAsB,EAAsBC,OAAe;IAA3D,eAAU,GAAVD,UAAU;IAHtB,kBAAa,GAAuB,IAAIZ,OAAO,EAAa;IAC7D,cAAS,GAA0B,IAAI,CAACc,aAAa,CAACC,IAAI,CAACjB,WAAW,CAAC,CAAC,CAAC,CAAC;IAEE,IAAI,CAACe,OAAO,GAAGA,OAAO;EAAE;EAEpGG,IAAI;IACT,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,MAAMC,MAAM,GAAW,GAAG,IAAI,CAACP,OAAO,YAAY;MAElD,IAAI,CAAC,IAAI,CAACV,MAAM,EAAE;QAChB,IAAI,CAACS,UAAU,CAACS,GAAG,CAAYD,MAAM,CAAC,CAACL,IAAI,CAAChB,IAAI,CAAC,CAAC,CAAC,CAAC,CAACuB,SAAS,CAACnB,MAAM,IAAG;UACpE,IAAI,CAACA,MAAM,GAAG,IAAIF,eAAe,CAACE,MAAM,CAAC;UACzC,IAAI,CAACW,aAAa,CAACS,IAAI,CAAC,IAAI,CAACpB,MAAM,CAACE,cAAc,EAAE,CAAC;UACrDa,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,EACEM,KAAK,IAAI;UACRL,MAAM,CAACK,KAAK,CAAC;QACf,CAAC,CACF;OACJ,MAAM;QACLN,OAAO,CAAC,IAAI,CAAC;;IAGjB,CAAC,CAAC;EACJ;;AA5BWP,gBAAgB;mBAAhBA,gBAAgB,0CAOyB,UAAU;AAAA;AAPnDA,gBAAgB;SAAhBA,gBAAgB;EAAAc,SAAhBd,gBAAgB;EAAAe,YAFf;AAAM","names":["shareReplay","take","Subject","AppConfigHelper","constructor","config","_config","cloneAppConfig","tmpConfig","Object","keys","forEach","key","AppConfigService","httpClient","baseUrl","configSubject","pipe","load","Promise","resolve","reject","webApi","get","subscribe","next","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\services\\app-config.service.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      25 JUL 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  App Config Service\r\n*  Notes:     \r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  25 JUL 2023 GM          Created\r\n************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { shareReplay, take } from 'rxjs/operators';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nexport declare type AppConfig = { [key: string]: any };\r\n\r\nexport class AppConfigHelper {\r\n  private _config: AppConfig;\r\n\r\n  public constructor(config?: AppConfig) {\r\n    if (config) {\r\n      this._config = config;\r\n    } else {\r\n      this._config = {};\r\n    }\r\n  }\r\n\r\n  public cloneAppConfig(): AppConfig {\r\n    const tmpConfig: AppConfig = {};\r\n    Object.keys(this._config).forEach((key) => {\r\n      tmpConfig[key] = this._config[key];\r\n    });\r\n    return tmpConfig;\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppConfigService {\r\n\r\n  private baseUrl: string;\r\n  private config: AppConfigHelper | undefined;\r\n  private configSubject: Subject<AppConfig> = new Subject<AppConfig>();\r\n  public AppConfig: Observable<AppConfig> = this.configSubject.pipe(shareReplay(1));\r\n\r\n  constructor(private httpClient: HttpClient, @Inject('BASE_URL') baseUrl: string) { this.baseUrl = baseUrl; }\r\n\r\n  public load() {\r\n    return new Promise((resolve, reject) => {\r\n      const webApi: string = `${this.baseUrl}api/config`;\r\n\r\n      if (!this.config) {\r\n        this.httpClient.get<AppConfig>(webApi).pipe(take(1)).subscribe(config => {\r\n            this.config = new AppConfigHelper(config);\r\n            this.configSubject.next(this.config.cloneAppConfig());\r\n            resolve(true);\r\n          },\r\n            (error) => {\r\n              reject(error);\r\n            }\r\n          );\r\n      } else {\r\n        resolve(true);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}