{"ast":null,"code":"/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Validators\r\n*  Date:      09 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Text Validators\r\n*  Notes:\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description\r\n*  ----------- ----------  ---------------------------------------------\r\n*  09 AUG 2023 GM          Created\r\n************************************************************************/\nexport class TextValidators {\n  /**\r\n  * Minimum Length Validator\r\n  * @param length\r\n  */\n  static minLengthValidator(length) {\n    return control => TextValidators.minLengthValidatorFn(control, length);\n  }\n  /**\r\n  * Minimum Length Validator Function\r\n  * @param control Control\r\n  * @param length\r\n  */\n  static minLengthValidatorFn(control, length) {\n    let errors = null;\n    // Validate input    \n    if (control.value !== null) {\n      if (control.value !== undefined) {\n        if (control.value != \"\") {\n          if (!this.validateMinLength(control.value.toString(), length)) {\n            errors = {\n              \"minLengthValidator-MSG\": `A minimum of ${length} characters is required`\n            };\n          }\n        }\n      }\n    }\n    return errors;\n  }\n  /**\r\n   * Validate Minimum Length\r\n   * @param value\r\n   * @param length\r\n   */\n  static validateMinLength(value, length) {\n    return value.length >= length;\n  }\n  /**\r\n  * Match Validator\r\n  * @param inputName\r\n  * @param matchInputName\r\n  * @param isPassword\r\n  */\n  static matchValidator(inputName, matchInputName, isPassword = false) {\n    return control => TextValidators.matchValidatorFn(control, inputName, matchInputName, isPassword);\n  }\n  /**\r\n  * Match Validator Function\r\n  * @param control Control\r\n  * @param inputName\r\n  * @param matchInputName\r\n  * @param isPassword\r\n  */\n  static matchValidatorFn(control, inputName, matchInputName, isPassword = false) {\n    let errors = null;\n    const errorMessage = isPassword ? \"Passwords do not match\" : \"Values do not match\";\n    const inputControl = control?.get(inputName) ?? undefined;\n    const matchControl = control?.get(matchInputName) ?? undefined;\n    // Validate input    \n    if (inputControl && matchControl) {\n      if (inputControl.value != \"\" && matchControl.value != \"\") {\n        if (!this.validateMatch(inputControl.value.toString(), matchControl.value.toString())) {\n          errors = {\n            \"matchValidator-MSG\": errorMessage\n          };\n        }\n      }\n    }\n    return errors;\n  }\n  /**\r\n   * Validate Matching Values\r\n   * @param value\r\n   * @param match\r\n   */\n  static validateMatch(value, match) {\n    return value === match;\n  }\n  /**\r\n  * Email Validator\r\n  */\n  static emailValidator() {\n    return control => TextValidators.emailValidatorFn(control);\n  }\n  /**\r\n  * Email Validator Function\r\n  * @param control\r\n  */\n  static emailValidatorFn(control) {\n    let errors = null;\n    // Validate input    \n    if (control.value !== null) {\n      if (control.value !== undefined) {\n        if (control.value != \"\") {\n          if (!this.validateEmail(control.value)) {\n            errors = {\n              \"emailValidator-MSG\": \"INVALID_EMAIL\"\n            };\n          }\n        }\n      }\n    }\n    return errors;\n  }\n  /**\r\n   * Validate Email\r\n   * @param email\r\n   */\n  static validateEmail(email) {\n    /*\r\n     * for discussions on email regex expressions see: https://www.regular-expressions.info/email.html\r\n     */\n    const regex = /^[A-Z0-9][A-Z0-9._%+-]{0,63}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/igm;\n    if (email.match(regex)) return true;else return false;\n  }\n  /**\r\n  * Whitelist Validator\r\n  * @param whitelist\r\n  */\n  static whitelistValidator(whitelist) {\n    return control => TextValidators.whitelistValidatorFn(control, whitelist);\n  }\n  /**\r\n  * Whitelist Validator Function\r\n  * @param control\r\n  * @param whitelist\r\n  */\n  static whitelistValidatorFn(control, whitelist) {\n    let errors = null;\n    // Validate input    \n    if (control.value !== null) {\n      if (control.value !== undefined) {\n        if (control.value != \"\") {\n          if (!this.validateWhitelist(control.value.toString(), whitelist)) {\n            errors = {\n              \"whitelistValidator-MSG\": whitelist.error\n            };\n          }\n        }\n      }\n    }\n    return errors;\n  }\n  /**\r\n   * Validate Whitelist\r\n   * @param value\r\n   * @param whitelist\r\n   */\n  static validateWhitelist(value, whitelist) {\n    const regex = new RegExp(whitelist.pattern);\n    if (value.match(regex)) return true;else return false;\n  }\n}","map":{"version":3,"mappings":"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","names":["TextValidators","minLengthValidator","length","control","minLengthValidatorFn","errors","value","undefined","validateMinLength","toString","matchValidator","inputName","matchInputName","isPassword","matchValidatorFn","errorMessage","inputControl","get","matchControl","validateMatch","match","emailValidator","emailValidatorFn","validateEmail","email","regex","whitelistValidator","whitelist","whitelistValidatorFn","validateWhitelist","error","RegExp","pattern"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\validators\\text.validator.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Validators\r\n*  Date:      09 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Text Validators\r\n*  Notes:     \r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  09 AUG 2023 GM          Created\r\n************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\r\nimport { Whitelist } from '../models/whitelist';\r\n\r\nexport class TextValidators {\r\n\r\n  /**\r\n  * Minimum Length Validator\r\n  * @param length\r\n  */\r\n  static minLengthValidator(length: number): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => TextValidators.minLengthValidatorFn(control, length);\r\n  }\r\n\r\n  /**\r\n  * Minimum Length Validator Function\r\n  * @param control Control\r\n  * @param length\r\n  */\r\n  static minLengthValidatorFn(control: AbstractControl, length: number): { [key: string]: any } {\r\n\r\n    let errors: any = null;\r\n\r\n    // Validate input    \r\n    if (control.value !== null) {\r\n      if (control.value !== undefined) {\r\n        if (control.value != \"\") {\r\n          if (!this.validateMinLength(control.value.toString(), length)) {\r\n            errors = { \"minLengthValidator-MSG\": `A minimum of ${length} characters is required` };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  /**\r\n   * Validate Minimum Length\r\n   * @param value\r\n   * @param length\r\n   */\r\n  private static validateMinLength(value: string, length: number): boolean {\r\n\r\n    return value.length >= length;\r\n\r\n  }\r\n\r\n  /**\r\n  * Match Validator\r\n  * @param inputName\r\n  * @param matchInputName\r\n  * @param isPassword\r\n  */\r\n  static matchValidator(inputName: string, matchInputName: string, isPassword: boolean = false): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => TextValidators.matchValidatorFn(control, inputName, matchInputName, isPassword);\r\n  }\r\n\r\n  /**\r\n  * Match Validator Function\r\n  * @param control Control\r\n  * @param inputName\r\n  * @param matchInputName\r\n  * @param isPassword\r\n  */\r\n  static matchValidatorFn(control: AbstractControl, inputName: string, matchInputName: string, isPassword: boolean = false): { [key: string]: any } {\r\n\r\n    let errors: any = null;\r\n    const errorMessage = isPassword ? \"Passwords do not match\" : \"Values do not match\";\r\n\r\n    const inputControl: AbstractControl | undefined = control?.get(inputName) ?? undefined;\r\n    const matchControl: AbstractControl | undefined = control?.get(matchInputName) ?? undefined;\r\n\r\n    // Validate input    \r\n    if (inputControl && matchControl) {\r\n      if (inputControl.value != \"\" && matchControl.value != \"\") {\r\n        if (!this.validateMatch(inputControl.value.toString(), matchControl.value.toString())) {\r\n          errors = { \"matchValidator-MSG\": errorMessage };\r\n        }\r\n      }\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  /**\r\n   * Validate Matching Values\r\n   * @param value\r\n   * @param match\r\n   */\r\n  private static validateMatch(value: string, match: string): boolean {\r\n\r\n    return value === match;\r\n\r\n  }\r\n\r\n  /**\r\n  * Email Validator\r\n  */\r\n  static emailValidator(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => TextValidators.emailValidatorFn(control);\r\n  }\r\n\r\n  /**\r\n  * Email Validator Function\r\n  * @param control\r\n  */\r\n  static emailValidatorFn(control: AbstractControl): { [key: string]: any } {\r\n\r\n    let errors: any = null;\r\n    // Validate input    \r\n    if (control.value !== null) {\r\n      if (control.value !== undefined) {\r\n        if (control.value != \"\") {\r\n          if (!this.validateEmail(control.value)) {\r\n            errors = { \"emailValidator-MSG\": \"INVALID_EMAIL\" };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  /**\r\n   * Validate Email\r\n   * @param email\r\n   */\r\n  static validateEmail(email: string): boolean {\r\n\r\n    /*\r\n     * for discussions on email regex expressions see: https://www.regular-expressions.info/email.html\r\n     */\r\n    const regex = /^[A-Z0-9][A-Z0-9._%+-]{0,63}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/igm;\r\n    if (email.match(regex))\r\n      return true;\r\n    else\r\n      return false;\r\n  }\r\n\r\n\r\n  /**\r\n  * Whitelist Validator\r\n  * @param whitelist\r\n  */\r\n  static whitelistValidator(whitelist: Whitelist): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => TextValidators.whitelistValidatorFn(control, whitelist);\r\n  }\r\n\r\n  /**\r\n  * Whitelist Validator Function\r\n  * @param control\r\n  * @param whitelist\r\n  */\r\n  static whitelistValidatorFn(control: AbstractControl, whitelist: Whitelist): { [key: string]: any } {\r\n\r\n    let errors: any = null;\r\n\r\n    // Validate input    \r\n    if (control.value !== null) {\r\n      if (control.value !== undefined) {\r\n        if (control.value != \"\") {\r\n          if (!this.validateWhitelist(control.value.toString(), whitelist)) {\r\n            errors = { \"whitelistValidator-MSG\": whitelist.error };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  /**\r\n   * Validate Whitelist\r\n   * @param value\r\n   * @param whitelist\r\n   */\r\n  private static validateWhitelist(value: string, whitelist: Whitelist): boolean {\r\n\r\n    const regex = new RegExp(whitelist.pattern);    \r\n    if (value.match(regex))\r\n      return true;\r\n    else\r\n      return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}