{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport { catchError, first, switchMap, take, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/app-config.service\";\nimport * as i2 from \"../services/authentication.service\";\nexport let AuthenticationInterceptorService = /*#__PURE__*/(() => {\n  class AuthenticationInterceptorService {\n    constructor(appConfigService, authenticationService) {\n      this.appConfigService = appConfigService;\n      this.authenticationService = authenticationService;\n      this.apiBaseUrl = \"\";\n      this.jwtHelperService = new JwtHelperService();\n      this.appConfigService.AppConfig.pipe(take(1)).subscribe(config => this.apiBaseUrl = config?.WebApi ?? \"\");\n    }\n    /**\r\n     * Add Authentication Token\r\n     * @param request\r\n     * @returns\r\n     */\n    addAuthenticationToken(request) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.authenticationService.getToken()}`\n        }\n      });\n      return request;\n    }\n    /**\r\n     * Intercept\r\n     * @param request\r\n     * @param next\r\n     * @param retry\r\n     * @returns\r\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    intercept(request, next, retry = 0) {\n      // add auth header with jwt if user is logged in and request is to api url\n      const tokenRequired = !(request.url.toLowerCase().includes(\"/api/account/refreshtoken\") || request.url.toLowerCase().includes(\"/api/account/createtoken\") || request.url.toLowerCase().includes(\"api/config\"));\n      const token = this.authenticationService.getToken();\n      const tokenValid = token && !this.jwtHelperService.isTokenExpired(token);\n      const isApiUrl = request.url.startsWith(this.apiBaseUrl) || request.url.startsWith(\"/api/\");\n      if (tokenValid && tokenRequired && isApiUrl) {\n        return next.handle(this.addAuthenticationToken(request)).pipe(catchError(error => {\n          if (error.status == 401) {\n            this.authenticationService.refreshToken().subscribe(() => {});\n          }\n          return throwError(error);\n        }));\n      } else if (isApiUrl && tokenRequired && token && !tokenValid) {\n        return this.authenticationService.refreshToken().pipe(first(), switchMap(() => {\n          return next.handle(this.addAuthenticationToken(request));\n        }), catchError(error => {\n          if (error.status == 401) {\n            this.authenticationService.refreshToken().subscribe(() => {});\n          }\n          return throwError(error);\n        }));\n      } else {\n        return next.handle(request).pipe(catchError(error => {\n          if (error.status == 401) {\n            if (token) this.authenticationService.refreshToken().subscribe(() => {});else this.authenticationService.newAuthenticationEvent(false);\n          }\n          return throwError(error);\n        }));\n      }\n    }\n  }\n  AuthenticationInterceptorService.ɵfac = function AuthenticationInterceptorService_Factory(t) {\n    return new (t || AuthenticationInterceptorService)(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.AuthenticationService));\n  };\n  AuthenticationInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationInterceptorService,\n    factory: AuthenticationInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}