{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Todo\r\n*  Date:      15 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Register\r\n*  Notes:\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description\r\n*  ----------- ----------  ---------------------------------------------\r\n*  15 AUG 2023 GM          Created\r\n************************************************************************/\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { Whitelist } from '../../shared/models/whitelist';\nimport { TextValidators } from '../../shared/validators/text.validator';\nimport { Login } from '../../shared/models/login';\nimport { take } from 'rxjs';\nimport { Message } from '../../shared/models/message';\nimport { MessageType } from '../../shared/models/message-type.enum';\nlet RegisterComponent = class RegisterComponent {\n  constructor(authenticationService, router, formBuilder, whitelistService, messageService, viewModelDataservice, usernameValidator) {\n    this.authenticationService = authenticationService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.whitelistService = whitelistService;\n    this.messageService = messageService;\n    this.viewModelDataservice = viewModelDataservice;\n    this.usernameValidator = usernameValidator;\n    this.elementHasFocus = ElementFocus.elementHasFocus;\n    this.isControlInvalid = ControlValidation.isInvalid;\n    this.nameWhitelist = new Whitelist();\n    this.descWhitelist = new Whitelist();\n    this.usernameWhitelist = new Whitelist();\n    this.passwordWhitelist = new Whitelist();\n    this.isProcessing = false;\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.nameWhitelist = yield _this.whitelistService.getWhitelist(\"NAME\");\n      _this.descWhitelist = yield _this.whitelistService.getWhitelist(\"DESC\");\n      _this.usernameWhitelist = yield _this.whitelistService.getWhitelist(\"USERNAME\");\n      _this.passwordWhitelist = yield _this.whitelistService.getWhitelist(\"PASSWORD\");\n      _this.initForm();\n    })();\n  }\n  /**\r\n   * Initialise Form\r\n   */\n  initForm() {\n    this.registerForm = this.formBuilder.group({\n      firstname: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)],\n        updateOn: 'blur'\n      }],\n      lastname: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)],\n        updateOn: 'blur'\n      }],\n      email: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.descWhitelist), TextValidators.minLengthValidator(5), TextValidators.emailValidator()],\n        updateOn: 'blur'\n      }],\n      username: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.usernameWhitelist), TextValidators.minLengthValidator(4), UsernameValidator],\n        updateOn: 'blur'\n      }],\n      passwordGroup: this.formBuilder.group({\n        password: ['', {\n          validators: [Validators.required, TextValidators.whitelistValidator(this.passwordWhitelist), TextValidators.minLengthValidator(8)],\n          updateOn: 'blur'\n        }],\n        confirmPassword: ['', {\n          validators: [Validators.required],\n          updateOn: 'blur'\n        }]\n      }, {\n        validator: TextValidators.matchValidator(\"password\", \"confirmPassword\", true)\n      })\n    });\n  }\n  /**\r\n   * Register\r\n   */\n  onRegister() {\n    this.isProcessing = true;\n    const login = new Login(this.registerForm.value);\n    login.password = this.registerForm?.get(\"passwordGroup.password\")?.value ?? \"\";\n    this.viewModelDataservice.actionViewModel(login, \"account\", \"New\").pipe(take(1)).subscribe(() => {\n      this.messageService.sendMessage(new Message(\"nav-menu\", \"User successfully created.\", MessageType.Info));\n      this.router.navigate([\"/login\"]);\n      this.isProcessing = false;\n    }, error => {\n      if (error.status === 400) this.messageService.sendMessage(new Message(\"nav-menu\", \"Unable to create user.\", MessageType.Danger));else this.messageService.sendErrorMessage(error);\n      this.isProcessing = false;\n    });\n  }\n  /**\r\n   * Cancel\r\n   */\n  onCancel() {\n    this.isProcessing = true;\n    this.registerForm.patchValue(new Login());\n    this.registerForm.get(\"passwordGroup\")?.patchValue({\n      \"password\": \"\",\n      \"confirmPassword\": \"\"\n    });\n    this.isProcessing = false;\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html'\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","ControlValidation","ElementFocus","Whitelist","TextValidators","Login","take","Message","MessageType","RegisterComponent","constructor","authenticationService","router","formBuilder","whitelistService","messageService","viewModelDataservice","usernameValidator","elementHasFocus","isInvalid","ngOnInit","nameWhitelist","getWhitelist","descWhitelist","usernameWhitelist","passwordWhitelist","initForm","registerForm","group","firstname","validators","required","whitelistValidator","updateOn","lastname","email","minLengthValidator","emailValidator","username","UsernameValidator","passwordGroup","password","confirmPassword","validator","matchValidator","onRegister","isProcessing","login","value","get","actionViewModel","pipe","subscribe","sendMessage","Info","navigate","error","status","Danger","sendErrorMessage","onCancel","patchValue","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\register\\register.component.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Todo\r\n*  Date:      15 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Register\r\n*  Notes:     \r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  15 AUG 2023 GM          Created\r\n************************************************************************/\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, AsyncValidatorFn, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { MessageService } from '../../shared/services/message.service';\r\nimport { ControlValidation } from '../../shared/utilities/control-validation';\r\nimport { ElementFocus } from '../../shared/utilities/element-focus';\r\nimport { Whitelist } from '../../shared/models/whitelist';\r\nimport { WhitelistService } from '../../shared/services/whitelist.service';\r\nimport { TextValidators } from '../../shared/validators/text.validator';\r\nimport { AuthenticationService } from '../../shared/services/authentication.service';\r\nimport { Login } from '../../shared/models/login';\r\nimport { Router } from '@angular/router';\r\nimport { ViewModelDataService } from '../../shared/services/view-model-data.service';\r\nimport { map, Observable, take } from 'rxjs';\r\nimport { Message } from '../../shared/models/message';\r\nimport { MessageType } from '../../shared/models/message-type.enum';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Generic } from '../../shared/models/generic';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html'\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  elementHasFocus = ElementFocus.elementHasFocus;\r\n  isControlInvalid = ControlValidation.isInvalid;\r\n\r\n  nameWhitelist: Whitelist = new Whitelist();\r\n  descWhitelist: Whitelist = new Whitelist();\r\n  usernameWhitelist: Whitelist = new Whitelist();\r\n  passwordWhitelist: Whitelist = new Whitelist();\r\n\r\n  isProcessing: boolean = false;\r\n  registerForm!: FormGroup;\r\n\r\n  constructor(\r\n    private authenticationService: AuthenticationService, private router: Router, private formBuilder: FormBuilder, private whitelistService: WhitelistService,\r\n    private messageService: MessageService, private viewModelDataservice: ViewModelDataService, private usernameValidator: UsernameValidator\r\n  ) { }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.nameWhitelist = await this.whitelistService.getWhitelist(\"NAME\");\r\n    this.descWhitelist = await this.whitelistService.getWhitelist(\"DESC\");\r\n    this.usernameWhitelist = await this.whitelistService.getWhitelist(\"USERNAME\");\r\n    this.passwordWhitelist = await this.whitelistService.getWhitelist(\"PASSWORD\");\r\n    this.initForm();\r\n  }\r\n\r\n  /**\r\n   * Initialise Form\r\n   */\r\n  initForm() {\r\n    this.registerForm = this.formBuilder.group({\r\n      firstname: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)], updateOn: 'blur' }],\r\n      lastname: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)], updateOn: 'blur' }],\r\n      email: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.descWhitelist), TextValidators.minLengthValidator(5), TextValidators.emailValidator()], updateOn: 'blur' }],\r\n      username: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.usernameWhitelist), TextValidators.minLengthValidator(4), UsernameValidator], updateOn: 'blur' }],\r\n      passwordGroup: this.formBuilder.group({\r\n        password: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.passwordWhitelist), TextValidators.minLengthValidator(8)], updateOn: 'blur' }],\r\n        confirmPassword: ['', { validators: [Validators.required], updateOn: 'blur' }],\r\n      }, { validator: TextValidators.matchValidator(\"password\", \"confirmPassword\", true) }),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register\r\n   */\r\n  onRegister() {\r\n    this.isProcessing = true;\r\n    const login: Login = new Login(this.registerForm.value);\r\n    login.password = (this.registerForm?.get(\"passwordGroup.password\")?.value ?? \"\");\r\n    this.viewModelDataservice.actionViewModel<Login>(login, \"account\", \"New\").pipe(take(1)).subscribe(\r\n      () => {\r\n        this.messageService.sendMessage(new Message(\"nav-menu\", \"User successfully created.\", MessageType.Info));\r\n        this.router.navigate([\"/login\"]);\r\n        this.isProcessing = false;\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        if (error.status === 400)\r\n          this.messageService.sendMessage(new Message(\"nav-menu\", \"Unable to create user.\", MessageType.Danger));\r\n        else\r\n          this.messageService.sendErrorMessage(error);\r\n        this.isProcessing = false;\r\n        });\r\n  }\r\n\r\n  /**\r\n   * Cancel\r\n   */\r\n  onCancel() {\r\n    this.isProcessing = true;\r\n    this.registerForm.patchValue(new Login());\r\n    this.registerForm.get(\"passwordGroup\")?.patchValue({\"password\": \"\", \"confirmPassword\": \"\"});\r\n    this.isProcessing = false;\r\n  }\r\n\r\n  ///**\r\n  //* Username Validator\r\n  //* @param control\r\n  //* @returns\r\n  //*/\r\n  //// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  //usernameValidator(control: AbstractControl) {\r\n    \r\n  //  //let isValid: boolean = true;\r\n\r\n  //  return this.viewModelDataservice.actionViewModel<Generic>(new Generic(control.value), \"account\", \"CheckUsername\").pipe(\r\n  //    map((response: Generic) => response.value.toLowerCase() === \"true\" ? { \"usernameValidator-MSG\": \"the input username is not available\" } : null)\r\n  //  )\r\n\r\n\r\n  //  //await this.viewModelDataservice.actionViewModel<Generic>(username, \"account\", \"CheckUsername\")\r\n  //  //  .pipe(take(1)).subscribe((response: Generic) => isValid = (response.value.toLowerCase() === \"true\"));\r\n\r\n  //  //if (isValid)\r\n  //  //  return null;\r\n  //  //else\r\n  //  //  return { \"usernameValidator-MSG\": \"the input username is not available\" };\r\n  //}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}