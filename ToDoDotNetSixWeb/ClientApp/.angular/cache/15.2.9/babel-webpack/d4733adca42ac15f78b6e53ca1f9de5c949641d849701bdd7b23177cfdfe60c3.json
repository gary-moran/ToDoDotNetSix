{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./log-publishers.service\";\nexport var LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"All\"] = 0] = \"All\";\n  LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n  LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n  LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n  LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n  LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n  LogLevel[LogLevel[\"Off\"] = 6] = \"Off\";\n})(LogLevel || (LogLevel = {}));\n/**\r\n * Log Entry Class.\r\n */\nexport class LogEntry {\n  constructor() {\n    // Public Properties\n    this.entryDate = new Date();\n    this.message = '';\n    this.level = LogLevel.Debug;\n    this.extraInfo = [];\n    this.logWithDate = true;\n  }\n  /**\r\n   * Build Log string.\r\n   */\n  buildLogString() {\n    let value = '';\n    if (this.logWithDate) {\n      value = new Date() + ' - ';\n    }\n    value += 'Type: ' + LogLevel[this.level];\n    value += ' - Message: ' + this.message;\n    if (this.extraInfo.length) {\n      value += ' - Extra Info: ' + this.formatParams(this.extraInfo);\n    }\n    return value;\n  }\n  /**\r\n   * Format Log Entry Params.\r\n   * @param params Params\r\n   */\n  formatParams(params) {\n    let returnValue = params.join(',');\n    // Is there at least one object in the array?\n    if (params.some(p => typeof p == 'object')) {\n      returnValue = '';\n      // Build comma-delimited string\n      for (let item of params) {\n        returnValue += JSON.stringify(item) + ',';\n      }\n    }\n    return returnValue;\n  }\n}\nexport class LogService {\n  constructor(publishersService) {\n    this.publishersService = publishersService;\n    this.level = LogLevel.All;\n    this.logWithDate = true;\n    // Set publishers\n    this.publishers = this.publishersService.publishers;\n  }\n  /**\r\n   * Debug.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\n  debug(msg, ...optionalParams) {\n    this.writeToLog(msg, LogLevel.Debug, optionalParams);\n  }\n  /**\r\n   * Info.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\n  info(msg, ...optionalParams) {\n    this.writeToLog(msg, LogLevel.Info, optionalParams);\n  }\n  /**\r\n   * Warn.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\n  warn(msg, ...optionalParams) {\n    this.writeToLog(msg, LogLevel.Warn, optionalParams);\n  }\n  /**\r\n   * Error.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\n  error(msg, ...optionalParams) {\n    this.writeToLog(msg, LogLevel.Error, optionalParams);\n  }\n  /**\r\n   * Fatal.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\n  fatal(msg, ...optionalParams) {\n    this.writeToLog(msg, LogLevel.Fatal, optionalParams);\n  }\n  /**\r\n   * Log.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\n  log(msg, ...optionalParams) {\n    this.writeToLog(msg, LogLevel.All, optionalParams);\n  }\n  /**\r\n   * Clear.\r\n   */\n  clear() {\n    for (let logger of this.publishers) {\n      logger.clear().subscribe(response => {});\n    }\n  }\n  // Private methods\n  /**\r\n   * Should log.\r\n   * @param level Log Level\r\n   */\n  shouldLog(level) {\n    let returnValue = false;\n    if (level >= this.level && level !== LogLevel.Off || this.level === LogLevel.All) {\n      returnValue = true;\n    }\n    return returnValue;\n  }\n  /**\r\n   * Write to log.\r\n   * @param msg Message\r\n   * @param level Level\r\n   * @param params Params\r\n   */\n  writeToLog(msg, level, params) {\n    if (this.shouldLog(level)) {\n      // Declare variables\n      let entry = new LogEntry();\n      // Build Log Entry\n      entry.message = msg;\n      entry.level = level;\n      entry.extraInfo = params;\n      entry.logWithDate = this.logWithDate;\n      for (let logger of this.publishers) {\n        logger.log(entry).subscribe(response => {});\n      }\n    }\n  }\n}\nLogService.ɵfac = function LogService_Factory(t) {\n  return new (t || LogService)(i0.ɵɵinject(i1.LogPublishersService));\n};\nLogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LogService,\n  factory: LogService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["LogLevel","LogEntry","constructor","Date","Debug","buildLogString","value","logWithDate","level","message","extraInfo","length","formatParams","params","returnValue","join","some","p","item","JSON","stringify","LogService","publishersService","All","publishers","debug","msg","optionalParams","writeToLog","info","Info","warn","Warn","error","Error","fatal","Fatal","log","clear","logger","subscribe","response","shouldLog","Off","entry","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\services\\log-service\\log.service.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      02-AUG-2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Log Service\r\n*  Notes:     from this original source:\r\n*   https://www.codemag.com/Article/1711021/Logging-in-Angular-Applications\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  02-AUG-2023 GM          Created\r\n************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable prefer-const */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { LogPublishersService } from './log-publishers.service';\r\nimport { LogPublisher } from './log-publishers';\r\n\r\nexport enum LogLevel {\r\n  All = 0,\r\n  Debug = 1,\r\n  Info = 2,\r\n  Warn = 3,\r\n  Error = 4,\r\n  Fatal = 5,\r\n  Off = 6\r\n}\r\n\r\n/**\r\n * Log Entry Class.\r\n */\r\nexport class LogEntry {\r\n  // Public Properties\r\n  entryDate: Date = new Date();\r\n  message: string = '';\r\n  level: LogLevel = LogLevel.Debug;\r\n  extraInfo: any[] = [];\r\n  logWithDate: boolean = true;\r\n\r\n  /**\r\n   * Build Log string.\r\n   */\r\n  buildLogString(): string {\r\n    let value: string = '';\r\n\r\n    if (this.logWithDate) {\r\n      value = new Date() + ' - ';\r\n    }\r\n    value += 'Type: ' + LogLevel[this.level];\r\n    value += ' - Message: ' + this.message;\r\n    if (this.extraInfo.length) {\r\n      value += ' - Extra Info: '\r\n        + this.formatParams(this.extraInfo);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Format Log Entry Params.\r\n   * @param params Params\r\n   */\r\n  private formatParams(params: any[]): string {\r\n    let returnValue: string = params.join(',');\r\n\r\n    // Is there at least one object in the array?\r\n    if (params.some(p => typeof p == 'object')) {\r\n      returnValue = '';\r\n      // Build comma-delimited string\r\n      for (let item of params) {\r\n        returnValue += JSON.stringify(item) + ',';\r\n      }\r\n    }\r\n\r\n    return returnValue;\r\n  }\r\n}\r\n\r\n@Injectable(\r\n  { providedIn: 'root' }\r\n)\r\nexport class LogService {\r\n  constructor(private publishersService: LogPublishersService) {\r\n    // Set publishers\r\n    this.publishers = this.publishersService.publishers;\r\n  }\r\n\r\n  // Public Properties\r\n  publishers: LogPublisher[];\r\n  level: LogLevel = LogLevel.All;\r\n  logWithDate: boolean = true;\r\n\r\n  /**\r\n   * Debug.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\r\n  debug(msg: string, ...optionalParams: any[]) {\r\n    this.writeToLog(msg, LogLevel.Debug, optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Info.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\r\n  info(msg: string, ...optionalParams: any[]) {\r\n    this.writeToLog(msg, LogLevel.Info, optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Warn.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\r\n  warn(msg: string, ...optionalParams: any[]) {\r\n    this.writeToLog(msg, LogLevel.Warn, optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Error.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\r\n  error(msg: string, ...optionalParams: any[]) {\r\n    this.writeToLog(msg, LogLevel.Error, optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Fatal.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\r\n  fatal(msg: string, ...optionalParams: any[]) {\r\n    this.writeToLog(msg, LogLevel.Fatal, optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Log.\r\n   * @param msg Message\r\n   * @param optionalParams Optional Params\r\n   */\r\n  log(msg: string, ...optionalParams: any[]) {\r\n    this.writeToLog(msg, LogLevel.All, optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Clear.\r\n   */\r\n  clear(): void {\r\n    for (let logger of this.publishers) {\r\n      logger.clear()\r\n        .subscribe(response => { /* console.log(response) */ });\r\n    }\r\n  }\r\n\r\n  // Private methods\r\n\r\n  /**\r\n   * Should log.\r\n   * @param level Log Level\r\n   */\r\n  private shouldLog(level: LogLevel): boolean {\r\n    let returnValue: boolean = false;\r\n\r\n    if ((level >= this.level &&\r\n      level !== LogLevel.Off) ||\r\n      this.level === LogLevel.All) {\r\n      returnValue = true;\r\n    }\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  /**\r\n   * Write to log.\r\n   * @param msg Message\r\n   * @param level Level\r\n   * @param params Params\r\n   */\r\n  private writeToLog(msg: string, level: LogLevel, params: any[]) {\r\n    if (this.shouldLog(level)) {\r\n      // Declare variables\r\n      let entry: LogEntry = new LogEntry();\r\n\r\n      // Build Log Entry\r\n      entry.message = msg;\r\n      entry.level = level;\r\n      entry.extraInfo = params;\r\n      entry.logWithDate = this.logWithDate;\r\n\r\n      for (let logger of this.publishers) {\r\n        logger.log(entry)\r\n          .subscribe(response => { /* console.log(response) */ });\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}