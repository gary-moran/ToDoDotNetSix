{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { Whitelist } from '../../shared/models/whitelist';\nimport { TextValidators } from '../../shared/validators/text.validator';\nimport { Login } from '../../shared/models/login';\nimport { take } from 'rxjs';\nimport { Message } from '../../shared/models/message';\nimport { MessageType } from '../../shared/models/message-type.enum';\nimport { UsernameValidator } from '../../shared/validators/username.validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../shared/services/authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../shared/services/whitelist.service\";\nimport * as i5 from \"../../shared/services/message.service\";\nimport * as i6 from \"../../shared/services/view-model-data.service\";\nimport * as i7 from \"../../shared/validators/username.validator\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"../../shared/components/element-validation-message/element-validation-message.component\";\nfunction RegisterComponent_form_6_element_validation_message_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 27);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r1.registerForm.get(\"firstname\"));\n  }\n}\nfunction RegisterComponent_form_6_element_validation_message_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 27);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r2.registerForm.get(\"lastname\"));\n  }\n}\nfunction RegisterComponent_form_6_element_validation_message_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 27);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r3.registerForm.get(\"email\"));\n  }\n}\nfunction RegisterComponent_form_6_element_validation_message_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 27);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r4.registerForm.get(\"username\"));\n  }\n}\nfunction RegisterComponent_form_6_element_validation_message_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 27);\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r5.registerForm.get(\"passwordGroup.password\"));\n  }\n}\nfunction RegisterComponent_form_6_element_validation_message_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 27);\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r6.registerForm.get(\"passwordGroup.confirmPassword\"));\n  }\n}\nfunction RegisterComponent_form_6_element_validation_message_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 27);\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r7.registerForm.get(\"passwordGroup\"));\n  }\n}\nfunction RegisterComponent_form_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 6);\n    i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_form_6_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onRegister());\n    });\n    i0.ɵɵelementStart(1, \"div\", 7)(2, \"div\", 8);\n    i0.ɵɵelement(3, \"input\", 9);\n    i0.ɵɵtemplate(4, RegisterComponent_form_6_element_validation_message_4_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(5, \"label\", 11);\n    i0.ɵɵtext(6, \"First Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 8);\n    i0.ɵɵelement(8, \"input\", 12);\n    i0.ɵɵtemplate(9, RegisterComponent_form_6_element_validation_message_9_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(10, \"label\", 13);\n    i0.ɵɵtext(11, \"Last Name\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"div\", 7)(13, \"div\", 14);\n    i0.ɵɵelement(14, \"input\", 15);\n    i0.ɵɵtemplate(15, RegisterComponent_form_6_element_validation_message_15_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(16, \"label\", 16);\n    i0.ɵɵtext(17, \"Email\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"div\", 7)(19, \"div\", 8);\n    i0.ɵɵelement(20, \"input\", 17);\n    i0.ɵɵtemplate(21, RegisterComponent_form_6_element_validation_message_21_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(22, \"label\", 18);\n    i0.ɵɵtext(23, \"Username\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(24, \"div\", 19)(25, \"div\", 8);\n    i0.ɵɵelement(26, \"input\", 20);\n    i0.ɵɵtemplate(27, RegisterComponent_form_6_element_validation_message_27_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(28, \"label\", 21);\n    i0.ɵɵtext(29, \"Password\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(30, \"div\", 8);\n    i0.ɵɵelement(31, \"input\", 22);\n    i0.ɵɵtemplate(32, RegisterComponent_form_6_element_validation_message_32_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵtemplate(33, RegisterComponent_form_6_element_validation_message_33_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(34, \"label\", 23);\n    i0.ɵɵtext(35, \"Confirm Password\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(36, \"div\", 24)(37, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function RegisterComponent_form_6_Template_button_click_37_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onRegister());\n    });\n    i0.ɵɵtext(38, \"Register\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(39, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function RegisterComponent_form_6_Template_button_click_39_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.onCancel());\n    });\n    i0.ɵɵtext(40, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_7_0;\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.registerForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"firstname\") && ctx_r0.isControlInvalid(ctx_r0.registerForm.get(\"firstname\")));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"lastname\") && ctx_r0.isControlInvalid(ctx_r0.registerForm.get(\"lastname\")));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"email\") && ctx_r0.isControlInvalid(ctx_r0.registerForm.get(\"email\")));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"username\") && ctx_r0.isControlInvalid(ctx_r0.registerForm.get(\"username\")));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"password\") && ctx_r0.isControlInvalid(ctx_r0.registerForm.get(\"passwordGroup.password\")));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"passwordGroup.confirmPassword\") && ctx_r0.isControlInvalid(ctx_r0.registerForm.get(\"passwordGroup.confirmPassword\")));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"confirmPassword\") && ((tmp_7_0 = ctx_r0.registerForm.get(\"passwordGroup\")) == null ? null : tmp_7_0.invalid));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.isProcessing || !ctx_r0.registerForm.valid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.isProcessing);\n  }\n}\nexport class RegisterComponent {\n  constructor(authenticationService, router, formBuilder, whitelistService, messageService, viewModelDataservice, usernameValidator) {\n    this.authenticationService = authenticationService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.whitelistService = whitelistService;\n    this.messageService = messageService;\n    this.viewModelDataservice = viewModelDataservice;\n    this.usernameValidator = usernameValidator;\n    this.elementHasFocus = ElementFocus.elementHasFocus;\n    this.isControlInvalid = ControlValidation.isInvalid;\n    this.nameWhitelist = new Whitelist();\n    this.descWhitelist = new Whitelist();\n    this.usernameWhitelist = new Whitelist();\n    this.passwordWhitelist = new Whitelist();\n    this.isProcessing = false;\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.nameWhitelist = yield _this.whitelistService.getWhitelist(\"NAME\");\n      _this.descWhitelist = yield _this.whitelistService.getWhitelist(\"DESC\");\n      _this.usernameWhitelist = yield _this.whitelistService.getWhitelist(\"USERNAME\");\n      _this.passwordWhitelist = yield _this.whitelistService.getWhitelist(\"PASSWORD\");\n      _this.initForm();\n    })();\n  }\n  /**\r\n   * Initialise Form\r\n   */\n  initForm() {\n    this.registerForm = this.formBuilder.group({\n      firstname: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)],\n        updateOn: 'blur'\n      }],\n      lastname: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)],\n        updateOn: 'blur'\n      }],\n      email: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.descWhitelist), TextValidators.minLengthValidator(5), TextValidators.emailValidator()],\n        updateOn: 'blur'\n      }],\n      username: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.usernameWhitelist), TextValidators.minLengthValidator(4)],\n        asyncValidators: UsernameValidator,\n        updateOn: 'blur'\n      }],\n      passwordGroup: this.formBuilder.group({\n        password: ['', {\n          validators: [Validators.required, TextValidators.whitelistValidator(this.passwordWhitelist), TextValidators.minLengthValidator(8)],\n          updateOn: 'blur'\n        }],\n        confirmPassword: ['', {\n          validators: [Validators.required],\n          updateOn: 'blur'\n        }]\n      }, {\n        validator: TextValidators.matchValidator(\"password\", \"confirmPassword\", true)\n      })\n    });\n  }\n  /**\r\n   * Register\r\n   */\n  onRegister() {\n    this.isProcessing = true;\n    const login = new Login(this.registerForm.value);\n    login.password = this.registerForm?.get(\"passwordGroup.password\")?.value ?? \"\";\n    this.viewModelDataservice.actionViewModel(login, \"account\", \"New\").pipe(take(1)).subscribe(() => {\n      this.messageService.sendMessage(new Message(\"nav-menu\", \"User successfully created.\", MessageType.Info));\n      this.router.navigate([\"/login\"]);\n      this.isProcessing = false;\n    }, error => {\n      if (error.status === 400) this.messageService.sendMessage(new Message(\"nav-menu\", \"Unable to create user.\", MessageType.Danger));else this.messageService.sendErrorMessage(error);\n      this.isProcessing = false;\n    });\n  }\n  /**\r\n   * Cancel\r\n   */\n  onCancel() {\n    this.isProcessing = true;\n    this.registerForm.patchValue(new Login());\n    this.registerForm.get(\"passwordGroup\")?.patchValue({\n      \"password\": \"\",\n      \"confirmPassword\": \"\"\n    });\n    this.isProcessing = false;\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthenticationService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.WhitelistService), i0.ɵɵdirectiveInject(i5.MessageService), i0.ɵɵdirectiveInject(i6.ViewModelDataService), i0.ɵɵdirectiveInject(i7.UsernameValidator));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 7,\n  vars: 1,\n  consts: [[\"role\", \"main\", 1, \"container\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"g-2\"], [1, \"mb-2\", \"form-floating\", \"col-md-6\"], [\"id\", \"firstname\", \"type\", \"text\", \"formControlName\", \"firstname\", \"placeholder\", \"firstname\", \"maxLength\", \"100\", 1, \"form-control\"], [3, \"model\", 4, \"ngIf\"], [\"for\", \"firstname\", 1, \"form-label\"], [\"id\", \"lastname\", \"type\", \"text\", \"formControlName\", \"lastname\", \"placeholder\", \"lastname\", \"maxLength\", \"100\", 1, \"form-control\"], [\"for\", \"lastname\", 1, \"form-label\"], [1, \"mb-2\", \"form-floating\", \"col\"], [\"id\", \"email\", \"type\", \"text\", \"formControlName\", \"email\", \"placeholder\", \"email\", \"maxLength\", \"256\", 1, \"form-control\"], [\"for\", \"email\", 1, \"form-label\"], [\"id\", \"username\", \"type\", \"text\", \"formControlName\", \"username\", \"placeholder\", \"username\", \"maxLength\", \"40\", 1, \"form-control\"], [\"for\", \"username\", 1, \"form-label\"], [\"formGroupName\", \"passwordGroup\", 1, \"row\", \"g-2\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"password\", \"maxLength\", \"40\", 1, \"form-control\"], [\"for\", \"password\", 1, \"form-label\"], [\"id\", \"confirmPassword\", \"type\", \"password\", \"formControlName\", \"confirmPassword\", \"placeholder\", \"confirmPassword\", \"maxLength\", \"40\", 1, \"form-control\"], [\"for\", \"confirmPassword\", 1, \"form-label\"], [1, \"gap-2\", \"d-flex\", \"justify-content-end\"], [\"type\", \"submit\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [3, \"model\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"main\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h5\", 3);\n      i0.ɵɵtext(4, \"Register\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵtemplate(6, RegisterComponent_form_6_Template, 41, 10, \"form\", 5);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.registerForm);\n    }\n  },\n  dependencies: [i8.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i3.FormGroupName, i9.ElementValidationMessageComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","ControlValidation","ElementFocus","Whitelist","TextValidators","Login","take","Message","MessageType","UsernameValidator","i0","RegisterComponent","constructor","authenticationService","router","formBuilder","whitelistService","messageService","viewModelDataservice","usernameValidator","elementHasFocus","isInvalid","ngOnInit","nameWhitelist","getWhitelist","descWhitelist","usernameWhitelist","passwordWhitelist","initForm","registerForm","group","firstname","validators","required","whitelistValidator","updateOn","lastname","email","minLengthValidator","emailValidator","username","asyncValidators","passwordGroup","password","confirmPassword","validator","matchValidator","onRegister","isProcessing","login","value","get","actionViewModel","pipe","subscribe","sendMessage","Info","navigate","error","status","Danger","sendErrorMessage","onCancel","patchValue","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\register\\register.component.ts","C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\register\\register.component.html"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Todo\r\n*  Date:      15 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Register\r\n*  Notes:     \r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  15 AUG 2023 GM          Created\r\n************************************************************************/\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, AsyncValidatorFn, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { MessageService } from '../../shared/services/message.service';\r\nimport { ControlValidation } from '../../shared/utilities/control-validation';\r\nimport { ElementFocus } from '../../shared/utilities/element-focus';\r\nimport { Whitelist } from '../../shared/models/whitelist';\r\nimport { WhitelistService } from '../../shared/services/whitelist.service';\r\nimport { TextValidators } from '../../shared/validators/text.validator';\r\nimport { AuthenticationService } from '../../shared/services/authentication.service';\r\nimport { Login } from '../../shared/models/login';\r\nimport { Router } from '@angular/router';\r\nimport { ViewModelDataService } from '../../shared/services/view-model-data.service';\r\nimport { map, Observable, take } from 'rxjs';\r\nimport { Message } from '../../shared/models/message';\r\nimport { MessageType } from '../../shared/models/message-type.enum';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Generic } from '../../shared/models/generic';\r\nimport { UsernameValidator } from '../../shared/validators/username.validator';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html'\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  elementHasFocus = ElementFocus.elementHasFocus;\r\n  isControlInvalid = ControlValidation.isInvalid;\r\n\r\n  nameWhitelist: Whitelist = new Whitelist();\r\n  descWhitelist: Whitelist = new Whitelist();\r\n  usernameWhitelist: Whitelist = new Whitelist();\r\n  passwordWhitelist: Whitelist = new Whitelist();\r\n\r\n  isProcessing: boolean = false;\r\n  registerForm!: FormGroup;\r\n\r\n  constructor(\r\n    private authenticationService: AuthenticationService, private router: Router, private formBuilder: FormBuilder, private whitelistService: WhitelistService,\r\n    private messageService: MessageService, private viewModelDataservice: ViewModelDataService, private usernameValidator: UsernameValidator\r\n  ) { }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.nameWhitelist = await this.whitelistService.getWhitelist(\"NAME\");\r\n    this.descWhitelist = await this.whitelistService.getWhitelist(\"DESC\");\r\n    this.usernameWhitelist = await this.whitelistService.getWhitelist(\"USERNAME\");\r\n    this.passwordWhitelist = await this.whitelistService.getWhitelist(\"PASSWORD\");\r\n    this.initForm();\r\n  }\r\n\r\n  /**\r\n   * Initialise Form\r\n   */\r\n  initForm() {\r\n    this.registerForm = this.formBuilder.group({\r\n      firstname: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)], updateOn: 'blur' }],\r\n      lastname: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.nameWhitelist)], updateOn: 'blur' }],\r\n      email: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.descWhitelist), TextValidators.minLengthValidator(5), TextValidators.emailValidator()], updateOn: 'blur' }],\r\n      username: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.usernameWhitelist), TextValidators.minLengthValidator(4)], asyncValidators: UsernameValidator, updateOn: 'blur' }],\r\n      passwordGroup: this.formBuilder.group({\r\n        password: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.passwordWhitelist), TextValidators.minLengthValidator(8)], updateOn: 'blur' }],\r\n        confirmPassword: ['', { validators: [Validators.required], updateOn: 'blur' }],\r\n      }, { validator: TextValidators.matchValidator(\"password\", \"confirmPassword\", true) }),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register\r\n   */\r\n  onRegister() {\r\n    this.isProcessing = true;\r\n    const login: Login = new Login(this.registerForm.value);\r\n    login.password = (this.registerForm?.get(\"passwordGroup.password\")?.value ?? \"\");\r\n    this.viewModelDataservice.actionViewModel<Login>(login, \"account\", \"New\").pipe(take(1)).subscribe(\r\n      () => {\r\n        this.messageService.sendMessage(new Message(\"nav-menu\", \"User successfully created.\", MessageType.Info));\r\n        this.router.navigate([\"/login\"]);\r\n        this.isProcessing = false;\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        if (error.status === 400)\r\n          this.messageService.sendMessage(new Message(\"nav-menu\", \"Unable to create user.\", MessageType.Danger));\r\n        else\r\n          this.messageService.sendErrorMessage(error);\r\n        this.isProcessing = false;\r\n        });\r\n  }\r\n\r\n  /**\r\n   * Cancel\r\n   */\r\n  onCancel() {\r\n    this.isProcessing = true;\r\n    this.registerForm.patchValue(new Login());\r\n    this.registerForm.get(\"passwordGroup\")?.patchValue({\"password\": \"\", \"confirmPassword\": \"\"});\r\n    this.isProcessing = false;\r\n  }\r\n\r\n  ///**\r\n  //* Username Validator\r\n  //* @param control\r\n  //* @returns\r\n  //*/\r\n  //// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  //usernameValidator(control: AbstractControl) {\r\n    \r\n  //  //let isValid: boolean = true;\r\n\r\n  //  return this.viewModelDataservice.actionViewModel<Generic>(new Generic(control.value), \"account\", \"CheckUsername\").pipe(\r\n  //    map((response: Generic) => response.value.toLowerCase() === \"true\" ? { \"usernameValidator-MSG\": \"the input username is not available\" } : null)\r\n  //  )\r\n\r\n\r\n  //  //await this.viewModelDataservice.actionViewModel<Generic>(username, \"account\", \"CheckUsername\")\r\n  //  //  .pipe(take(1)).subscribe((response: Generic) => isValid = (response.value.toLowerCase() === \"true\"));\r\n\r\n  //  //if (isValid)\r\n  //  //  return null;\r\n  //  //else\r\n  //  //  return { \"usernameValidator-MSG\": \"the input username is not available\" };\r\n  //}\r\n\r\n}\r\n","<main class=\"container\" role=\"main\">\r\n\r\n  <div class=\"card\">\r\n\r\n    <div class=\"card-header\">\r\n      <h5 class=\"card-title\">Register</h5>\r\n    </div>\r\n\r\n    <div class=\"card-body\">\r\n\r\n      <form novalidate (ngSubmit)=\"onRegister()\" [formGroup]=\"registerForm\" *ngIf=\"registerForm\">\r\n\r\n        <div class=\"row g-2\">\r\n\r\n          <div class=\"mb-2 form-floating col-md-6\">\r\n            <input class=\"form-control\" id=\"firstname\" type=\"text\" formControlName=\"firstname\" placeholder=\"firstname\" maxLength=\"100\" />\r\n            <element-validation-message [model]=\"registerForm.get('firstname')\" *ngIf=\"!elementHasFocus('firstname') && isControlInvalid(registerForm.get('firstname'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"firstname\">First Name</label>\r\n          </div>\r\n\r\n          <div class=\"mb-2 form-floating col-md-6\">\r\n            <input class=\"form-control\" id=\"lastname\" type=\"text\" formControlName=\"lastname\" placeholder=\"lastname\" maxLength=\"100\" />\r\n            <element-validation-message [model]=\"registerForm.get('lastname')\" *ngIf=\"!elementHasFocus('lastname') && isControlInvalid(registerForm.get('lastname'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"lastname\">Last Name</label>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"row g-2\">\r\n\r\n          <div class=\"mb-2 form-floating col\">\r\n            <input class=\"form-control\" id=\"email\" type=\"text\" formControlName=\"email\" placeholder=\"email\" maxLength=\"256\" />\r\n            <element-validation-message [model]=\"registerForm.get('email')\" *ngIf=\"!elementHasFocus('email') && isControlInvalid(registerForm.get('email'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"email\">Email</label>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row g-2\">\r\n          <div class=\"mb-2 form-floating col-md-6\">\r\n            <input class=\"form-control\" id=\"username\" type=\"text\" formControlName=\"username\" placeholder=\"username\" maxLength=\"40\" />\r\n            <element-validation-message [model]=\"registerForm.get('username')\" *ngIf=\"!elementHasFocus('username') && isControlInvalid(registerForm.get('username'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"username\">Username</label>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div formGroupName=\"passwordGroup\" class=\"row g-2\">\r\n\r\n          <div class=\"mb-2 form-floating col-md-6\">\r\n            <input class=\"form-control\" id=\"password\" type=\"password\" formControlName=\"password\" placeholder=\"password\" maxLength=\"40\" />\r\n            <element-validation-message [model]=\"registerForm.get('passwordGroup.password')\" *ngIf=\"!elementHasFocus('password') && isControlInvalid(registerForm.get('passwordGroup.password'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"password\">Password</label>\r\n          </div>\r\n\r\n          <div class=\"mb-2 form-floating col-md-6\">\r\n            <input class=\"form-control\" id=\"confirmPassword\" type=\"password\" formControlName=\"confirmPassword\" placeholder=\"confirmPassword\" maxLength=\"40\" />\r\n            <element-validation-message [model]=\"registerForm.get('passwordGroup.confirmPassword')\" *ngIf=\"!elementHasFocus('passwordGroup.confirmPassword') && isControlInvalid(registerForm.get('passwordGroup.confirmPassword'))\"></element-validation-message>\r\n            <element-validation-message [model]=\"registerForm.get('passwordGroup')\" *ngIf=\"!elementHasFocus('confirmPassword') && registerForm.get('passwordGroup')?.invalid\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"confirmPassword\">Confirm Password</label>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"gap-2 d-flex justify-content-end\">\r\n          <button type=\"submit\" class=\"btn btn-secondary\" (click)=\"onRegister()\" [disabled]=\"isProcessing || !this.registerForm.valid\">Register</button>\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onCancel()\" [disabled]=\"isProcessing\">Cancel</button>\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n</main>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}