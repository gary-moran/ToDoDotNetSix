{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from 'rxjs';\nimport { Message } from '../models/message';\nimport { MessageType } from '../models/message-type.enum';\nimport { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./log-service/log.service\";\nimport * as i2 from \"./app-config.service\";\nimport * as i3 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(logger, appConfigService, http) {\n    this.logger = logger;\n    this.appConfigService = appConfigService;\n    this.http = http;\n    this.messageSubject = new Subject();\n    this.apiBaseUrl = \"\";\n    this.onInit();\n  }\n  onInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.appConfigService.AppConfig.pipe(take(1)).subscribe(config => _this.apiBaseUrl = `${config?.WebApi ?? \"\"}/api/Log`);\n    })();\n  }\n  /**\r\n   * Send Message\r\n   * @param message\r\n   * @param persist Persist Message\r\n   */\n  sendMessage(message, persist = false) {\n    if (persist) message.persist = true;\n    this.messageSubject.next(message);\n  }\n  /**\r\n   * Get Message\r\n   * @returns Observable<Message>\r\n   */\n  getMessage() {\n    return this.messageSubject.asObservable();\n  }\n  /**\r\n   * Send Message\r\n   * @param error\r\n   * @param subject\r\n   */\n  sendErrorMessage(error, subject = \"nav-menu\") {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let logId;\n      let message = 'The application has encountered an unexpected error';\n      yield _this2.http.get(_this2.apiBaseUrl).pipe(take(1)).subscribe(response => {\n        logId = response;\n        _this2.logger.error(error.message, logId);\n        message = `${message}. The Log ID for the error is: ${logId}.`;\n      }, responseError => _this2.logger.error(responseError.message));\n      _this2.messageSubject.next(new Message(subject, message, MessageType.Danger));\n    })();\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i2.AppConfigService), i0.ɵɵinject(i3.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAiBA,SAAqBA,OAAO,QAAQ,MAAM;AAC1C,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,WAAW,QAAQ,6BAA6B;AAEzD,SAASC,IAAI,QAAQ,gBAAgB;;;;;AAUrC,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,MAAkB,EAAUC,gBAAkC,EAAUC,IAAgB;IAAxF,WAAM,GAANF,MAAM;IAAsB,qBAAgB,GAAhBC,gBAAgB;IAA4B,SAAI,GAAJC,IAAI;IAHxF,mBAAc,GAAG,IAAIR,OAAO,EAAW;IAC/C,eAAU,GAAW,EAAE;IAGrB,IAAI,CAACS,MAAM,EAAE;EACf;EAEMA,MAAM;IAAA;IAAA;MACV,MAAM,KAAI,CAACF,gBAAgB,CAACG,SAAS,CAACC,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC,CAACS,SAAS,CAACC,MAAM,IAAI,KAAI,CAACC,UAAU,GAAG,GAAGD,MAAM,EAAEE,MAAM,IAAI,EAAE,UAAU,CAAC;IAAC;EAC/H;EAEA;;;;;EAKAC,WAAW,CAACC,OAAgB,EAAEC,UAAmB,KAAK;IACpD,IAAIA,OAAO,EACTD,OAAO,CAACC,OAAO,GAAG,IAAI;IACxB,IAAI,CAACC,cAAc,CAACC,IAAI,CAACH,OAAO,CAAC;EACnC;EAEA;;;;EAIAI,UAAU;IACR,OAAO,IAAI,CAACF,cAAc,CAACG,YAAY,EAAE;EAC3C;EAEA;;;;;EAKMC,gBAAgB,CAACC,KAA2B,EAAEC,OAAO,GAAG,UAAU;IAAA;IAAA;MAEtE,IAAIC,KAAa;MACjB,IAAIT,OAAO,GAAW,qDAAqD;MAE3E,MAAM,MAAI,CAACT,IAAI,CAACmB,GAAG,CAAC,MAAI,CAACb,UAAU,CAAC,CAACH,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC,CAACS,SAAS,CAACgB,QAAQ,IAAG;QACpEF,KAAK,GAAGE,QAAkB;QAC1B,MAAI,CAACtB,MAAM,CAACkB,KAAK,CAACA,KAAK,CAACP,OAAO,EAAES,KAAK,CAAC;QACvCT,OAAO,GAAG,GAAGA,OAAO,kCAAkCS,KAAK,GAAG;MAClE,CAAC,EAAEG,aAAa,IAAI,MAAI,CAACvB,MAAM,CAACkB,KAAK,CAACK,aAAa,CAACZ,OAAO,CAAC,CAAC;MAE7D,MAAI,CAACE,cAAc,CAACC,IAAI,CAAC,IAAInB,OAAO,CAACwB,OAAO,EAAER,OAAO,EAAEf,WAAW,CAAC4B,MAAM,CAAC,CAAC;IAAC;EAC9E;;AAjDW1B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA2B,SAAd3B,cAAc;EAAA4B,YAFb;AAAM","names":["Subject","Message","MessageType","take","MessageService","constructor","logger","appConfigService","http","onInit","AppConfig","pipe","subscribe","config","apiBaseUrl","WebApi","sendMessage","message","persist","messageSubject","next","getMessage","asObservable","sendErrorMessage","error","subject","logId","get","response","responseError","Danger","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\services\\message.service.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      02 AUG 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Message Service\r\n*  Notes:     \r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  02 AUG 2023 GM          Created\r\n************************************************************************/\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Message } from '../models/message';\r\nimport { MessageType } from '../models/message-type.enum';\r\nimport { LogService } from './log-service/log.service';\r\nimport { take } from 'rxjs/operators';\r\nimport { AppConfigService } from './app-config.service';\r\n\r\nexport interface INextLogId {\r\n  logId: number\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n\r\n  private messageSubject = new Subject<Message>();\r\n  apiBaseUrl: string = \"\";\r\n\r\n  constructor(private logger: LogService, private appConfigService: AppConfigService, private http: HttpClient) {\r\n    this.onInit();\r\n  }\r\n\r\n  async onInit() {    \r\n    await this.appConfigService.AppConfig.pipe(take(1)).subscribe(config => this.apiBaseUrl = `${config?.WebApi ?? \"\"}/api/Log`);\r\n  }\r\n\r\n  /**\r\n   * Send Message\r\n   * @param message\r\n   * @param persist Persist Message\r\n   */\r\n  sendMessage(message: Message, persist: boolean = false): void {\r\n    if (persist)\r\n      message.persist = true;\r\n    this.messageSubject.next(message);\r\n  }\r\n\r\n  /**\r\n   * Get Message\r\n   * @returns Observable<Message>\r\n   */\r\n  getMessage(): Observable<Message> {    \r\n    return this.messageSubject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Send Message\r\n   * @param error\r\n   * @param subject\r\n   */\r\n  async sendErrorMessage(error: { message: string; }, subject = \"nav-menu\") {\r\n\r\n    let logId: number;\r\n    let message: string = 'The application has encountered an unexpected error';\r\n\r\n    await this.http.get(this.apiBaseUrl).pipe(take(1)).subscribe(response => {\r\n        logId = response as number;\r\n        this.logger.error(error.message, logId);\r\n        message = `${message}. The Log ID for the error is: ${logId}.`;\r\n    }, responseError => this.logger.error(responseError.message))\r\n\r\n    this.messageSubject.next(new Message(subject, message, MessageType.Danger));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}