{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport { BehaviorSubject, catchError, first, map, shareReplay, Subject, throwError } from 'rxjs';\nimport { Message } from '../models/message';\nimport { MessageType } from '../models/message-type.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app-config.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./message.service\";\nimport * as i4 from \"@angular/router\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(appConfigService, httpClient, messageService, router) {\n      // authenticate and store token\n      this.appConfigService = appConfigService;\n      this.httpClient = httpClient;\n      this.messageService = messageService;\n      this.router = router;\n      this._authenticated$ = new Subject();\n      this.authenticated$ = this._authenticated$.pipe(shareReplay(1));\n      this._logout$ = new BehaviorSubject(false);\n      this.logout$ = this._logout$.asObservable();\n      this.apiBaseUrl = \"\";\n      this.token = \"\";\n      this.tokenExpiration = new Date();\n      this.refreshPending = false;\n      this.jwtHelper = new JwtHelperService();\n      this.appConfigService.AppConfig.subscribe(config => {\n        if (config) {\n          this.apiBaseUrl = config?.WebApi ?? \"\";\n          const session = this.getSession();\n          if (session != null && !this.authenticated) {\n            if (!this.jwtHelper.isTokenExpired(session.token)) {\n              this.token = session.token;\n              this.tokenExpiration = this.jwtHelper.getTokenExpirationDate(session.token);\n              this.userId = session.user;\n              this.newAuthenticationEvent(true);\n            } else {\n              this.refreshToken().subscribe(() => {});\n            }\n          }\n        }\n      });\n    }\n    /**\r\n    * Check if the current session is Authenticated\r\n    */\n    CheckAuthenticated() {\n      if (!this.isAuthenticated(true)) {\n        this.logOut();\n        this.router.navigate([\"login\"]);\n        this.messageService.sendMessage(new Message(\"nav-menu\", \"The current session has expired.\", MessageType.Info), true);\n        return false;\n      } else return true;\n    }\n    /**\r\n     * Returns whether the user is authenticated\r\n     */\n    isAuthenticated(recheckSession = false) {\n      if (recheckSession) {\n        // Grab the latest version of the current session before checking the Auth Status\n        const session = this.getSession();\n        if (session) {\n          this.token = session.token;\n          this.userId = session.user;\n          return this.userId && this.token && !this.jwtHelper.isTokenExpired(this.token);\n        } else {\n          // No session then log out user\n          return false;\n        }\n      } else {\n        return this.userId && this.token && !this.jwtHelper.isTokenExpired(this.token) && this.authenticated;\n      }\n    }\n    /**\r\n     * Returns the authEvent observable\r\n     */\n    //get authEvent() {\n    //  return this.authenticated$;\n    //}\n    /**\r\n     * Creates a new authentication event\r\n     * @param authenticated\r\n     */\n    newAuthenticationEvent(authenticated) {\n      this.authenticated = authenticated;\n      this._authenticated$.next(authenticated);\n    }\n    /**\r\n     * Attempts to refresh the users authentication token\r\n     */\n    refreshToken() {\n      if (!this.refreshPending) {\n        this.refreshPending = true;\n        const session = this.getSession();\n        if (session) {\n          return this.httpClient.post(`${this.apiBaseUrl}/api/account/refreshtoken`, {\n            refreshToken: session.refreshToken,\n            userId: session.user,\n            token: session.token\n          }).pipe(map(response => {\n            this.token = response.token;\n            this.tokenExpiration = response.expiration;\n            this.setSession(response);\n            this.userId = response.user;\n            this.newAuthenticationEvent(true);\n            this.refreshPending = false;\n            return response;\n          }), catchError(error => {\n            this.removeSession();\n            this.newAuthenticationEvent(false);\n            this.router.navigate([\"login\"]);\n            this.refreshPending = false;\n            return throwError(error);\n          }));\n        } else {\n          throw \"Not Logged In\";\n        }\n      } else {\n        return this._authenticated$.pipe(first());\n      }\n    }\n    /**\r\n     * Logs in a user\r\n     * @param credentials The users credentials\r\n     */\n    login(credentials) {\n      return this.httpClient.post(`${this.apiBaseUrl}/api/account/createtoken`, credentials).pipe(map(response => {\n        const tokenInfo = response;\n        this.token = tokenInfo.token;\n        this.tokenExpiration = tokenInfo.expiration;\n        this.setSession(response);\n        this.userId = tokenInfo.user;\n        this.newAuthenticationEvent(true);\n        return true;\n      }));\n    }\n    /**\r\n     * Logs out the user, also any other tabs too\r\n     */\n    logOut() {\n      this.token = \"\";\n      this.userId = null;\n      this.removeSession();\n      this.newAuthenticationEvent(false);\n      this._logout$.next(true);\n      this.authenticated$ = this._authenticated$.pipe(shareReplay(1));\n    }\n    /**\r\n     * Handler to set the session\r\n     * @param response\r\n     */\n    setSession(response) {\n      localStorage.setItem('session', JSON.stringify(response));\n    }\n    /**\r\n     * Handler to get the session\r\n     */\n    getSession() {\n      const session = localStorage.getItem('session');\n      if (!session) return null;\n      return JSON.parse(session);\n    }\n    /**\r\n     * Handler to remove the session\r\n     */\n    removeSession() {\n      localStorage.removeItem('session');\n    }\n    /**\r\n     * Handler to get the users token\r\n     */\n    getToken() {\n      const session = this.getSession();\n      if (session) return session.token;else return null;\n    }\n  }\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.MessageService), i0.ɵɵinject(i4.Router));\n  };\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}