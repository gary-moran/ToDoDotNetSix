{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from 'rxjs';\nimport { Message } from '../models/message';\nimport { MessageType } from '../models/message-type.enum';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./log-service/log.service\";\nimport * as i2 from \"./app-config.service\";\nimport * as i3 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(logger, appConfig, http) {\n    this.logger = logger;\n    this.appConfig = appConfig;\n    this.http = http;\n    this.messageSubject = new Subject();\n    this.location = '';\n    this.onInit();\n  }\n  onInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // get config\n      let config = [{\n        \"WebApi\": \"\"\n      }];\n      yield _this.appConfig.AppConfig.pipe(first()).toPromise().then(cfg => config = cfg);\n      _this.location = `${config.WebApi}/api/Log`;\n    })();\n  }\n  /**\r\n   * Send Message\r\n   * @param message Send Message\r\n   * @param persist Persist Message\r\n   */\n  sendMessage(message, persist = false) {\n    if (persist) message.persist = true;\n    this.messageSubject.next(message);\n  }\n  /**\r\n   * Get Message\r\n   * @returns Observable<Message>\r\n   */\n  getMessage() {\n    return this.messageSubject.asObservable();\n  }\n  /**\r\n   * Send Message\r\n   * @param err Error\r\n   * @param subject Subject\r\n   */\n  sendErrorMessage(err, subject = 'nav-menu') {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let nextLogId;\n      let logId;\n      let message = 'The application has encountered an unexpected error';\n      yield _this2.http.get(_this2.location).toPromise().then(response => {\n        nextLogId = response;\n        logId = nextLogId[0].logId;\n        _this2.logger.error(err.message, logId);\n        message = `${message}. The Log ID for the error is:`;\n        message = `${message} ${logId}.`;\n      }).catch(err => _this2.logger.error(err.message));\n      _this2.messageSubject.next(new Message(subject, message, MessageType.Danger));\n    })();\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i2.AppConfigService), i0.ɵɵinject(i3.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAiBA,SAAqBA,OAAO,QAAQ,MAAM;AAC1C,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,WAAW,QAAQ,6BAA6B;AAEzD,SAASC,KAAK,QAAQ,gBAAgB;;;;;AAUtC,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,MAAkB,EAAUC,SAA2B,EAAUC,IAAgB;IAAjF,WAAM,GAANF,MAAM;IAAsB,cAAS,GAATC,SAAS;IAA4B,SAAI,GAAJC,IAAI;IAHjF,mBAAc,GAAG,IAAIR,OAAO,EAAW;IAC/C,aAAQ,GAAW,EAAE;IAGnB,IAAI,CAACS,MAAM,EAAE;EACf;EAEMA,MAAM;IAAA;IAAA;MACV;MACA,IAAIC,MAAM,GAAc,CAAC;QAAE,QAAQ,EAAE;MAAE,CAAE,CAAC;MAC1C,MAAM,KAAI,CAACH,SAAS,CAACI,SAAS,CAACC,IAAI,CAACT,KAAK,EAAE,CAAC,CAACU,SAAS,EAAE,CAACC,IAAI,CAACC,GAAG,IAAIL,MAAM,GAAGK,GAAgB,CAAC;MAC/F,KAAI,CAACC,QAAQ,GAAG,GAAGN,MAAM,CAACO,MAAM,UAAU;IAAC;EAC7C;EAEA;;;;;EAKAC,WAAW,CAACC,OAAgB,EAAEC,UAAmB,KAAK;IACpD,IAAIA,OAAO,EACTD,OAAO,CAACC,OAAO,GAAG,IAAI;IACxB,IAAI,CAACC,cAAc,CAACC,IAAI,CAACH,OAAO,CAAC;EACnC;EAEA;;;;EAIAI,UAAU;IACR,OAAO,IAAI,CAACF,cAAc,CAACG,YAAY,EAAE;EAC3C;EAEA;;;;;EAKMC,gBAAgB,CAACC,GAAyB,EAAEC,OAAO,GAAG,UAAU;IAAA;IAAA;MAEpE,IAAIC,SAAuB;MAC3B,IAAIC,KAAa;MACjB,IAAIV,OAAO,GAAW,qDAAqD;MAE3E,MAAM,MAAI,CAACX,IAAI,CAACsB,GAAG,CAAC,MAAI,CAACd,QAAQ,CAAC,CAC/BH,SAAS,EAAE,CACXC,IAAI,CAACiB,QAAQ,IAAG;QACfH,SAAS,GAAGG,QAAwB;QACpCF,KAAK,GAAGD,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK;QAC1B,MAAI,CAACvB,MAAM,CAAC0B,KAAK,CAACN,GAAG,CAACP,OAAO,EAAEU,KAAK,CAAC;QACrCV,OAAO,GAAG,GAAGA,OAAO,gCAAgC;QACpDA,OAAO,GAAG,GAAGA,OAAO,IAAIU,KAAK,GAAG;MAClC,CAAC,CAAC,CACDI,KAAK,CAACP,GAAG,IAAI,MAAI,CAACpB,MAAM,CAAC0B,KAAK,CAACN,GAAG,CAACP,OAAO,CAAC,CAAE;MAEhD,MAAI,CAACE,cAAc,CAACC,IAAI,CAAC,IAAIrB,OAAO,CAAC0B,OAAO,EAAER,OAAO,EAAEjB,WAAW,CAACgC,MAAM,CAAC,CAAC;IAAC;EAC9E;;AA1DW9B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA+B,SAAd/B,cAAc;EAAAgC,YAFb;AAAM","names":["Subject","Message","MessageType","first","MessageService","constructor","logger","appConfig","http","onInit","config","AppConfig","pipe","toPromise","then","cfg","location","WebApi","sendMessage","message","persist","messageSubject","next","getMessage","asObservable","sendErrorMessage","err","subject","nextLogId","logId","get","response","error","catch","Danger","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\services\\message.service.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      02-AUG-2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Message Service\r\n*  Notes:     \r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  02-AUG-2023 GM          Created\r\n************************************************************************/\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Message } from '../models/message';\r\nimport { MessageType } from '../models/message-type.enum';\r\nimport { LogService } from './log-service/log.service';\r\nimport { first } from 'rxjs/operators';\r\nimport { AppConfig, AppConfigService } from './app-config.service';\r\n\r\nexport interface INextLogId {\r\n  logId: number\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n\r\n  private messageSubject = new Subject<Message>();\r\n  location: string = '';\r\n\r\n  constructor(private logger: LogService, private appConfig: AppConfigService, private http: HttpClient) {\r\n    this.onInit();\r\n  }\r\n\r\n  async onInit() {    \r\n    // get config\r\n    let config: AppConfig = [{ \"WebApi\": \"\" }];\r\n    await this.appConfig.AppConfig.pipe(first()).toPromise().then(cfg => config = cfg as AppConfig);\r\n    this.location = `${config.WebApi}/api/Log`;\r\n  }\r\n\r\n  /**\r\n   * Send Message\r\n   * @param message Send Message\r\n   * @param persist Persist Message\r\n   */\r\n  sendMessage(message: Message, persist: boolean = false): void {\r\n    if (persist)\r\n      message.persist = true;\r\n    this.messageSubject.next(message);\r\n  }\r\n\r\n  /**\r\n   * Get Message\r\n   * @returns Observable<Message>\r\n   */\r\n  getMessage(): Observable<Message> {    \r\n    return this.messageSubject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Send Message\r\n   * @param err Error\r\n   * @param subject Subject\r\n   */\r\n  async sendErrorMessage(err: { message: string; }, subject = 'nav-menu') {\r\n\r\n    let nextLogId: INextLogId[];\r\n    let logId: number;\r\n    let message: string = 'The application has encountered an unexpected error';\r\n\r\n    await this.http.get(this.location)\r\n      .toPromise()\r\n      .then(response => {\r\n        nextLogId = response as INextLogId[];\r\n        logId = nextLogId[0].logId;\r\n        this.logger.error(err.message, logId);\r\n        message = `${message}. The Log ID for the error is:`;\r\n        message = `${message} ${logId}.`;\r\n      })\r\n      .catch(err => this.logger.error(err.message) )\r\n\r\n    this.messageSubject.next(new Message(subject, message, MessageType.Danger));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}