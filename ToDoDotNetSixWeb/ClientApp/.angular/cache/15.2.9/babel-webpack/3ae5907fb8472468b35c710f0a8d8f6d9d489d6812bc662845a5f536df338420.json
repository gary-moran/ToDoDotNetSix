{"ast":null,"code":"import { switchMap, first, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app-config.service\";\nexport class AppConfigInterceptorService {\n  constructor(appConfigService) {\n    this.appConfigService = appConfigService;\n    this.urlExceptions = [\"/api/generatelanguages\", \"/api/config\"];\n    this.appConfigService.AppConfig.pipe(take(1)).subscribe(config => {\n      this.config = config;\n    });\n  }\n  /**\r\n   * intercept\r\n   * @param request\r\n   * @param next\r\n   * @param retry\r\n   * @returns\r\n   */\n  intercept(request, next, retry = 0) {\n    if (request.url.startsWith(\"/api/\") && !this.urlExceptions.includes(request.url.toLowerCase())) {\n      if (this.config) {\n        return next.handle(request.clone({\n          url: this.config.WebApi + request.url\n        }));\n      } else {\n        return this.appConfigService.AppConfig.pipe(first(), switchMap(config => {\n          return next.handle(request.clone({\n            url: config.WebApi + request.url\n          }));\n        }));\n      }\n    } else {\n      return next.handle(request);\n    }\n  }\n}\nAppConfigInterceptorService.ɵfac = function AppConfigInterceptorService_Factory(t) {\n  return new (t || AppConfigInterceptorService)(i0.ɵɵinject(i1.AppConfigService));\n};\nAppConfigInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppConfigInterceptorService,\n  factory: AppConfigInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAmBA,SAASA,SAAS,EAAEC,KAAK,EAAEC,IAAI,QAAQ,gBAAgB;;;AAOvD,OAAM,MAAOC,2BAA2B;EAKtCC,YAAoBC,gBAAkC;IAAlC,qBAAgB,GAAhBA,gBAAgB;IAF5B,kBAAa,GAAa,CAAC,wBAAwB,EAAE,aAAa,CAAC;IAGzE,IAAI,CAACA,gBAAgB,CAACC,SAAS,CAACC,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC,CAACM,SAAS,CAAEC,MAAiB,IAAI;MAC5E,IAAI,CAACA,MAAM,GAAGA,MAAM;IACtB,CAAC,CAAC;EACJ;EAEA;;;;;;;EAOAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB,EAAEC,QAAgB,CAAC;IACvE,IAAIF,OAAO,CAACG,GAAG,CAACC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACC,aAAa,CAACC,QAAQ,CAACN,OAAO,CAACG,GAAG,CAACI,WAAW,EAAE,CAAC,EAAE;MAC9F,IAAI,IAAI,CAACT,MAAM,EAAE;QACf,OAAOG,IAAI,CAACO,MAAM,CAACR,OAAO,CAACS,KAAK,CAAC;UAAEN,GAAG,EAAE,IAAI,CAACL,MAAM,CAACY,MAAM,GAAGV,OAAO,CAACG;QAAG,CAAE,CAAC,CAAC;OAC7E,MAAM;QACL,OAAO,IAAI,CAACT,gBAAgB,CAACC,SAAS,CAACC,IAAI,CAACN,KAAK,EAAE,EAAED,SAAS,CAAES,MAAM,IAAI;UACxE,OAAOG,IAAI,CAACO,MAAM,CAACR,OAAO,CAACS,KAAK,CAAC;YAAEN,GAAG,EAAEL,MAAM,CAACY,MAAM,GAAGV,OAAO,CAACG;UAAG,CAAE,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;;KAEN,MAAM;MACL,OAAOF,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;;EAE/B;;AA9BWR,2BAA2B;mBAA3BA,2BAA2B;AAAA;AAA3BA,2BAA2B;SAA3BA,2BAA2B;EAAAmB,SAA3BnB,2BAA2B;EAAAoB,YAF1B;AAAM","names":["switchMap","first","take","AppConfigInterceptorService","constructor","appConfigService","AppConfig","pipe","subscribe","config","intercept","request","next","retry","url","startsWith","urlExceptions","includes","toLowerCase","handle","clone","WebApi","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\services\\app-config-interceptor.service.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      25 JUL 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  App Config Interceptor Service\r\n*  Notes:     \r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  25 JUL 2023 GM          Created\r\n************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http'\r\nimport { switchMap, first, take } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { AppConfig, AppConfigService } from './app-config.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppConfigInterceptorService {\r\n\r\n  private config: AppConfig | undefined;\r\n  private urlExceptions: string[] = [\"/api/generatelanguages\", \"/api/config\"];\r\n\r\n  constructor(private appConfigService: AppConfigService) {\r\n    this.appConfigService.AppConfig.pipe(take(1)).subscribe((config: AppConfig) => {\r\n      this.config = config;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * intercept\r\n   * @param request\r\n   * @param next\r\n   * @param retry\r\n   * @returns\r\n   */\r\n  intercept(request: HttpRequest<any>, next: HttpHandler, retry: number = 0): Observable<HttpEvent<any>> {\r\n    if (request.url.startsWith(\"/api/\") && !this.urlExceptions.includes(request.url.toLowerCase())) {\r\n      if (this.config) {\r\n        return next.handle(request.clone({ url: this.config.WebApi + request.url }));\r\n      } else {\r\n        return this.appConfigService.AppConfig.pipe(first(), switchMap((config) => {\r\n          return next.handle(request.clone({ url: config.WebApi + request.url }));\r\n        }));\r\n      }\r\n    } else {\r\n      return next.handle(request);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}