{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { Whitelist } from '../../shared/models/whitelist';\nimport { TextValidators } from '../../shared/validators/text.validator';\nimport { Login } from '../../shared/models/login';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../shared/services/authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../shared/services/whitelist.service\";\nimport * as i5 from \"../../shared/services/message.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"../../shared/components/element-validation-message/element-validation-message.component\";\nfunction LoginComponent_form_6_element_validation_message_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 17);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r1.loginForm.get(\"username\"));\n  }\n}\nfunction LoginComponent_form_6_element_validation_message_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 17);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r2.loginForm.get(\"password\"));\n  }\n}\nfunction LoginComponent_form_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 6);\n    i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_form_6_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onLogin());\n    });\n    i0.ɵɵelementStart(1, \"div\", 7)(2, \"div\", 8);\n    i0.ɵɵelement(3, \"input\", 9);\n    i0.ɵɵtemplate(4, LoginComponent_form_6_element_validation_message_4_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(5, \"label\", 11);\n    i0.ɵɵtext(6, \"Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 8);\n    i0.ɵɵelement(8, \"input\", 12);\n    i0.ɵɵtemplate(9, LoginComponent_form_6_element_validation_message_9_Template, 1, 1, \"element-validation-message\", 10);\n    i0.ɵɵelementStart(10, \"label\", 13);\n    i0.ɵɵtext(11, \"Password\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"div\", 14)(13, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function LoginComponent_form_6_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onLogin());\n    });\n    i0.ɵɵtext(14, \"Login\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function LoginComponent_form_6_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onCancel());\n    });\n    i0.ɵɵtext(16, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.loginForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"username\") && ctx_r0.isControlInvalid(ctx_r0.loginForm.get(\"username\")));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.elementHasFocus(\"password\") && ctx_r0.isControlInvalid(ctx_r0.loginForm.get(\"password\")));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.isProcessing || !ctx_r0.loginForm.valid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.isProcessing);\n  }\n}\nexport class LoginComponent {\n  constructor(authenticationService, router, formBuilder, whitelistService, messageService) {\n    this.authenticationService = authenticationService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.whitelistService = whitelistService;\n    this.messageService = messageService;\n    this.elementHasFocus = ElementFocus.elementHasFocus;\n    this.isControlInvalid = ControlValidation.isInvalid;\n    this.usernameWhitelist = new Whitelist();\n    this.passwordWhitelist = new Whitelist();\n    this.isProcessing = false;\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.usernameWhitelist = yield _this.whitelistService.getWhitelist(\"USERNAME\");\n      _this.passwordWhitelist = yield _this.whitelistService.getWhitelist(\"PASSWORD\");\n      _this.initForm();\n    })();\n  }\n  /**\r\n   * Initialise Form\r\n   */\n  initForm() {\n    this.loginForm = this.formBuilder.group({\n      username: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.usernameWhitelist), TextValidators.minLengthValidator(4)],\n        updateOn: 'blur'\n      }],\n      password: ['', {\n        validators: [Validators.required, TextValidators.whitelistValidator(this.passwordWhitelist), TextValidators.minLengthValidator(8)],\n        updateOn: 'blur'\n      }]\n    });\n  }\n  /**\r\n   * Login\r\n   */\n  onLogin() {\n    this.isProcessing = true;\n    const login = new Login(this.loginForm.value);\n    this.authenticationService.login(login).subscribe(success => {\n      if (success) this.router.navigate([\"/\"]);\n      this.isProcessing = false;\n    }, error => {\n      this.messageService.sendErrorMessage(error);\n      this.isProcessing = false;\n    });\n  }\n  /**\r\n   * Cancel\r\n   */\n  onCancel() {\n    this.isProcessing = true;\n    this.loginForm.patchValue(new Login());\n    this.isProcessing = false;\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthenticationService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.WhitelistService), i0.ɵɵdirectiveInject(i5.MessageService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 7,\n  vars: 1,\n  consts: [[\"role\", \"main\", 1, \"container\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"g-2\"], [1, \"mb-2\", \"form-floating\", \"col-md-6\"], [\"id\", \"username\", \"type\", \"text\", \"formControlName\", \"username\", \"placeholder\", \"username\", \"maxLength\", \"40\", 1, \"form-control\"], [3, \"model\", 4, \"ngIf\"], [\"for\", \"name\", 1, \"form-label\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"password\", \"maxLength\", \"40\", 1, \"form-control\"], [\"for\", \"password\", 1, \"form-label\"], [1, \"gap-2\", \"d-flex\", \"justify-content-end\"], [\"type\", \"submit\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [3, \"model\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"main\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h5\", 3);\n      i0.ɵɵtext(4, \"Login\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵtemplate(6, LoginComponent_form_6_Template, 17, 5, \"form\", 5);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm);\n    }\n  },\n  dependencies: [i6.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i7.ElementValidationMessageComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","ControlValidation","ElementFocus","Whitelist","TextValidators","Login","i0","LoginComponent","constructor","authenticationService","router","formBuilder","whitelistService","messageService","elementHasFocus","isInvalid","ngOnInit","usernameWhitelist","getWhitelist","passwordWhitelist","initForm","loginForm","group","username","validators","required","whitelistValidator","minLengthValidator","updateOn","password","onLogin","isProcessing","login","value","subscribe","success","navigate","error","sendErrorMessage","onCancel","patchValue","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\login\\login.component.ts","C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\login\\login.component.html"],"sourcesContent":["/**************************************************************************\n*\n*  System:    ToDo (Web)\n*  Module:    Client App \\ Todo\n*  Date:      09 AUG 2023\n*  Author:    Gary Moran (GM)\n*  Function:  Login\n*  Notes:     \n*\n*                   : History of Amendments :\n*  Date        Name        Brief description                \n*  ----------- ----------  ---------------------------------------------\n*  09 AUG 2023 GM          Created\n************************************************************************/\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MessageService } from '../../shared/services/message.service';\r\nimport { ViewModelDataService } from '../../shared/services/view-model-data.service';\r\nimport { ControlValidation } from '../../shared/utilities/control-validation';\r\nimport { ElementFocus } from '../../shared/utilities/element-focus';\r\nimport { Whitelist } from '../../shared/models/whitelist';\r\nimport { WhitelistService } from '../../shared/services/whitelist.service';\r\nimport { TextValidators } from '../../shared/validators/text.validator';\r\nimport { AuthenticationService } from '../../shared/services/authentication.service';\r\nimport { Login } from '../../shared/models/login';\r\nimport { Router } from '@angular/router';\r\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit{\n\n  elementHasFocus = ElementFocus.elementHasFocus;\r\n  isControlInvalid = ControlValidation.isInvalid;\n\n  usernameWhitelist: Whitelist = new Whitelist();\n  passwordWhitelist: Whitelist = new Whitelist();\n\n  isProcessing: boolean = false;\n  loginForm!: FormGroup;\n\n  constructor(private authenticationService: AuthenticationService, private router: Router, private formBuilder: FormBuilder, private whitelistService: WhitelistService, private messageService: MessageService,) { }\n\n  async ngOnInit(): Promise<void> {\r\n    this.usernameWhitelist = await this.whitelistService.getWhitelist(\"USERNAME\");\r\n    this.passwordWhitelist = await this.whitelistService.getWhitelist(\"PASSWORD\");\r\n    this.initForm();\r\n  }\n\n  /**\r\n   * Initialise Form\r\n   */\r\n  initForm() {\r\n    this.loginForm = this.formBuilder.group({\r\n      username: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.usernameWhitelist), TextValidators.minLengthValidator(4)], updateOn: 'blur' }],\r\n      password: ['', { validators: [Validators.required, TextValidators.whitelistValidator(this.passwordWhitelist), TextValidators.minLengthValidator(8)], updateOn: 'blur' }],\r\n    });\r\n  }\n\n  /**\n   * Login\r\n   */\n  onLogin() {\n    this.isProcessing = true;\n    const login: Login = new Login(this.loginForm.value);\n    this.authenticationService.login(login).subscribe(success => {\n      if (success)\n        this.router.navigate([\"/\"]);\n      this.isProcessing = false;\n    }, error => {\n      this.messageService.sendErrorMessage(error);\n      this.isProcessing = false;\n    });\n  }\n\n  /**\n   * Cancel\r\n   */\n  onCancel() {\n    this.isProcessing = true;\n    this.loginForm.patchValue(new Login());\n    this.isProcessing = false;\n  }\n}\n","<main class=\"container\" role=\"main\">\r\n\r\n  <!--<div class=\"row\">\r\n    <h1>Login</h1>\r\n  </div>-->\r\n\r\n  <div class=\"card\">\r\n\r\n    <div class=\"card-header\">\r\n      <h5 class=\"card-title\">Login</h5>\r\n    </div>\r\n\r\n    <div class=\"card-body\">\r\n\r\n      <form novalidate (ngSubmit)=\"onLogin()\" [formGroup]=\"loginForm\" *ngIf=\"loginForm\">\r\n\r\n        <div class=\"row g-2\">\r\n\r\n          <div class=\"mb-2 form-floating col-md-6\">\r\n            <input class=\"form-control\" id=\"username\" type=\"text\" formControlName=\"username\" placeholder=\"username\" maxLength=\"40\" />\r\n            <element-validation-message [model]=\"loginForm.get('username')\" *ngIf=\"!elementHasFocus('username') && isControlInvalid(loginForm.get('username'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"name\">Name</label>\r\n          </div>\r\n\r\n          <div class=\"mb-2 form-floating col-md-6\">\r\n            <input class=\"form-control\" id=\"password\" type=\"password\" formControlName=\"password\" placeholder=\"password\" maxLength=\"40\" />\r\n            <element-validation-message [model]=\"loginForm.get('password')\" *ngIf=\"!elementHasFocus('password') && isControlInvalid(loginForm.get('password'))\"></element-validation-message>\r\n            <label class=\"form-label\" for=\"password\">Password</label>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"gap-2 d-flex justify-content-end\">\r\n          <button type=\"submit\" class=\"btn btn-secondary\" (click)=\"onLogin()\" [disabled]=\"isProcessing || !this.loginForm.valid\">Login</button>\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onCancel()\" [disabled]=\"isProcessing\">Cancel</button>\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n</main>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}