{"ast":null,"code":"import { shareReplay } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppConfigHelper {\n  constructor(config) {\n    if (config) {\n      this._config = config;\n    } else {\n      this._config = {};\n    }\n  }\n  cloneAppConfig() {\n    const tmpConfig = {};\n    Object.keys(this._config).forEach(key => {\n      tmpConfig[key] = this._config[key];\n    });\n    return tmpConfig;\n  }\n}\nexport let AppConfigService = /*#__PURE__*/(() => {\n  class AppConfigService {\n    constructor(httpClient, baseUrl) {\n      this.httpClient = httpClient;\n      this.configSubject = new Subject();\n      this.AppConfig = this.configSubject.pipe(shareReplay(1));\n      this.baseUrl = baseUrl;\n    }\n    load() {\n      return new Promise((resolve, reject) => {\n        const webApi = `${this.baseUrl}api/config`;\n        if (!this.config) {\n          this.httpClient.get(webApi).subscribe(config => {\n            this.config = new AppConfigHelper(config);\n            this.configSubject.next(this.config.cloneAppConfig());\n            resolve(true);\n          }, error => {\n            reject(error);\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    }\n  }\n  AppConfigService.ɵfac = function AppConfigService_Factory(t) {\n    return new (t || AppConfigService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n  AppConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppConfigService,\n    factory: AppConfigService.ɵfac,\n    providedIn: 'root'\n  });\n  return AppConfigService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}