{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { throwError } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { LogConsole, LogLocalStorage, LogWebApi } from './log-publishers';\nimport { isNullOrUndefined } from 'is-what';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../app-config.service\";\n//import { Log } from 'oidc-client';\n/**\r\n * Log Publisher Config Definition Class.\r\n */\nclass LogPublisherConfig {\n  constructor(logPublisherParams) {\n    if (logPublisherParams.length == 3) {\n      this.loggerName = logPublisherParams[0];\n      this.loggerLocation = logPublisherParams[1];\n      this.isActive = /true/i.test(logPublisherParams[2].toLowerCase());\n    }\n  }\n}\nexport let LogPublishersService = /*#__PURE__*/(() => {\n  class LogPublishersService {\n    constructor(http, appConfig) {\n      this.http = http;\n      this.appConfig = appConfig;\n      // Public properties\n      this.publishers = [];\n      this.logPublisherConfigs = [];\n      this.OnInit();\n    }\n    OnInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        yield _this.convertConfigToLogPublisherConfigs();\n        _this.buildPublishers();\n      })();\n    }\n    /**\r\n     * Convert Config to Log Publisher Configs.\r\n     */\n    convertConfigToLogPublisherConfigs() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        let logPublisherConfigStrings = [];\n        let config;\n        // get config\n        yield _this2.appConfig.AppConfig.pipe(first()).toPromise().then(cfg => config = cfg);\n        // convert config log publishers settings into an array of strings\n        for (let i = 1; i < 10; i++) {\n          let evalConfigString = `config.logPublishers${i}`;\n          let configString = eval(evalConfigString);\n          if (!isNullOrUndefined(configString)) logPublisherConfigStrings.push(configString);\n        }\n        // convert log publishers array of strings into an array of log publisher configs\n        for (let logPublisherConfigString of logPublisherConfigStrings) {\n          let logPublisherParams = logPublisherConfigString.split(',');\n          if (logPublisherParams.length == 3) {\n            _this2.logPublisherConfigs.push(new LogPublisherConfig(logPublisherParams));\n          }\n        }\n      })();\n    }\n    /**\r\n     * Build publishers array.\r\n     */\n    buildPublishers() {\n      let logPublisher = new LogConsole();\n      let _publishers;\n      for (let logPublisherConfig of this.logPublisherConfigs.filter(cfg => cfg.isActive)) {\n        switch (logPublisherConfig?.loggerName?.toLowerCase() ?? \"\") {\n          case 'console':\n            break;\n          case 'localstorage':\n            logPublisher = new LogLocalStorage();\n            break;\n          case 'webapi':\n            logPublisher = new LogWebApi(this.http, this.appConfig);\n            break;\n        }\n        // Set location of logging\n        logPublisher.location = logPublisherConfig?.loggerLocation ?? \"\";\n        // Add publisher to array\n        this.publishers.push(logPublisher);\n      }\n    }\n    // Private methods\n    /**\r\n     * Handle Errors.\r\n     * @param error Error\r\n     */\n    handleErrors(error) {\n      let errors = [];\n      let msg = '';\n      msg = 'Status: ' + error.status;\n      msg += ' - Status Text: ' + error.statusText;\n      if (!isNullOrUndefined(error.message)) {\n        msg += ' - Exception Message: ' + error.message;\n      }\n      errors.push(msg);\n      console.error('An error occurred', errors);\n      return throwError(errors);\n    }\n  }\n  LogPublishersService.ɵfac = function LogPublishersService_Factory(t) {\n    return new (t || LogPublishersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppConfigService));\n  };\n  LogPublishersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LogPublishersService,\n    factory: LogPublishersService.ɵfac,\n    providedIn: 'root'\n  });\n  return LogPublishersService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}