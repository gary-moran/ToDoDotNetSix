{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { Message } from '../../shared/models/message';\nimport { MessageType } from '../../shared/models/message-type.enum';\nimport { Todo } from '../../shared/models/todo';\nimport { ModalReturn, ModalType } from '../../shared/components/modal-dialog/modal-dialog.component';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../shared/services/view-model-data.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../shared/services/message.service\";\nimport * as i4 from \"../../shared/services/modal-dialog.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../shared/components/element-validation-message/element-validation-message.component\";\nfunction TodoComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"p\")(2, \"em\");\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction TodoComponent_div_5_table_2_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 32);\n    i0.ɵɵlistener(\"click\", function TodoComponent_div_5_table_2_tr_12_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const todo_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r8.onSelect(todo_r7));\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"div\", 33);\n    i0.ɵɵelement(9, \"input\", 34);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const todo_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r7.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r7.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r7.description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"checked\", todo_r7.isComplete);\n  }\n}\nfunction TodoComponent_div_5_table_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 29)(1, \"thead\", 30)(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Completed\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, TodoComponent_div_5_table_2_tr_12_Template, 10, 4, \"tr\", 31);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const todos_r4 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngForOf\", todos_r4);\n  }\n}\nfunction TodoComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 27);\n    i0.ɵɵtemplate(2, TodoComponent_div_5_table_2_Template, 13, 1, \"table\", 28);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const todos_r4 = ctx.ngIf;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", todos_r4);\n  }\n}\nfunction TodoComponent_element_validation_message_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 35);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"model\", ctx_r2.todoForm.get(\"name\"));\n  }\n}\nfunction TodoComponent_element_validation_message_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 35);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"model\", ctx_r3.todoForm.get(\"description\"));\n  }\n}\nvar State;\n(function (State) {\n  State[State[\"New\"] = 0] = \"New\";\n  State[State[\"Edit\"] = 1] = \"Edit\";\n})(State || (State = {}));\nexport class TodoComponent {\n  constructor(viewModelDataService, formBuilder, messageService, modalDialogService) {\n    this.viewModelDataService = viewModelDataService;\n    this.formBuilder = formBuilder;\n    this.messageService = messageService;\n    this.modalDialogService = modalDialogService;\n    this.elementHasFocus = ElementFocus.elementHasFocus;\n    this.isControlInvalid = ControlValidation.isInvalid;\n    this.todo = new Todo();\n    this.state = State.New;\n    this.stateType = State;\n  }\n  ngOnInit() {\n    this.refreshList();\n    this.initForm();\n    ElementFocus.elementHasFocus(\"\");\n  }\n  /**\r\n   * Initialise Form\r\n   */\n  initForm() {\n    this.todoForm = this.formBuilder.group({\n      id: null,\n      name: ['', {\n        validators: [Validators.required],\n        updateOn: 'blur'\n      }],\n      description: ['', {\n        validators: [Validators.required],\n        updateOn: 'blur'\n      }],\n      isComplete: null,\n      updated: null\n    });\n  }\n  /**\r\n   * Refresh List\r\n   */\n  refreshList() {\n    this.todos$ = this.viewModelDataService.getViewModelList(\"todo\");\n  }\n  /**\r\n   * Update Form\r\n   * @param todo\r\n   */\n  updateForm(todo) {\n    this.todoForm.patchValue(todo);\n  }\n  /**\r\n   * Refresh Page\r\n   * @param todo\r\n   * @param setNew\r\n   */\n  refresh(todo, setNew = false) {\n    this.refreshList();\n    this.updateForm(todo);\n    if (setNew) this.state = State.New;else this.state = State.Edit;\n  }\n  /**\r\n   * On Select\r\n   * @param todo\r\n   */\n  onSelect(todo) {\n    this.updateForm(todo);\n    this.state = State.Edit;\n  }\n  /**\r\n   * On New\r\n   */\n  onNew() {\n    this.updateForm(new Todo());\n    this.state = State.New;\n  }\n  /**\r\n   * On Save\r\n   */\n  onSave() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if ((yield _this.modalDialogService.callModalDialog(ModalType.Save)) == ModalReturn.Save) {\n        const todo = new Todo(_this.todoForm.value);\n        let response;\n        const saveMessage = _this.state === State.New ? \"Record Created\" : \"Record Updated\";\n        if (_this.state === State.New) {\n          yield _this.viewModelDataService.addViewModel(todo, \"todo\").toPromise().then(r => {\n            if (r) response = r;\n          }).catch(err => _this.messageService.sendErrorMessage(err));\n        } else if (_this.state === State.Edit && todo.id !== undefined) {\n          yield _this.viewModelDataService.updateViewModel(todo, \"todo\", todo.id).toPromise().then(r => {\n            if (r) response = r;\n          }).catch(err => _this.messageService.sendErrorMessage(err));\n        }\n        if (response) {\n          _this.refresh(response);\n          _this.messageService.sendMessage(new Message('nav-menu', saveMessage, MessageType.Success));\n        }\n      }\n    })();\n  }\n  /**\r\n   * On Delete\r\n   */\n  onDelete() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if ((yield _this2.modalDialogService.callModalDialog(ModalType.Delete)) == ModalReturn.Delete) {\n        let response = false;\n        yield _this2.viewModelDataService.deleteViewModel(\"todo\", _this2.todoForm.value.id).toPromise().then(r => {\n          if (r) response = r;\n        }).catch(err => _this2.messageService.sendErrorMessage(err));\n        if (response) {\n          _this2.refresh(new Todo(), true);\n          _this2.messageService.sendMessage(new Message('nav-menu', \"Record Deleted\", MessageType.Success));\n        }\n      }\n    })();\n  }\n}\nTodoComponent.ɵfac = function TodoComponent_Factory(t) {\n  return new (t || TodoComponent)(i0.ɵɵdirectiveInject(i1.ViewModelDataService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i4.ModalDialogService));\n};\nTodoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TodoComponent,\n  selectors: [[\"app-todo\"]],\n  decls: 39,\n  vars: 9,\n  consts: [[\"role\", \"main\", 1, \"container\"], [1, \"row\"], [\"id\", \"tableLabel\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"g-2\"], [1, \"form-floating\", \"col-md-4\"], [\"id\", \"id\", \"type\", \"text\", \"formControlName\", \"id\", \"readonly\", \"\", \"placeholder\", \"id\", 1, \"form-control\"], [\"for\", \"id\", 1, \"form-label\"], [1, \"mb-2\", \"form-floating\", \"col-md-8\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"name\", \"maxLength\", \"10\", 1, \"form-control\"], [3, \"model\", 4, \"ngIf\"], [\"for\", \"name\", 1, \"form-label\"], [1, \"mb-2\", \"form-floating\"], [\"id\", \"description\", \"type\", \"text\", \"formControlName\", \"description\", \"placeholder\", \"description\", \"maxLength\", \"100\", 1, \"form-control\"], [\"for\", \"description\", 1, \"form-label\"], [1, \"form-check\", \"form-switch\", \"mb-2\"], [\"id\", \"is-complete\", \"type\", \"checkbox\", \"formControlName\", \"isComplete\", 1, \"form-check-input\"], [\"for\", \"is-complete\", 1, \"form-check-label\"], [1, \"gap-2\", \"d-flex\", \"justify-content-end\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [1, \"table-responsive\"], [\"class\", \"table table-striped table-hover table-bordered\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\", \"table-hover\", \"table-bordered\"], [1, \"table-dark\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"disabled\", \"\", 1, \"form-check-input\", 3, \"checked\"], [3, \"model\"]],\n  template: function TodoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"main\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n      i0.ɵɵtext(3, \"To-do's\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(4, TodoComponent_div_4_Template, 4, 0, \"div\", 3);\n      i0.ɵɵtemplate(5, TodoComponent_div_5_Template, 3, 1, \"div\", 3);\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵelementStart(7, \"div\", 4)(8, \"div\", 5)(9, \"h5\", 6);\n      i0.ɵɵtext(10, \"To-do Item\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"div\", 7)(12, \"form\", 8);\n      i0.ɵɵlistener(\"ngSubmit\", function TodoComponent_Template_form_ngSubmit_12_listener() {\n        return ctx.onSave();\n      });\n      i0.ɵɵelementStart(13, \"div\", 9)(14, \"div\", 10);\n      i0.ɵɵelement(15, \"input\", 11);\n      i0.ɵɵelementStart(16, \"label\", 12);\n      i0.ɵɵtext(17, \"ID\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"div\", 13);\n      i0.ɵɵelement(19, \"input\", 14);\n      i0.ɵɵtemplate(20, TodoComponent_element_validation_message_20_Template, 1, 1, \"element-validation-message\", 15);\n      i0.ɵɵelementStart(21, \"label\", 16);\n      i0.ɵɵtext(22, \"Name\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(23, \"div\", 17);\n      i0.ɵɵelement(24, \"input\", 18);\n      i0.ɵɵtemplate(25, TodoComponent_element_validation_message_25_Template, 1, 1, \"element-validation-message\", 15);\n      i0.ɵɵelementStart(26, \"label\", 19);\n      i0.ɵɵtext(27, \"Description\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(28, \"div\", 20);\n      i0.ɵɵelement(29, \"input\", 21);\n      i0.ɵɵelementStart(30, \"label\", 22);\n      i0.ɵɵtext(31, \"Completed\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(32, \"div\", 23)(33, \"button\", 24);\n      i0.ɵɵlistener(\"click\", function TodoComponent_Template_button_click_33_listener() {\n        return ctx.onNew();\n      });\n      i0.ɵɵtext(34, \"New\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"button\", 25);\n      i0.ɵɵtext(36, \"Save\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"button\", 26);\n      i0.ɵɵlistener(\"click\", function TodoComponent_Template_button_click_37_listener() {\n        return ctx.onDelete();\n      });\n      i0.ɵɵtext(38, \"Delete\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !ctx.todos$);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(6, 7, ctx.todos$));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formGroup\", ctx.todoForm);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngIf\", !ctx.elementHasFocus(\"name\") && ctx.isControlInvalid(ctx.todoForm, \"name\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.isControlInvalid(ctx.todoForm, \"description\"));\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"disabled\", !ctx.todoForm.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.state !== ctx.stateType.Edit);\n    }\n  },\n  dependencies: [i5.NgForOf, i5.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i6.ElementValidationMessageComponent, i5.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","Message","MessageType","Todo","ModalReturn","ModalType","ElementFocus","ControlValidation","i0","State","TodoComponent","constructor","viewModelDataService","formBuilder","messageService","modalDialogService","elementHasFocus","isInvalid","New","ngOnInit","refreshList","initForm","todoForm","group","id","name","validators","required","updateOn","description","isComplete","updated","todos$","getViewModelList","updateForm","todo","patchValue","refresh","setNew","state","Edit","onSelect","onNew","onSave","callModalDialog","Save","value","response","saveMessage","addViewModel","toPromise","then","r","catch","err","sendErrorMessage","undefined","updateViewModel","sendMessage","Success","onDelete","Delete","deleteViewModel","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\todo\\todo.component.ts","C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\todo\\todo.component.html"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Todo\r\n*  Date:      25 JUL 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Todo Component\r\n*  Notes:     \r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  25 JUL 2023 GM          Created\r\n************************************************************************/\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { Message } from '../../shared/models/message';\r\nimport { MessageType } from '../../shared/models/message-type.enum';\r\nimport { Todo } from '../../shared/models/todo';\r\nimport { MessageService } from '../../shared/services/message.service';\r\nimport { ViewModelDataService } from '../../shared/services/view-model-data.service';\r\nimport { ModalDialogService } from '../../shared/services/modal-dialog.service';\r\nimport { ModalReturn, ModalType } from '../../shared/components/modal-dialog/modal-dialog.component';\r\nimport { ElementFocus } from '../../shared/utilities/element-focus';\r\nimport { ControlValidation } from '../../shared/utilities/control-validation';\r\n\r\nenum State {\r\n  New,\r\n  Edit,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-todo',\r\n  templateUrl: './todo.component.html',\r\n})\r\nexport class TodoComponent implements OnInit {\r\n\r\n  elementHasFocus = ElementFocus.elementHasFocus;\r\n  isControlInvalid = ControlValidation.isInvalid;\r\n\r\n  todos$: Observable<Todo[]> | undefined;\r\n  todo: Todo = new Todo();\r\n  state: State = State.New;\r\n  public stateType: typeof State = State;\r\n  todoForm!: FormGroup;\r\n\r\n  constructor(\r\n    private viewModelDataService: ViewModelDataService, private formBuilder: FormBuilder, private messageService: MessageService, private modalDialogService: ModalDialogService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.refreshList();\r\n    this.initForm()\r\n    ElementFocus.elementHasFocus(\"\");\r\n  }\r\n\r\n  /**\r\n   * Initialise Form\r\n   */\r\n  initForm() {\r\n    this.todoForm = this.formBuilder.group({\r\n      id: null,\r\n      name: ['', { validators: [Validators.required], updateOn: 'blur' }],\r\n      description: ['', { validators: [Validators.required], updateOn: 'blur' }],\r\n      isComplete: null,\r\n      updated: null,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refresh List\r\n   */\r\n  refreshList(): void {\r\n    this.todos$ = this.viewModelDataService.getViewModelList<Todo>(\"todo\");\r\n  }\r\n\r\n  /**\r\n   * Update Form\r\n   * @param todo\r\n   */\r\n  updateForm(todo: Todo): void {\r\n    this.todoForm.patchValue(todo);\r\n  }\r\n\r\n  /**\r\n   * Refresh Page\r\n   * @param todo\r\n   * @param setNew\r\n   */\r\n  refresh(todo: Todo, setNew: boolean = false): void {\r\n    this.refreshList();\r\n    this.updateForm(todo);\r\n    if (setNew)\r\n      this.state = State.New;\r\n    else\r\n      this.state = State.Edit;\r\n  }\r\n\r\n  /**\r\n   * On Select\r\n   * @param todo\r\n   */\r\n  onSelect(todo: Todo): void {\r\n    this.updateForm(todo);\r\n    this.state = State.Edit;\r\n  }\r\n\r\n  /**\r\n   * On New\r\n   */\r\n  onNew(): void {\r\n    this.updateForm(new Todo());\r\n    this.state = State.New;\r\n  }\r\n\r\n  /**\r\n   * On Save\r\n   */\r\n  async onSave(): Promise<void> {\r\n\r\n    if (await this.modalDialogService.callModalDialog(ModalType.Save) == ModalReturn.Save) {\r\n\r\n      const todo: Todo = new Todo(this.todoForm.value)\r\n      let response: Todo | undefined;\r\n\r\n      const saveMessage: string = this.state === State.New ? \"Record Created\" : \"Record Updated\";\r\n\r\n      if (this.state === State.New) {\r\n        await this.viewModelDataService.addViewModel<Todo>(todo, \"todo\").toPromise()\r\n          .then(r => { if (r) response = r })\r\n          .catch(err => this.messageService.sendErrorMessage(err));\r\n      }\r\n      else if (this.state === State.Edit && todo.id !== undefined) {\r\n        await this.viewModelDataService.updateViewModel<Todo>(todo, \"todo\", todo.id).toPromise()\r\n          .then(r => { if (r) response = r })\r\n          .catch(err => this.messageService.sendErrorMessage(err));\r\n      }\r\n\r\n      if (response) {\r\n        this.refresh(response);\r\n        this.messageService.sendMessage(new Message('nav-menu', saveMessage, MessageType.Success));\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * On Delete\r\n   */\r\n  async onDelete(): Promise<void> {\r\n\r\n    if (await this.modalDialogService.callModalDialog(ModalType.Delete) == ModalReturn.Delete) {\r\n\r\n      let response: boolean = false;\r\n\r\n      await this.viewModelDataService.deleteViewModel(\"todo\", this.todoForm.value.id).toPromise()\r\n        .then(r => { if (r) response = r })\r\n        .catch(err => this.messageService.sendErrorMessage(err));\r\n      if (response) {\r\n        this.refresh(new Todo(), true);\r\n        this.messageService.sendMessage(new Message('nav-menu', \"Record Deleted\", MessageType.Success));\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n","<main class=\"container\" role=\"main\">\n\n  <div class=\"row\">\n    <h1 id=\"tableLabel\">To-do's</h1>\n  </div>\n\n  <div *ngIf=\"!todos$\" class=\"row\">\n    <p><em>Loading...</em></p>\n  </div>\n\n  <div class=\"row\" *ngIf=\"todos$ | async as todos\">\n    <div class=\"table-responsive\">\n      <table class='table table-striped table-hover table-bordered' aria-labelledby=\"tableLabel\" *ngIf=\"todos\">\n        <thead class=\"table-dark\">\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Description</th>\n            <th>Completed</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let todo of todos\" (click)=\"onSelect(todo)\">\n            <td>{{ todo.id }}</td>\n            <td>{{ todo.name }}</td>\n            <td>{{ todo.description }}</td>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input class=\"form-check-input\" type=\"checkbox\" [checked]=\"todo.isComplete\" disabled />\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <div class=\"card\">\n\n    <div class=\"card-header\">\n      <h5 class=\"card-title\">To-do Item</h5>\n    </div>\n\n    <div class=\"card-body\">\n\n      <form novalidate (ngSubmit)=\"onSave()\" [formGroup]=\"todoForm\">\n\n        <div class=\"row g-2\">\n\n          <div class=\"form-floating col-md-4\">\n            <input class=\"form-control\" id=\"id\" type=\"text\" formControlName=\"id\" readonly placeholder=\"id\" />\n            <label class=\"form-label\" for=\"id\">ID</label>\n          </div>\n\n          <div class=\"mb-2 form-floating col-md-8\">\n            <input class=\"form-control\" id=\"name\" type=\"text\" formControlName=\"name\" placeholder=\"name\" maxLength=\"10\" />\n            <element-validation-message [model]=\"todoForm.get('name')\" *ngIf=\"!elementHasFocus('name') && isControlInvalid(todoForm,'name')\"></element-validation-message>\n            <label class=\"form-label\" for=\"name\">Name</label>\n          </div>\n\n        </div>\n\n        <div class=\"mb-2 form-floating\">\n          <input class=\"form-control\" id=\"description\" type=\"text\" formControlName=\"description\" placeholder=\"description\" maxLength=\"100\" />\n          <element-validation-message [model]=\"todoForm.get('description')\" *ngIf=\"isControlInvalid(todoForm,'description')\"></element-validation-message>\n          <label class=\"form-label\" for=\"description\">Description</label>\n        </div>\n\n        <div class=\"form-check form-switch mb-2\">\n          <input class=\"form-check-input\" id=\"is-complete\" type=\"checkbox\" formControlName=\"isComplete\" />\n          <label class=\"form-check-label\" for=\"is-complete\">Completed</label>\n        </div>\n\n        <div class=\"gap-2 d-flex justify-content-end\">\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onNew()\">New</button>\n          <button type=\"submit\" class=\"btn btn-secondary\" [disabled]=\"!this.todoForm.valid\">Save</button>\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onDelete()\" [disabled]=\"state !== stateType.Edit\">Delete</button>\n        </div>\n\n      </form>\n    </div>\n  </div>\n\n</main>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}