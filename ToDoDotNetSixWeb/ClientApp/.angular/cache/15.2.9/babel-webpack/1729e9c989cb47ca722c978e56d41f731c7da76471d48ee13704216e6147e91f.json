{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      02-AUG-2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Log Service\r\n*  Notes:     from this original source:\r\n*   https://www.codemag.com/Article/1711021/Logging-in-Angular-Applications\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description\r\n*  ----------- ----------  ---------------------------------------------\r\n*  02-AUG-2023 GM          Created\r\n************************************************************************/\nimport { of, throwError } from 'rxjs';\nimport { catchError, map, first } from 'rxjs/operators';\nimport { isNullOrUndefined } from 'is-what';\n/**\r\n * Log Publisher Abstract Class.\r\n *\r\n * NOTE: This class must be located BEFORE all those that extend this class.\r\n */\nexport class LogPublisher {\n  constructor() {\n    this.location = \"\";\n  }\n}\n/**\r\n * Console Logging Class.\r\n */\nexport class LogConsole extends LogPublisher {\n  /**\r\n   * Log.\r\n   * @param entry Entry\r\n   */\n  log(entry) {\n    // Log to console\n    console.log(entry.buildLogString());\n    return of(true);\n  }\n  /**\r\n   * Clear.\r\n   */\n  clear() {\n    console.clear();\n    return of(true);\n  }\n}\n/**\r\n * Local Storage Logging Class.\r\n */\nexport class LogLocalStorage extends LogPublisher {\n  constructor() {\n    // Must call super() from derived classes\n    super();\n    // Set location\n    this.location = 'logging';\n  }\n  /**\r\n   * Append log entry to local storage.\r\n   * @param entry\r\n   */\n  log(entry) {\n    let returnValue = false;\n    let values;\n    try {\n      // Retrieve previous values from local storage\n      values = JSON.parse(localStorage?.getItem(this.location) ?? \"\") || [];\n      // Add new log entry to array\n      values.push(entry);\n      // Store array into local storage\n      localStorage.setItem(this.location, JSON.stringify(values));\n      // Set return value\n      returnValue = true;\n    } catch (ex) {\n      // Display error in console\n      console.log(ex);\n    }\n    return of(returnValue);\n  }\n  /**\r\n   * Clear all log entries from local storage.\r\n   */\n  clear() {\n    localStorage.removeItem(this.location);\n    return of(true);\n  }\n}\n/**\r\n * Logging Web API Class.\r\n */\nexport class LogWebApi extends LogPublisher {\n  constructor(http, appConfig) {\n    // Must call super() from derived classes\n    super();\n    this.http = http;\n    this.appConfig = appConfig;\n    this.onInit();\n  }\n  onInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let config = {\n        \"WebApi\": \"\"\n      };\n      // get config\n      yield _this.appConfig.AppConfig.pipe(first()).toPromise().then(cfg => config = cfg);\n      _this.location = `${config.WebApi}/api/Log`;\n    })();\n  }\n  // Public Methods\n  /**\r\n   * Add log entry to back end data store.\r\n   * @param entry Entry\r\n   */\n  log(entry) {\n    let logEntry;\n    let logId = -1;\n    if (entry.extraInfo.length > 0) {\n      if (Number.isInteger(entry.extraInfo[0])) logId = entry.extraInfo[0];\n    }\n    logEntry = {\n      \"logId\": logId,\n      \"message\": entry.message,\n      \"extraInfo\": entry.extraInfo\n    };\n    return this.http.post(this.location, logEntry).pipe(map(response => response), catchError(this.handleErrors));\n  }\n  /**\r\n   * Clear.\r\n   *\r\n   * Required for compliance with LogPublisher abstract class but not used.\r\n   */\n  clear() {\n    return of(true);\n  }\n  // Private Methods\n  /**\r\n   * Handle Errors.\r\n   * @param error Error\r\n   */\n  handleErrors(error) {\n    let errors = [];\n    let msg = '';\n    msg = 'Status: ' + error.status;\n    msg += ' - Status Text: ' + error.statusText;\n    if (!isNullOrUndefined(error.message)) {\n      msg += ' - Exception Message: ' + error.message;\n    }\n    errors.push(msg);\n    console.error('An error occurred', errors);\n    return throwError(errors);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}