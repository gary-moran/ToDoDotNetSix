{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Generic } from '../models/generic';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/view-model-data.service\";\nexport class UsernameValidator {\n  constructor(viewModelDataservice) {\n    this.viewModelDataservice = viewModelDataservice;\n  }\n  validate(control) {\n    return this.viewModelDataservice.actionViewModel(new Generic(control.value), \"account\", \"CheckUsername\").pipe(map(available => available.value.toLowerCase() === \"true\" ? null : {\n      \"usernameValidator-MSG\": \"This username is not available\"\n    }), catchError(() => of(null)));\n  }\n}\nUsernameValidator.ɵfac = function UsernameValidator_Factory(t) {\n  return new (t || UsernameValidator)(i0.ɵɵinject(i1.ViewModelDataService));\n};\nUsernameValidator.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsernameValidator,\n  factory: UsernameValidator.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAASC,OAAO,QAAQ,mBAAmB;;;AAI3C,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,oBAA0C;IAA1C,yBAAoB,GAApBA,oBAAoB;EAA0B;EAElEC,QAAQ,CAAEC,OAAwB;IAChC,OAAO,IAAI,CAACF,oBAAoB,CAACG,eAAe,CAAU,IAAIN,OAAO,CAACK,OAAO,CAACE,KAAK,CAAC,EAAE,SAAS,EAAE,eAAe,CAAC,CAC9GC,IAAI,CACHT,GAAG,CAAEU,SAAkB,IAAMA,SAAS,CAACF,KAAK,CAACG,WAAW,EAAE,KAAK,MAAM,GAAG,IAAI,GAAG;MAAE,uBAAuB,EAAE;IAAgC,CAAI,CAAC,EACjJZ,UAAU,CAAC,MAAMD,EAAE,CAAC,IAAI,CAAC,CAAC,CAC3B;EACH;;AAVWI,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAU,SAAjBV,iBAAiB;EAAAW,YADJ;AAAM","names":["of","catchError","map","Generic","UsernameValidator","constructor","viewModelDataservice","validate","control","actionViewModel","value","pipe","available","toLowerCase","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\validators\\username.validator.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AbstractControl, AsyncValidator, ValidationErrors, } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Generic } from '../models/generic';\r\nimport { ViewModelDataService } from '../services/view-model-data.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UsernameValidator implements AsyncValidator {\r\n\r\n  constructor(private viewModelDataservice: ViewModelDataService) { }\r\n\r\n  validate( control: AbstractControl ): Observable<ValidationErrors | null> {\r\n    return this.viewModelDataservice.actionViewModel<Generic>(new Generic(control.value), \"account\", \"CheckUsername\")\r\n      .pipe(\r\n        map((available: Generic) => (available.value.toLowerCase() === \"true\" ? null : { \"usernameValidator-MSG\": \"This username is not available\" } )),\r\n      catchError(() => of(null))\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}