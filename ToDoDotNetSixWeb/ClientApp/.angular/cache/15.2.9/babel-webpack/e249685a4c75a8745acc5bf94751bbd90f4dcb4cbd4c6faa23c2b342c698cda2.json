{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      02-AUG-2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Log Service\r\n*  Notes:     from this original source:\r\n*   https://www.codemag.com/Article/1711021/Logging-in-Angular-Applications\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description\r\n*  ----------- ----------  ---------------------------------------------\r\n*  02-AUG-2023 GM          Created\r\n************************************************************************/\nimport { of, throwError } from 'rxjs';\nimport { catchError, map, first } from 'rxjs/operators';\nimport { isNullOrUndefined } from 'is-what';\n/**\r\n * Log Publisher Abstract Class.\r\n *\r\n * NOTE: This class must be located BEFORE all those that extend this class.\r\n */\nexport class LogPublisher {\n  constructor() {\n    this.location = \"\";\n  }\n}\n/**\r\n * Console Logging Class.\r\n */\nexport class LogConsole extends LogPublisher {\n  /**\r\n   * Log.\r\n   * @param entry Entry\r\n   */\n  log(entry) {\n    // Log to console\n    console.log(entry.buildLogString());\n    return of(true);\n  }\n  /**\r\n   * Clear.\r\n   */\n  clear() {\n    console.clear();\n    return of(true);\n  }\n}\n/**\r\n * Local Storage Logging Class.\r\n */\nexport class LogLocalStorage extends LogPublisher {\n  constructor() {\n    // Must call super() from derived classes\n    super();\n    // Set location\n    this.location = 'logging';\n  }\n  /**\r\n   * Append log entry to local storage.\r\n   * @param entry\r\n   */\n  log(entry) {\n    let returnValue = false;\n    let values;\n    try {\n      // Retrieve previous values from local storage\n      values = JSON.parse(localStorage?.getItem(this.location) ?? \"\") || [];\n      // Add new log entry to array\n      values.push(entry);\n      // Store array into local storage\n      localStorage.setItem(this.location, JSON.stringify(values));\n      // Set return value\n      returnValue = true;\n    } catch (ex) {\n      // Display error in console\n      console.log(ex);\n    }\n    return of(returnValue);\n  }\n  /**\r\n   * Clear all log entries from local storage.\r\n   */\n  clear() {\n    localStorage.removeItem(this.location);\n    return of(true);\n  }\n}\n/**\r\n * Logging Web API Class.\r\n */\nexport class LogWebApi extends LogPublisher {\n  constructor(http, appConfig) {\n    // Must call super() from derived classes\n    super();\n    this.http = http;\n    this.appConfig = appConfig;\n    this.onInit();\n  }\n  onInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let config = {\n        \"WebApi\": \"\"\n      };\n      // get config\n      yield _this.appConfig.AppConfig.pipe(first()).toPromise().then(cfg => config = cfg);\n      _this.location = `${config.WebApi}/api/Log`;\n    })();\n  }\n  // Public Methods\n  /**\r\n   * Add log entry to back end data store.\r\n   * @param entry Entry\r\n   */\n  log(entry) {\n    let logEntry;\n    let logId = -1;\n    if (entry.extraInfo.length > 0) {\n      if (Number.isInteger(entry.extraInfo[0])) logId = entry.extraInfo[0];\n    }\n    logEntry = {\n      \"logId\": logId,\n      \"message\": entry.message,\n      \"extraInfo\": entry.extraInfo\n    };\n    return this.http.post(this.location, logEntry).pipe(map(response => response), catchError(this.handleErrors));\n  }\n  /**\r\n   * Clear.\r\n   *\r\n   * Required for compliance with LogPublisher abstract class but not used.\r\n   */\n  clear() {\n    return of(true);\n  }\n  // Private Methods\n  /**\r\n   * Handle Errors.\r\n   * @param error Error\r\n   */\n  handleErrors(error) {\n    let errors = [];\n    let msg = '';\n    msg = 'Status: ' + error.status;\n    msg += ' - Status Text: ' + error.statusText;\n    if (!isNullOrUndefined(error.message)) {\n      msg += ' - Exception Message: ' + error.message;\n    }\n    errors.push(msg);\n    console.error('An error occurred', errors);\n    return throwError(errors);\n  }\n}","map":{"version":3,"mappings":"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","names":["of","throwError","catchError","map","first","isNullOrUndefined","LogPublisher","constructor","LogConsole","log","entry","console","buildLogString","clear","LogLocalStorage","location","returnValue","values","JSON","parse","localStorage","getItem","push","setItem","stringify","ex","removeItem","LogWebApi","http","appConfig","onInit","config","AppConfig","pipe","toPromise","then","cfg","WebApi","logEntry","logId","extraInfo","length","Number","isInteger","message","post","response","handleErrors","error","errors","msg","status","statusText"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\services\\log-service\\log-publishers.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      02-AUG-2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Log Service\r\n*  Notes:     from this original source:\r\n*   https://www.codemag.com/Article/1711021/Logging-in-Angular-Applications\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  02-AUG-2023 GM          Created\r\n************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable prefer-const */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, map, first } from 'rxjs/operators';\r\nimport { LogEntry } from './log.service';\r\nimport { isNullOrUndefined } from 'is-what';\r\nimport { AppConfig, AppConfigService } from '../app-config.service';\r\n\r\nexport interface ILogEntry {\r\n  logId: number,\r\n  message: string,\r\n  extraInfo: any[]\r\n}\r\n\r\n/**\r\n * Log Publisher Abstract Class.\r\n *\r\n * NOTE: This class must be located BEFORE all those that extend this class.\r\n */\r\nexport abstract class LogPublisher {\r\n\r\n  location: string = \"\";\r\n\r\n  abstract log(record: LogEntry): Observable<boolean>\r\n  abstract clear(): Observable<boolean>;\r\n}\r\n\r\n/**\r\n * Console Logging Class.\r\n */\r\nexport class LogConsole extends LogPublisher {\r\n\r\n  /**\r\n   * Log.\r\n   * @param entry Entry\r\n   */\r\n  log(entry: LogEntry): Observable<boolean> {\r\n    // Log to console\r\n    console.log(entry.buildLogString());\r\n\r\n    return of(true);\r\n  }\r\n\r\n  /**\r\n   * Clear.\r\n   */\r\n  clear(): Observable<boolean> {\r\n    console.clear();\r\n    \r\n    return of(true);\r\n  }\r\n}\r\n\r\n/**\r\n * Local Storage Logging Class.\r\n */\r\nexport class LogLocalStorage extends LogPublisher {\r\n\r\n  constructor() {\r\n    // Must call super() from derived classes\r\n    super();\r\n    // Set location\r\n    this.location = 'logging';\r\n  }\r\n\r\n  /**\r\n   * Append log entry to local storage.\r\n   * @param entry\r\n   */\r\n  log(entry: LogEntry): Observable<boolean> {\r\n    let returnValue: boolean = false;\r\n    let values: LogEntry[];\r\n\r\n    try {\r\n      // Retrieve previous values from local storage\r\n      values = JSON.parse(localStorage?.getItem(this.location) ?? \"\") || [];\r\n      // Add new log entry to array\r\n      values.push(entry);\r\n      // Store array into local storage\r\n      localStorage.setItem(this.location, JSON.stringify(values));\r\n\r\n      // Set return value\r\n      returnValue = true;\r\n    } catch (ex) {\r\n      // Display error in console\r\n      console.log(ex);\r\n    }\r\n\r\n    return of(returnValue);\r\n  }\r\n\r\n  /**\r\n   * Clear all log entries from local storage.\r\n   */\r\n  clear(): Observable<boolean> {\r\n    localStorage.removeItem(this.location);\r\n    return of(true);\r\n  }\r\n}\r\n\r\n/**\r\n * Logging Web API Class.\r\n */\r\nexport class LogWebApi extends LogPublisher {\r\n\r\n  constructor(private http: HttpClient, private appConfig: AppConfigService) {\r\n    // Must call super() from derived classes\r\n    super();\r\n    this.onInit();\r\n  }\r\n\r\n  async onInit() {\r\n    let config: AppConfig = { \"WebApi\": \"\" };\r\n\r\n    // get config\r\n    await this.appConfig.AppConfig.pipe(first()).toPromise().then(cfg => config = cfg as AppConfig);\r\n\r\n    this.location = `${config.WebApi}/api/Log`;\r\n  }\r\n\r\n  // Public Methods\r\n\r\n  /**\r\n   * Add log entry to back end data store.\r\n   * @param entry Entry\r\n   */\r\n  log(entry: LogEntry): Observable<boolean> {\r\n\r\n    let logEntry: ILogEntry;\r\n    let logId: number = -1;\r\n    if (entry.extraInfo.length > 0) {\r\n      if (Number.isInteger(entry.extraInfo[0]))\r\n        logId = entry.extraInfo[0];\r\n    }\r\n    logEntry = {\r\n      \"logId\": logId, \"message\": entry.message, \"extraInfo\": entry.extraInfo\r\n    };\r\n\r\n    return this.http.post(this.location, logEntry).pipe(\r\n      map(response => response as boolean),\r\n      catchError(this.handleErrors)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear.\r\n   *\r\n   * Required for compliance with LogPublisher abstract class but not used.\r\n   */\r\n  clear(): Observable<boolean> {\r\n    return of(true);\r\n  }\r\n\r\n  // Private Methods\r\n\r\n  /**\r\n   * Handle Errors.\r\n   * @param error Error\r\n   */\r\n  private handleErrors(error: any): Observable<any> {\r\n    let errors: string[] = [];\r\n    let msg: string = '';\r\n\r\n    msg = 'Status: ' + error.status;\r\n    msg += ' - Status Text: ' + error.statusText;\r\n    if (!isNullOrUndefined(error.message)) {\r\n      msg += ' - Exception Message: ' + error.message;\r\n    }\r\n    errors.push(msg);\r\n\r\n    console.error('An error occurred', errors);\r\n\r\n    return throwError(errors);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}