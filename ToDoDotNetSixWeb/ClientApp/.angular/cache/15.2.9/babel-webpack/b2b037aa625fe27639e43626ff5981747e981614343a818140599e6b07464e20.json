{"ast":null,"code":"import { take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./app-config.service\";\nexport class ViewModelDataService {\n  constructor(http, appConfigService) {\n    this.http = http;\n    this.appConfigService = appConfigService;\n    this.apiBaseUrl = \"\";\n    this.appConfigService.AppConfig.pipe(take(1)).subscribe(config => this.apiBaseUrl = config?.WebApi ?? \"\");\n  }\n  /**\r\n   * Get View Model\r\n   * @type T\r\n   * @param controller Controller Name\r\n   * @returns View Model\r\n   */\n  getViewModel(controller, id) {\n    return this.http.get(`${this.apiBaseUrl}/api/${controller}/${id}`);\n  }\n  /**\r\n   * Get View Model List\r\n   * @type T\r\n   * @param controller Controller Name\r\n   * @returns View Model array\r\n   */\n  getViewModelList(controller) {\n    return this.http.get(`${this.apiBaseUrl}/api/${controller}/`);\n  }\n  /**\r\n  * Action View Model\r\n  * @type T\r\n  * @param model View Model\r\n  * @param controller Controller Name\r\n  * @param method Method Name\r\n  * @returns Generic View Model\r\n  */\n  actionViewModel(model, controller, methodName) {\n    return this.http.post(`${this.apiBaseUrl}/api/${controller}/${methodName}`, model);\n  }\n  /**\r\n  * Add View Model\r\n  * @type T\r\n  * @param model View Model\r\n  * @param controller Controller Name\r\n  * @returns Generic View Model\r\n  */\n  addViewModel(model, controller) {\n    return this.http.post(`${this.apiBaseUrl}/api/${controller}/`, model);\n  }\n  /**\r\n  * Update View Model\r\n  * @type T\r\n  * @param model View Model\r\n  * @param controller Controller Name\r\n  * @param id ID\r\n  * @returns Generic View Model\r\n  */\n  updateViewModel(model, controller, id) {\n    return this.http.put(`${this.apiBaseUrl}/api/${controller}/${id}`, model);\n  }\n  /**\r\n   * Delete View Model\r\n   * @param controller Controller Name\r\n   * @param id\r\n   * @returns true if successful\r\n   */\n  deleteViewModel(controller, id) {\n    return this.http.delete(`${this.apiBaseUrl}/api/${controller}/${id}`);\n  }\n}\nViewModelDataService.ɵfac = function ViewModelDataService_Factory(t) {\n  return new (t || ViewModelDataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppConfigService));\n};\nViewModelDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ViewModelDataService,\n  factory: ViewModelDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAiBA,SAASA,IAAI,QAAQ,MAAM;;;;AAM3B,OAAM,MAAOC,oBAAoB;EAI/BC,YAAoBC,IAAgB,EAAUC,gBAAkC;IAA5D,SAAI,GAAJD,IAAI;IAAsB,qBAAgB,GAAhBC,gBAAgB;IAF9D,eAAU,GAAW,EAAE;IAGrB,IAAI,CAACA,gBAAgB,CAACC,SAAS,CAACC,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC,CAAC,CAACO,SAAS,CAACC,MAAM,IAAI,IAAI,CAACC,UAAU,GAAGD,MAAM,EAAEE,MAAM,IAAI,EAAE,CAAC;EAC3G;EAEA;;;;;;EAMAC,YAAY,CAAIC,UAAkB,EAAEC,EAAU;IAC5C,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAI,GAAG,IAAI,CAACL,UAAU,QAAQG,UAAU,IAAIC,EAAE,EAAE,CAAC;EACvE;EAEA;;;;;;EAMAE,gBAAgB,CAAIH,UAAkB;IACpC,OAAO,IAAI,CAACT,IAAI,CAACW,GAAG,CAAM,GAAG,IAAI,CAACL,UAAU,QAAQG,UAAU,GAAG,CAAC;EACpE;EAEA;;;;;;;;EAQAI,eAAe,CAAIC,KAAQ,EAAEL,UAAkB,EAAEM,UAAkB;IACjE,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAI,GAAG,IAAI,CAACV,UAAU,QAAQG,UAAU,IAAIM,UAAU,EAAE,EAAED,KAAK,CAAC;EACvF;EAEA;;;;;;;EAOAG,YAAY,CAAIH,KAAQ,EAAEL,UAAkB;IAC1C,OAAO,IAAI,CAACT,IAAI,CAACgB,IAAI,CAAI,GAAG,IAAI,CAACV,UAAU,QAAQG,UAAU,GAAG,EAAEK,KAAK,CAAG;EAC5E;EAEA;;;;;;;;EAQAI,eAAe,CAAIJ,KAAQ,EAAEL,UAAkB,EAAEC,EAAU;IACzD,OAAO,IAAI,CAACV,IAAI,CAACmB,GAAG,CAAI,GAAG,IAAI,CAACb,UAAU,QAAQG,UAAU,IAAIC,EAAE,EAAE,EAAEI,KAAK,CAAC;EAC9E;EAEA;;;;;;EAMAM,eAAe,CAACX,UAAkB,EAAEC,EAAU;IAC5C,OAAO,IAAI,CAACV,IAAI,CAACqB,MAAM,CAAU,GAAG,IAAI,CAACf,UAAU,QAAQG,UAAU,IAAIC,EAAE,EAAE,CAAC;EAChF;;AAvEWZ,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAwB,SAApBxB,oBAAoB;EAAAyB,YAFnB;AAAM","names":["take","ViewModelDataService","constructor","http","appConfigService","AppConfig","pipe","subscribe","config","apiBaseUrl","WebApi","getViewModel","controller","id","get","getViewModelList","actionViewModel","model","methodName","post","addViewModel","updateViewModel","put","deleteViewModel","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\services\\view-model-data.service.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Shared \\ Services\r\n*  Date:      25 JUL 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  View Model Data Service\r\n*  Notes:     \r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  25 JUL 2023 GM          Created\r\n************************************************************************/\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { take } from 'rxjs';\r\nimport { AppConfigService } from './app-config.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ViewModelDataService {\r\n\r\n  apiBaseUrl: string = \"\";\r\n\r\n  constructor(private http: HttpClient, private appConfigService: AppConfigService,) {\r\n    this.appConfigService.AppConfig.pipe(take(1)).subscribe(config => this.apiBaseUrl = config?.WebApi ?? \"\");\r\n  }\r\n\r\n  /**\r\n   * Get View Model\r\n   * @type T \r\n   * @param controller Controller Name\r\n   * @returns View Model\r\n   */\r\n  getViewModel<T>(controller: string, id: number) {\r\n    return this.http.get<T>(`${this.apiBaseUrl}/api/${controller}/${id}`);\r\n  }\r\n\r\n  /**\r\n   * Get View Model List\r\n   * @type T \r\n   * @param controller Controller Name\r\n   * @returns View Model array\r\n   */\r\n  getViewModelList<T>(controller: string) {\r\n    return this.http.get<T[]>(`${this.apiBaseUrl}/api/${controller}/`);\r\n  }\r\n\r\n  /**\r\n  * Action View Model\r\n  * @type T \r\n  * @param model View Model\r\n  * @param controller Controller Name\r\n  * @param method Method Name\r\n  * @returns Generic View Model\r\n  */\r\n  actionViewModel<T>(model: T, controller: string, methodName: string) {\r\n    return this.http.post<T>(`${this.apiBaseUrl}/api/${controller}/${methodName}`, model);\r\n  }\r\n\r\n  /**\r\n  * Add View Model\r\n  * @type T \r\n  * @param model View Model\r\n  * @param controller Controller Name\r\n  * @returns Generic View Model\r\n  */\r\n  addViewModel<T>(model: T, controller: string) {\r\n    return this.http.post<T>(`${this.apiBaseUrl}/api/${controller}/`, model, );\r\n  }\r\n\r\n  /**\r\n  * Update View Model\r\n  * @type T \r\n  * @param model View Model\r\n  * @param controller Controller Name\r\n  * @param id ID\r\n  * @returns Generic View Model\r\n  */\r\n  updateViewModel<T>(model: T, controller: string, id: number) {\r\n    return this.http.put<T>(`${this.apiBaseUrl}/api/${controller}/${id}`, model);\r\n  }\r\n\r\n  /**\r\n   * Delete View Model\r\n   * @param controller Controller Name\r\n   * @param id\r\n   * @returns true if successful\r\n   */\r\n  deleteViewModel(controller: string, id: number) {\r\n    return this.http.delete<boolean>(`${this.apiBaseUrl}/api/${controller}/${id}`);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}