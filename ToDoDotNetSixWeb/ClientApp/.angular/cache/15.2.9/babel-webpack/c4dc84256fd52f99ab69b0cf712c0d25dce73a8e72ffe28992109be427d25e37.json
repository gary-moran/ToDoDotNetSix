{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Todo\r\n*  Date:      25 JUL 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Todo Component\r\n*  Notes:\r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description\r\n*  ----------- ----------  ---------------------------------------------\r\n*  25 JUL 2023 GM          Created\r\n************************************************************************/\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Message } from '../../shared/models/message';\nimport { MessageType } from '../../shared/models/message-type.enum';\nimport { Todo } from '../../shared/models/todo';\nimport { ModalReturn, ModalType } from '../../shared/components/modal-dialog/modal-dialog.component';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nvar State;\n(function (State) {\n  State[State[\"New\"] = 0] = \"New\";\n  State[State[\"Edit\"] = 1] = \"Edit\";\n})(State || (State = {}));\nlet TodoComponent = class TodoComponent {\n  constructor(viewModelDataService, formBuilder, messageService, modalDialogService) {\n    this.viewModelDataService = viewModelDataService;\n    this.formBuilder = formBuilder;\n    this.messageService = messageService;\n    this.modalDialogService = modalDialogService;\n    this.elementHasFocus = ElementFocus.elementHasFocus;\n    this.isControlInvalid = ControlValidation.isInvalid;\n    this.todo = new Todo();\n    this.state = State.New;\n    this.stateType = State;\n  }\n  ngOnInit() {\n    this.refreshList();\n    this.initForm();\n    ElementFocus.elementHasFocus(\"\");\n  }\n  /**\r\n   * Initialise Form\r\n   */\n  initForm() {\n    this.todoForm = this.formBuilder.group({\n      id: null,\n      name: ['', {\n        validators: [Validators.required],\n        updateOn: 'blur'\n      }],\n      description: ['', {\n        validators: [Validators.required],\n        updateOn: 'blur'\n      }],\n      isComplete: null,\n      updated: null\n    });\n  }\n  /**\r\n   * Refresh List\r\n   */\n  refreshList() {\n    this.todos$ = this.viewModelDataService.getViewModelList(\"todo\");\n  }\n  /**\r\n   * Update Form\r\n   * @param todo\r\n   */\n  updateForm(todo) {\n    this.todoForm.patchValue(todo);\n    this.todoForm.markAsPristine();\n    this.todoForm.markAsUntouched();\n  }\n  /**\r\n   * Refresh Page\r\n   * @param todo\r\n   * @param setNew\r\n   */\n  refresh(todo, setNew = false, wasNew = false) {\n    this.refreshList();\n    if (wasNew) {/* empty */}\n    this.updateForm(todo);\n    if (setNew) this.state = State.New;else this.state = State.Edit;\n  }\n  /**\r\n   * On Select\r\n   * @param todo\r\n   * @param index\r\n   */\n  onSelect(todo, index) {\n    this.row = index;\n    this.updateForm(todo);\n    this.state = State.Edit;\n  }\n  /**\r\n   * On New\r\n   */\n  onNew() {\n    this.updateForm(new Todo());\n    this.state = State.New;\n    ElementFocus.setFocusOnElement(\"name\");\n  }\n  /**\r\n   * On Save\r\n   */\n  onSave() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if ((yield _this.modalDialogService.callModalDialog(ModalType.Save)) == ModalReturn.Save) {\n        const todo = new Todo(_this.todoForm.value);\n        let response;\n        const saveMessage = _this.state === State.New ? \"Record Created\" : \"Record Updated\";\n        if (_this.state === State.New) {\n          yield _this.viewModelDataService.addViewModel(todo, \"todo\").toPromise().then(r => {\n            if (r) response = r;\n          }).catch(err => _this.messageService.sendErrorMessage(err));\n        } else if (_this.state === State.Edit && todo.id !== undefined) {\n          yield _this.viewModelDataService.updateViewModel(todo, \"todo\", todo.id).toPromise().then(r => {\n            if (r) response = r;\n          }).catch(err => _this.messageService.sendErrorMessage(err));\n        }\n        if (response) {\n          _this.refresh(response);\n          _this.messageService.sendMessage(new Message('nav-menu', saveMessage, MessageType.Success));\n        }\n      }\n    })();\n  }\n  /**\r\n   * On Delete\r\n   */\n  onDelete() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if ((yield _this2.modalDialogService.callModalDialog(ModalType.Delete)) == ModalReturn.Delete) {\n        let response = false;\n        yield _this2.viewModelDataService.deleteViewModel(\"todo\", _this2.todoForm.value.id).toPromise().then(r => {\n          if (r) response = r;\n        }).catch(err => _this2.messageService.sendErrorMessage(err));\n        if (response) {\n          _this2.refresh(new Todo(), true);\n          _this2.messageService.sendMessage(new Message('nav-menu', \"Record Deleted\", MessageType.Success));\n        }\n      }\n    })();\n  }\n};\nTodoComponent = __decorate([Component({\n  selector: 'app-todo',\n  templateUrl: './todo.component.html'\n})], TodoComponent);\nexport { TodoComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","Message","MessageType","Todo","ModalReturn","ModalType","ElementFocus","ControlValidation","State","TodoComponent","constructor","viewModelDataService","formBuilder","messageService","modalDialogService","elementHasFocus","isInvalid","New","ngOnInit","refreshList","initForm","todoForm","group","id","name","validators","required","updateOn","description","isComplete","updated","todos$","getViewModelList","updateForm","todo","patchValue","markAsPristine","markAsUntouched","refresh","setNew","wasNew","state","Edit","onSelect","index","row","onNew","setFocusOnElement","onSave","callModalDialog","Save","value","response","saveMessage","addViewModel","toPromise","then","r","catch","err","sendErrorMessage","undefined","updateViewModel","sendMessage","Success","onDelete","Delete","deleteViewModel","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\todo\\todo\\todo.component.ts"],"sourcesContent":["/**************************************************************************\r\n*\r\n*  System:    ToDo (Web)\r\n*  Module:    Client App \\ Todo\r\n*  Date:      25 JUL 2023\r\n*  Author:    Gary Moran (GM)\r\n*  Function:  Todo Component\r\n*  Notes:     \r\n*\r\n*                   : History of Amendments :\r\n*  Date        Name        Brief description                \r\n*  ----------- ----------  ---------------------------------------------\r\n*  25 JUL 2023 GM          Created\r\n************************************************************************/\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { Message } from '../../shared/models/message';\r\nimport { MessageType } from '../../shared/models/message-type.enum';\r\nimport { Todo } from '../../shared/models/todo';\r\nimport { MessageService } from '../../shared/services/message.service';\r\nimport { ViewModelDataService } from '../../shared/services/view-model-data.service';\r\nimport { ModalDialogService } from '../../shared/services/modal-dialog.service';\r\nimport { ModalReturn, ModalType } from '../../shared/components/modal-dialog/modal-dialog.component';\r\nimport { ElementFocus } from '../../shared/utilities/element-focus';\r\nimport { ControlValidation } from '../../shared/utilities/control-validation';\r\n\r\nenum State {\r\n  New,\r\n  Edit,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-todo',\r\n  templateUrl: './todo.component.html',\r\n})\r\nexport class TodoComponent implements OnInit {\r\n\r\n  elementHasFocus = ElementFocus.elementHasFocus;\r\n  isControlInvalid = ControlValidation.isInvalid;\r\n\r\n  todos$: Observable<Todo[]> | undefined;\r\n  todo: Todo = new Todo();\r\n  todoForm!: FormGroup;\r\n  row?: number;\r\n  state: State = State.New;\r\n  public stateType: typeof State = State;\r\n\r\n  constructor(\r\n    private viewModelDataService: ViewModelDataService, private formBuilder: FormBuilder, private messageService: MessageService, private modalDialogService: ModalDialogService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.refreshList();\r\n    this.initForm()\r\n    ElementFocus.elementHasFocus(\"\");\r\n  }\r\n\r\n  /**\r\n   * Initialise Form\r\n   */\r\n  initForm() {\r\n    this.todoForm = this.formBuilder.group({\r\n      id: null,\r\n      name: ['', { validators: [Validators.required], updateOn: 'blur' }],\r\n      description: ['', { validators: [Validators.required], updateOn: 'blur' }],\r\n      isComplete: null,\r\n      updated: null,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refresh List\r\n   */\r\n  refreshList(): void {\r\n    this.todos$ = this.viewModelDataService.getViewModelList<Todo>(\"todo\");\r\n  }\r\n\r\n  /**\r\n   * Update Form\r\n   * @param todo\r\n   */\r\n  updateForm(todo: Todo): void {\r\n    this.todoForm.patchValue(todo);\r\n    this.todoForm.markAsPristine();\r\n    this.todoForm.markAsUntouched();\r\n  }\r\n\r\n  /**\r\n   * Refresh Page\r\n   * @param todo\r\n   * @param setNew\r\n   */\r\n  refresh(todo: Todo, setNew: boolean = false, wasNew: boolean = false): void {\r\n    this.refreshList();\r\n    if (wasNew) { /* empty */ }\r\n    this.updateForm(todo);\r\n    if (setNew)\r\n      this.state = State.New;\r\n    else\r\n      this.state = State.Edit;\r\n  }\r\n\r\n  /**\r\n   * On Select\r\n   * @param todo\r\n   * @param index\r\n   */\r\n  onSelect(todo: Todo, index: number): void {\r\n    this.row = index;\r\n    this.updateForm(todo);\r\n    this.state = State.Edit;\r\n  }\r\n\r\n  /**\r\n   * On New\r\n   */\r\n  onNew(): void {\r\n    this.updateForm(new Todo());\r\n    this.state = State.New;\r\n    ElementFocus.setFocusOnElement(\"name\");\r\n  }\r\n\r\n  /**\r\n   * On Save\r\n   */\r\n  async onSave(): Promise<void> {\r\n\r\n    if (await this.modalDialogService.callModalDialog(ModalType.Save) == ModalReturn.Save) {\r\n\r\n      const todo: Todo = new Todo(this.todoForm.value)\r\n      let response: Todo | undefined;\r\n\r\n      const saveMessage: string = this.state === State.New ? \"Record Created\" : \"Record Updated\";\r\n\r\n      if (this.state === State.New) {\r\n        await this.viewModelDataService.addViewModel<Todo>(todo, \"todo\").toPromise()\r\n          .then(r => { if (r) response = r })\r\n          .catch(err => this.messageService.sendErrorMessage(err));\r\n      }\r\n      else if (this.state === State.Edit && todo.id !== undefined) {\r\n        await this.viewModelDataService.updateViewModel<Todo>(todo, \"todo\", todo.id).toPromise()\r\n          .then(r => { if (r) response = r })\r\n          .catch(err => this.messageService.sendErrorMessage(err));\r\n      }\r\n\r\n      if (response) {\r\n        this.refresh(response);\r\n        this.messageService.sendMessage(new Message('nav-menu', saveMessage, MessageType.Success));\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * On Delete\r\n   */\r\n  async onDelete(): Promise<void> {\r\n\r\n    if (await this.modalDialogService.callModalDialog(ModalType.Delete) == ModalReturn.Delete) {\r\n\r\n      let response: boolean = false;\r\n\r\n      await this.viewModelDataService.deleteViewModel(\"todo\", this.todoForm.value.id).toPromise()\r\n        .then(r => { if (r) response = r })\r\n        .catch(err => this.messageService.sendErrorMessage(err));\r\n      if (response) {\r\n        this.refresh(new Todo(), true);\r\n        this.messageService.sendMessage(new Message('nav-menu', \"Record Deleted\", MessageType.Success));\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}