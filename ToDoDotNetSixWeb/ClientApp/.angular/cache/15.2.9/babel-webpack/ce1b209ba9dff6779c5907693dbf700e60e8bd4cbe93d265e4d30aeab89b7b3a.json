{"ast":null,"code":"import { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\nimport { isNullOrUndefined } from 'is-what';\nimport { ErrorsTranslation } from '../../utilities/errors-translation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nconst _c0 = [\"tooltipVar\"];\nexport class ElementValidationMessageComponent {\n  constructor() {\n    this.tooltipMessageText = 'Undefined Error';\n  }\n  ngOnDestroy() {\n    this.statusChange$.unsubscribe();\n  }\n  ngAfterViewInit() {\n    // Determine text to display in tooltip and show tooltip\n    this.updateTooltipText();\n    // setup statusChange$ observable\n    this.statusChange$ = this.model.statusChanges.subscribe(() => {\n      this.updateTooltipText();\n    });\n  }\n  /**\r\n   * Update Tooltip Text\r\n   */\n  updateTooltipText() {\n    if (!isNullOrUndefined(this.key)) {\n      this.tooltipMessageText = this.key;\n    } else if (!isNullOrUndefined(this.message)) {\n      this.tooltipMessageText = this.message;\n    }\n    // if no key or message passed but a model is passed with errors, then extract the errors to determine the messages\n    else if (!isNullOrUndefined(this.model.errors)) {\n      let messageText = \"\";\n      this.tooltipMessageText = \"\";\n      // for each error object\n      for (const property in this.model.errors) {\n        // we will manually set required message\n        const required = property === 'required' && this.model.errors[property];\n        // errors that end with -MSG are our custom error messages, that need to be translated\n        if (property.endsWith(\"-MSG\") || required) {\n          messageText = required ? \"VALIDATION.REQUIRED\" : this.model.errors[property];\n          // errors can include a parameter, which needs to be removed for translation, then added back in\n          const index = messageText.indexOf(\":\");\n          let param = \"\";\n          if (index > -1) {\n            if (!(index + 1 >= messageText.length)) {\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              param = messageText.substring(index + 1);\n            }\n            // translate message\n            messageText = `${ErrorsTranslation.translate(messageText.substr(0, index))}: ${param}`;\n          } else messageText = ErrorsTranslation.translate(messageText);\n          // if necessary, append multiple messages\n          if (this.tooltipMessageText == \"\") this.tooltipMessageText = messageText;else this.tooltipMessageText = `${this.tooltipMessageText}; ${messageText}`;\n        }\n      }\n    }\n    // Close tooltip if already open\n    if (this.tooltip.isOpen()) this.tooltip.close();\n    // Set text to display\n    this.tooltip.ngbTooltip = this.tooltipMessageText;\n    // Open tooltip\n    this.tooltip.open();\n  }\n}\nElementValidationMessageComponent.ɵfac = function ElementValidationMessageComponent_Factory(t) {\n  return new (t || ElementValidationMessageComponent)();\n};\nElementValidationMessageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ElementValidationMessageComponent,\n  selectors: [[\"element-validation-message\"]],\n  viewQuery: function ElementValidationMessageComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltip = _t.first);\n    }\n  },\n  inputs: {\n    key: \"key\",\n    message: \"message\",\n    model: \"model\"\n  },\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[\"ngbTooltip\", \"\", \"placement\", \"bottom\", \"tooltipClass\", \"my-custom-class\", \"triggers\", \"manual\", 3, \"autoClose\"], [\"tooltipVar\", \"ngbTooltip\"]],\n  template: function ElementValidationMessageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"autoClose\", false);\n    }\n  },\n  dependencies: [NgbTooltipModule, i1.NgbTooltip],\n  styles: [\".my-custom-class .tooltip-inner {\\n      background-color: red;\\n    }\\n    .my-custom-class .tooltip-arrow::before {\\n      border-bottom-color: red;\\n    }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hhcmVkL2NvbXBvbmVudHMvZWxlbWVudC12YWxpZGF0aW9uLW1lc3NhZ2UvZWxlbWVudC12YWxpZGF0aW9uLW1lc3NhZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO01BQ00scUJBQXFCO0lBQ3ZCO0lBQ0E7TUFDRSx3QkFBd0I7SUFDMUIiLCJzb3VyY2VzQ29udGVudCI6WyIubXktY3VzdG9tLWNsYXNzIC50b29sdGlwLWlubmVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbiAgICB9XG4gICAgLm15LWN1c3RvbS1jbGFzcyAudG9vbHRpcC1hcnJvdzo6YmVmb3JlIHtcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHJlZDtcbiAgICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAgBA,SAAqBA,gBAAgB,QAAQ,4BAA4B;AAEzE,SAASC,iBAAiB,QAAQ,SAAS;AAE3C,SAASC,iBAAiB,QAAQ,oCAAoC;;;;AAmBtE,OAAM,MAAOC,iCAAiC;EAjB9CC;IAwBE,uBAAkB,GAAW,iBAAiB;;EAG9CC,WAAW;IACT,IAAI,CAACC,aAAa,CAACC,WAAW,EAAE;EAClC;EAEAC,eAAe;IAEb;IACA,IAAI,CAACC,iBAAiB,EAAE;IAExB;IACA,IAAI,CAACH,aAAa,GAAG,IAAI,CAACI,KAAK,CAACC,aAAa,CAACC,SAAS,CAAC,MAAK;MAC3D,IAAI,CAACH,iBAAiB,EAAE;IAC1B,CAAC,CAAC;EACJ;EAEA;;;EAGQA,iBAAiB;IAEvB,IAAI,CAACR,iBAAiB,CAAC,IAAI,CAACY,GAAG,CAAC,EAAE;MAChC,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACD,GAAG;KACnC,MAAM,IAAI,CAACZ,iBAAiB,CAAC,IAAI,CAACc,OAAO,CAAC,EAAE;MAC3C,IAAI,CAACD,kBAAkB,GAAG,IAAI,CAACC,OAAO;;IAGxC;IAAA,KACK,IAAI,CAACd,iBAAiB,CAAC,IAAI,CAACS,KAAK,CAACM,MAAM,CAAC,EAAE;MAE9C,IAAIC,WAAW,GAAW,EAAE;MAC5B,IAAI,CAACH,kBAAkB,GAAG,EAAE;MAE5B;MACA,KAAK,MAAMI,QAAQ,IAAI,IAAI,CAACR,KAAK,CAACM,MAAM,EAAE;QAExC;QACA,MAAMG,QAAQ,GAAYD,QAAQ,KAAK,UAAU,IAAI,IAAI,CAACR,KAAK,CAACM,MAAM,CAACE,QAAQ,CAAC;QAEhF;QACA,IAAIA,QAAQ,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAID,QAAQ,EAAE;UACzCF,WAAW,GAAGE,QAAQ,GAAG,qBAAqB,GAAG,IAAI,CAACT,KAAK,CAACM,MAAM,CAACE,QAAQ,CAAW;UAEtF;UACA,MAAMG,KAAK,GAAWJ,WAAW,CAACK,OAAO,CAAC,GAAG,CAAC;UAC9C,IAAIC,KAAK,GAAW,EAAE;UACtB,IAAIF,KAAK,GAAG,CAAC,CAAC,EAAE;YACd,IAAI,EAAEA,KAAK,GAAG,CAAC,IAAIJ,WAAW,CAACO,MAAM,CAAC,EAAE;cACtC;cACAD,KAAK,GAAGN,WAAW,CAACQ,SAAS,CAACJ,KAAK,GAAG,CAAC,CAAC;;YAG1C;YACAJ,WAAW,GAAG,GAAGf,iBAAiB,CAACwB,SAAS,CAACT,WAAW,CAACU,MAAM,CAAC,CAAC,EAAEN,KAAK,CAAC,CAAC,KAAKE,KAAK,EAAE;WACvF,MAGCN,WAAW,GAAGf,iBAAiB,CAACwB,SAAS,CAACT,WAAW,CAAC;UAExD;UACA,IAAI,IAAI,CAACH,kBAAkB,IAAI,EAAE,EAC/B,IAAI,CAACA,kBAAkB,GAAGG,WAAW,CAAC,KAEtC,IAAI,CAACH,kBAAkB,GAAG,GAAG,IAAI,CAACA,kBAAkB,KAAKG,WAAW,EAAE;;;;IAK9E;IACA,IAAI,IAAI,CAACW,OAAO,CAACC,MAAM,EAAE,EACvB,IAAI,CAACD,OAAO,CAACE,KAAK,EAAE;IAEtB;IACA,IAAI,CAACF,OAAO,CAACG,UAAU,GAAG,IAAI,CAACjB,kBAAkB;IAEjD;IACA,IAAI,CAACc,OAAO,CAACI,IAAI,EAAE;EACrB;;AAtFW7B,iCAAiC;mBAAjCA,iCAAiC;AAAA;AAAjCA,iCAAiC;QAAjCA,iCAAiC;EAAA8B;EAAAC;IAAA;;;;;;;;;;;;;;;;;;;;MAZzCC,4BAAuI;;;MAA5CA,iCAAmB;;;iBAHvGnC,gBAAgB;EAAAoC;EAAAC;AAAA","names":["NgbTooltipModule","isNullOrUndefined","ErrorsTranslation","ElementValidationMessageComponent","constructor","ngOnDestroy","statusChange$","unsubscribe","ngAfterViewInit","updateTooltipText","model","statusChanges","subscribe","key","tooltipMessageText","message","errors","messageText","property","required","endsWith","index","indexOf","param","length","substring","translate","substr","tooltip","isOpen","close","ngbTooltip","open","selectors","viewQuery","i0","styles","encapsulation"],"sourceRoot":"","sources":["C:\\Projects\\web\\ToDoDotNetSix\\ToDoDotNetSixWeb\\ClientApp\\src\\app\\shared\\components\\element-validation-message\\element-validation-message.component.ts"],"sourcesContent":["/**************************************************************************\n*\n*  System:    ToDo (Web)\n*  Module:    Client App \\ Shared \\ Components\n*  Date:      04-AUG-2023\n*  Author:    Gary Moran (GM)\n*  Function:  Element Validation Component\n*  Notes:\n*\n*                   : History of Amendments :\n*  Date        Name        Brief description                \n*  ----------- ----------  ---------------------------------------------\n*  04-AUG-2023 GM          Created\n************************************************************************/\n\nimport { AfterViewInit, Component, Input, ViewChild, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport { NgbTooltip, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AbstractControl} from '@angular/forms';\nimport { isNullOrUndefined } from 'is-what';\nimport { Subscription } from 'rxjs';\nimport { ErrorsTranslation } from '../../utilities/errors-translation';\r\n\n@Component({\n  selector: 'element-validation-message',\n  imports: [NgbTooltipModule],\n  standalone: true,\n  template:\n    `<div ngbTooltip placement=\"bottom\" #tooltipVar=\"ngbTooltip\" tooltipClass=\"my-custom-class\" [autoClose]=\"false\" triggers=\"manual\"></div>`,\n  encapsulation: ViewEncapsulation.None,\n  styles: [\n    `.my-custom-class .tooltip-inner {\n      background-color: red;\n    }\n    .my-custom-class .tooltip-arrow::before {\n      border-bottom-color: red;\n    }`\n  ]\n})\n\nexport class ElementValidationMessageComponent implements AfterViewInit, OnDestroy {\n\n  @Input() key!: string;\n  @Input() message!: string;\n  @Input() model!: AbstractControl;\n  @ViewChild('tooltipVar', { static: true }) tooltip!: NgbTooltip;\n\n  tooltipMessageText: string = 'Undefined Error';\n  statusChange$!: Subscription;\n\n  ngOnDestroy() {\n    this.statusChange$.unsubscribe();\n  }\n\n  ngAfterViewInit() {\n\n    // Determine text to display in tooltip and show tooltip\n    this.updateTooltipText();\n\n    // setup statusChange$ observable\n    this.statusChange$ = this.model.statusChanges.subscribe(() => {\n      this.updateTooltipText();\n    });\n  }\n\n  /**\n   * Update Tooltip Text\n   */\n  private updateTooltipText(): void {\n\n    if (!isNullOrUndefined(this.key)) {\n      this.tooltipMessageText = this.key;\n    } else if (!isNullOrUndefined(this.message)) {\n      this.tooltipMessageText = this.message;\n    }\n\n    // if no key or message passed but a model is passed with errors, then extract the errors to determine the messages\n    else if (!isNullOrUndefined(this.model.errors)) {\n\n      let messageText: string = \"\";\n      this.tooltipMessageText = \"\";\n\n      // for each error object\n      for (const property in this.model.errors) {\n\n        // we will manually set required message\n        const required: boolean = property === 'required' && this.model.errors[property];\n\n        // errors that end with -MSG are our custom error messages, that need to be translated\n        if (property.endsWith(\"-MSG\") || required) {\n          messageText = required ? \"VALIDATION.REQUIRED\" : this.model.errors[property] as string;\n\n          // errors can include a parameter, which needs to be removed for translation, then added back in\n          const index: number = messageText.indexOf(\":\");\n          let param: string = \"\";\n          if (index > -1) {\n            if (!(index + 1 >= messageText.length)) {\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n              param = messageText.substring(index + 1);\n            }\n\n            // translate message\n            messageText = `${ErrorsTranslation.translate(messageText.substr(0, index))}: ${param}`;\n          }\n\n          else\n            messageText = ErrorsTranslation.translate(messageText);\n\n          // if necessary, append multiple messages\n          if (this.tooltipMessageText == \"\")\n            this.tooltipMessageText = messageText;\n          else\n            this.tooltipMessageText = `${this.tooltipMessageText}; ${messageText}`;\n        }\n      }\n    }\n\n    // Close tooltip if already open\n    if (this.tooltip.isOpen())\n      this.tooltip.close();\n\n    // Set text to display\n    this.tooltip.ngbTooltip = this.tooltipMessageText;\n\n    // Open tooltip\n    this.tooltip.open();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}