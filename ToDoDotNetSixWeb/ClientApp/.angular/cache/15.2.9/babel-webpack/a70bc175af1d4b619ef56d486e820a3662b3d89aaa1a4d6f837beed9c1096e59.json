{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/web/ToDoDotNetSix/ToDoDotNetSixWeb/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { Message } from '../../shared/models/message';\nimport { MessageType } from '../../shared/models/message-type.enum';\nimport { Todo } from '../../shared/models/todo';\nimport { ModalReturn, ModalType } from '../../shared/components/modal-dialog/modal-dialog.component';\nimport { ElementFocus } from '../../shared/utilities/element-focus';\nimport { ControlValidation } from '../../shared/utilities/control-validation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../shared/services/view-model-data.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../shared/services/message.service\";\nimport * as i4 from \"../../shared/services/modal-dialog.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../shared/components/element-validation-message/element-validation-message.component\";\nfunction TodoComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"p\")(2, \"em\");\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"table-active\": a0\n  };\n};\nfunction TodoComponent_div_5_table_2_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 32);\n    i0.ɵɵlistener(\"click\", function TodoComponent_div_5_table_2_tr_12_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const todo_r7 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r9.onSelect(todo_r7));\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"div\", 33);\n    i0.ɵɵelement(9, \"input\", 34);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const todo_r7 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, ctx_r6.state === ctx_r6.stateType.Edit && todo_r7.id === ctx_r6.todoForm.get(\"id\").value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r7.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r7.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r7.description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"checked\", todo_r7.isComplete);\n  }\n}\nfunction TodoComponent_div_5_table_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 29)(1, \"thead\", 30)(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Completed\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, TodoComponent_div_5_table_2_tr_12_Template, 10, 7, \"tr\", 31);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const todos_r4 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngForOf\", todos_r4);\n  }\n}\nfunction TodoComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 27);\n    i0.ɵɵtemplate(2, TodoComponent_div_5_table_2_Template, 13, 1, \"table\", 28);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const todos_r4 = ctx.ngIf;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", todos_r4);\n  }\n}\nfunction TodoComponent_element_validation_message_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 35);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"model\", ctx_r2.todoForm.get(\"name\"));\n  }\n}\nfunction TodoComponent_element_validation_message_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"element-validation-message\", 35);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"model\", ctx_r3.todoForm.get(\"description\"));\n  }\n}\nvar State = /*#__PURE__*/(() => {\n  (function (State) {\n    State[State[\"New\"] = 0] = \"New\";\n    State[State[\"Edit\"] = 1] = \"Edit\";\n  })(State || (State = {}));\n  return State;\n})();\nexport let TodoComponent = /*#__PURE__*/(() => {\n  class TodoComponent {\n    constructor(viewModelDataService, formBuilder, messageService, modalDialogService) {\n      this.viewModelDataService = viewModelDataService;\n      this.formBuilder = formBuilder;\n      this.messageService = messageService;\n      this.modalDialogService = modalDialogService;\n      this.elementHasFocus = ElementFocus.elementHasFocus;\n      this.isControlInvalid = ControlValidation.isInvalid;\n      this.todo = new Todo();\n      this.state = State.New;\n      this.stateType = State;\n    }\n    ngOnInit() {\n      this.refreshList();\n      this.initForm();\n      ElementFocus.elementHasFocus(\"\");\n    }\n    /**\r\n     * Initialise Form\r\n     */\n    initForm() {\n      this.todoForm = this.formBuilder.group({\n        id: null,\n        name: ['', {\n          validators: [Validators.required],\n          updateOn: 'blur'\n        }],\n        description: ['', {\n          validators: [Validators.required],\n          updateOn: 'blur'\n        }],\n        isComplete: null,\n        updated: null\n      });\n    }\n    /**\r\n     * Refresh List\r\n     */\n    refreshList() {\n      this.todos$ = this.viewModelDataService.getViewModelList(\"todo\");\n    }\n    /**\r\n     * Update Form\r\n     * @param todo\r\n     */\n    updateForm(todo) {\n      this.todoForm.patchValue(todo);\n      this.todoForm.markAsPristine();\n      this.todoForm.markAsUntouched();\n    }\n    /**\r\n     * Refresh Page\r\n     * @param todo\r\n     * @param setNew\r\n     */\n    refresh(todo, setNew = false, wasNew = false) {\n      this.refreshList();\n      if (wasNew) {/* empty */}\n      this.updateForm(todo);\n      if (setNew) this.state = State.New;else this.state = State.Edit;\n    }\n    /**\r\n     * On Select\r\n     * @param todo\r\n     */\n    onSelect(todo) {\n      this.updateForm(todo);\n      this.state = State.Edit;\n    }\n    /**\r\n     * On New\r\n     */\n    onNew() {\n      this.updateForm(new Todo());\n      this.state = State.New;\n      ElementFocus.setFocusOnElement(\"name\");\n    }\n    /**\r\n     * On Save\r\n     */\n    onSave() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if ((yield _this.modalDialogService.callModalDialog(ModalType.Save)) == ModalReturn.Save) {\n          const todo = new Todo(_this.todoForm.value);\n          let response;\n          const saveMessage = _this.state === State.New ? \"Record Created\" : \"Record Updated\";\n          if (_this.state === State.New) {\n            yield _this.viewModelDataService.addViewModel(todo, \"todo\").toPromise().then(r => {\n              if (r) response = r;\n            }).catch(err => _this.messageService.sendErrorMessage(err));\n          } else if (_this.state === State.Edit && todo.id !== undefined) {\n            yield _this.viewModelDataService.updateViewModel(todo, \"todo\", todo.id).toPromise().then(r => {\n              if (r) response = r;\n            }).catch(err => _this.messageService.sendErrorMessage(err));\n          }\n          if (response) {\n            _this.refresh(response);\n            _this.messageService.sendMessage(new Message('nav-menu', saveMessage, MessageType.Success));\n          }\n        }\n      })();\n    }\n    /**\r\n     * On Delete\r\n     */\n    onDelete() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        if ((yield _this2.modalDialogService.callModalDialog(ModalType.Delete)) == ModalReturn.Delete) {\n          let response = false;\n          yield _this2.viewModelDataService.deleteViewModel(\"todo\", _this2.todoForm.value.id).toPromise().then(r => {\n            if (r) response = r;\n          }).catch(err => _this2.messageService.sendErrorMessage(err));\n          if (response) {\n            _this2.refresh(new Todo(), true);\n            _this2.messageService.sendMessage(new Message('nav-menu', \"Record Deleted\", MessageType.Success));\n          }\n        }\n      })();\n    }\n  }\n  TodoComponent.ɵfac = function TodoComponent_Factory(t) {\n    return new (t || TodoComponent)(i0.ɵɵdirectiveInject(i1.ViewModelDataService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i4.ModalDialogService));\n  };\n  TodoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TodoComponent,\n    selectors: [[\"app-todo\"]],\n    decls: 39,\n    vars: 9,\n    consts: [[\"role\", \"main\", 1, \"container\"], [1, \"row\"], [\"id\", \"tableLabel\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"g-2\"], [1, \"form-floating\", \"col-md-4\"], [\"id\", \"id\", \"type\", \"text\", \"formControlName\", \"id\", \"readonly\", \"\", \"placeholder\", \"id\", 1, \"form-control\"], [\"for\", \"id\", 1, \"form-label\"], [1, \"mb-2\", \"form-floating\", \"col-md-8\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"name\", \"maxLength\", \"20\", 1, \"form-control\"], [3, \"model\", 4, \"ngIf\"], [\"for\", \"name\", 1, \"form-label\"], [1, \"mb-2\", \"form-floating\"], [\"id\", \"description\", \"type\", \"text\", \"formControlName\", \"description\", \"placeholder\", \"description\", \"maxLength\", \"100\", 1, \"form-control\"], [\"for\", \"description\", 1, \"form-label\"], [1, \"form-check\", \"form-switch\", \"mb-2\"], [\"id\", \"is-complete\", \"type\", \"checkbox\", \"formControlName\", \"isComplete\", 1, \"form-check-input\"], [\"for\", \"is-complete\", 1, \"form-check-label\"], [1, \"gap-2\", \"d-flex\", \"justify-content-end\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [1, \"table-responsive\"], [\"class\", \"table table-hover table-bordered\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-hover\", \"table-bordered\"], [1, \"table-dark\"], [3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\", \"click\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"disabled\", \"\", 1, \"form-check-input\", 3, \"checked\"], [3, \"model\"]],\n    template: function TodoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"main\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n        i0.ɵɵtext(3, \"To-do's\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(4, TodoComponent_div_4_Template, 4, 0, \"div\", 3);\n        i0.ɵɵtemplate(5, TodoComponent_div_5_Template, 3, 1, \"div\", 3);\n        i0.ɵɵpipe(6, \"async\");\n        i0.ɵɵelementStart(7, \"div\", 4)(8, \"div\", 5)(9, \"h5\", 6);\n        i0.ɵɵtext(10, \"To-do Item\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 7)(12, \"form\", 8);\n        i0.ɵɵlistener(\"ngSubmit\", function TodoComponent_Template_form_ngSubmit_12_listener() {\n          return ctx.onSave();\n        });\n        i0.ɵɵelementStart(13, \"div\", 9)(14, \"div\", 10);\n        i0.ɵɵelement(15, \"input\", 11);\n        i0.ɵɵelementStart(16, \"label\", 12);\n        i0.ɵɵtext(17, \"ID\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 13);\n        i0.ɵɵelement(19, \"input\", 14);\n        i0.ɵɵtemplate(20, TodoComponent_element_validation_message_20_Template, 1, 1, \"element-validation-message\", 15);\n        i0.ɵɵelementStart(21, \"label\", 16);\n        i0.ɵɵtext(22, \"Name\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"div\", 17);\n        i0.ɵɵelement(24, \"input\", 18);\n        i0.ɵɵtemplate(25, TodoComponent_element_validation_message_25_Template, 1, 1, \"element-validation-message\", 15);\n        i0.ɵɵelementStart(26, \"label\", 19);\n        i0.ɵɵtext(27, \"Description\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"div\", 20);\n        i0.ɵɵelement(29, \"input\", 21);\n        i0.ɵɵelementStart(30, \"label\", 22);\n        i0.ɵɵtext(31, \"Completed\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(32, \"div\", 23)(33, \"button\", 24);\n        i0.ɵɵlistener(\"click\", function TodoComponent_Template_button_click_33_listener() {\n          return ctx.onNew();\n        });\n        i0.ɵɵtext(34, \"New\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"button\", 25);\n        i0.ɵɵtext(36, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"button\", 26);\n        i0.ɵɵlistener(\"click\", function TodoComponent_Template_button_click_37_listener() {\n          return ctx.onDelete();\n        });\n        i0.ɵɵtext(38, \"Delete\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", !ctx.todos$);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(6, 7, ctx.todos$));\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.todoForm);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", !ctx.elementHasFocus(\"name\") && ctx.isControlInvalid(ctx.todoForm.get(\"name\")));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.elementHasFocus(\"description\") && ctx.isControlInvalid(ctx.todoForm.get(\"description\")));\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"disabled\", !ctx.todoForm.valid);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.state !== ctx.stateType.Edit);\n      }\n    },\n    dependencies: [i5.NgClass, i5.NgForOf, i5.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i6.ElementValidationMessageComponent, i5.AsyncPipe],\n    encapsulation: 2\n  });\n  return TodoComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}